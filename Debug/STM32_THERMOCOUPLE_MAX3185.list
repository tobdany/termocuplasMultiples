
STM32_THERMOCOUPLE_MAX3185.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006210  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  08006320  08006320  00007320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800690c  0800690c  000081d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800690c  0800690c  0000790c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006914  08006914  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006914  08006914  00007914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006918  08006918  00007918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800691c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  200001d4  08006af0  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  08006af0  00008408  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009557  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a36  00000000  00000000  00011754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  00013190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000710  00000000  00000000  00013ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e4c  00000000  00000000  000141e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac4c  00000000  00000000  0002c034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008443b  00000000  00000000  00036c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb0bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003690  00000000  00000000  000bb100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a9  00000000  00000000  000be790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006308 	.word	0x08006308

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006308 	.word	0x08006308

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <MAX31856_Init>:
#include <math.h>    // Para NAN
#include <stdio.h>   // Para printf, si se usa para depuración


// --- Funciones internas de bajo nivel para comunicación SPI ---
bool MAX31856_Init(Max31856_HandleTypeDef* hmax, SPI_HandleTypeDef* hspi, GPIO_TypeDef* cs_port, uint16_t cs_pin) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
 8000b34:	807b      	strh	r3, [r7, #2]
  // Almacena los handles y pines en la estructura del sensor
  hmax->hspi = hspi;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	68ba      	ldr	r2, [r7, #8]
 8000b3a:	601a      	str	r2, [r3, #0]
  hmax->cs_port = cs_port;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	605a      	str	r2, [r3, #4]
  hmax->cs_pin = cs_pin;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	887a      	ldrh	r2, [r7, #2]
 8000b46:	811a      	strh	r2, [r3, #8]

  // Asegura que el pin CS esté en alto (deseleccionado) al inicio
  HAL_GPIO_WritePin(hmax->cs_port, hmax->cs_pin, GPIO_PIN_SET);
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	6858      	ldr	r0, [r3, #4]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	891b      	ldrh	r3, [r3, #8]
 8000b50:	2201      	movs	r2, #1
 8000b52:	4619      	mov	r1, r3
 8000b54:	f001 fa00 	bl	8001f58 <HAL_GPIO_WritePin>

  hmax->initialized = true; // Asumimos éxito si el handle SPI es válido.
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	72da      	strb	r2, [r3, #11]

  // Configuración inicial del sensor MAX31856
  // Desactiva la máscara de fallas (assert on any fault)
  writeRegister8(hmax, MAX31856_MASK_REG, 0x0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2102      	movs	r1, #2
 8000b62:	68f8      	ldr	r0, [r7, #12]
 8000b64:	f000 f84b 	bl	8000bfe <writeRegister8>

  // Habilita la detección de fallas de circuito abierto
  writeRegister8(hmax, MAX31856_CR0_REG, MAX31856_CR0_OCFAULT0);
 8000b68:	2210      	movs	r2, #16
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f000 f846 	bl	8000bfe <writeRegister8>

  // Establece el offset de temperatura de la unión fría a cero
  writeRegister8(hmax, MAX31856_CJTO_REG, 0x0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2109      	movs	r1, #9
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f000 f841 	bl	8000bfe <writeRegister8>

  MAX31856_SetThermocoupleType(hmax, MAX31856_TCTYPE_K);
 8000b7c:	2103      	movs	r1, #3
 8000b7e:	68f8      	ldr	r0, [r7, #12]
 8000b80:	f000 f8d6 	bl	8000d30 <MAX31856_SetThermocoupleType>
  MAX31856_SetConversionMode(hmax, MAX31856_ONESHOT);
 8000b84:	2100      	movs	r1, #0
 8000b86:	68f8      	ldr	r0, [r7, #12]
 8000b88:	f000 f8a4 	bl	8000cd4 <MAX31856_SetConversionMode>

  return hmax->initialized;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	7adb      	ldrb	r3, [r3, #11]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <readRegisterN>:
  * @param  addr: Dirección del registro a leer (MSB=0 para lectura).
  * @param  buffer: Puntero al buffer donde se almacenarán los datos leídos.
  * @param  n: Número de bytes a leer.
  * @retval None
  */
void readRegisterN(Max31856_HandleTypeDef* hmax, uint8_t addr, uint8_t buffer[], uint8_t n) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	607a      	str	r2, [r7, #4]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	72fb      	strb	r3, [r7, #11]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	72bb      	strb	r3, [r7, #10]
  addr &= 0x7F; // MSB=0 para lectura, asegura que el bit superior no esté seteado
 8000bac:	7afb      	ldrb	r3, [r7, #11]
 8000bae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	72fb      	strb	r3, [r7, #11]

  // Baja el pin CS del sensor específico para seleccionarlo
  HAL_GPIO_WritePin(hmax->cs_port, hmax->cs_pin, GPIO_PIN_RESET);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	6858      	ldr	r0, [r3, #4]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	891b      	ldrh	r3, [r3, #8]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f001 f9c9 	bl	8001f58 <HAL_GPIO_WritePin>

  // Transmite la dirección del registro
  HAL_SPI_Transmit(hmax->hspi, &addr, 1, SPI_DELAY);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	6818      	ldr	r0, [r3, #0]
 8000bca:	f107 010b 	add.w	r1, r7, #11
 8000bce:	23ff      	movs	r3, #255	@ 0xff
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f001 fe6d 	bl	80028b0 <HAL_SPI_Transmit>
  // Recibe los datos del registro
  HAL_SPI_Receive(hmax->hspi, buffer, n, SPI_DELAY);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	6818      	ldr	r0, [r3, #0]
 8000bda:	7abb      	ldrb	r3, [r7, #10]
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	23ff      	movs	r3, #255	@ 0xff
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	f001 ffa8 	bl	8002b36 <HAL_SPI_Receive>

  // Sube el pin CS del sensor específico para deseleccionarlo
  HAL_GPIO_WritePin(hmax->cs_port, hmax->cs_pin, GPIO_PIN_SET);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6858      	ldr	r0, [r3, #4]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	891b      	ldrh	r3, [r3, #8]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f001 f9b1 	bl	8001f58 <HAL_GPIO_WritePin>
}
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <writeRegister8>:
  * @param  hmax: Puntero a la estructura de handle del sensor MAX31856.
  * @param  addr: Dirección del registro a escribir (MSB=1 para escritura).
  * @param  data: Byte de datos a escribir.
  * @retval None
  */
void writeRegister8(Max31856_HandleTypeDef* hmax, uint8_t addr, uint8_t data) {
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	460b      	mov	r3, r1
 8000c08:	70fb      	strb	r3, [r7, #3]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	70bb      	strb	r3, [r7, #2]
  addr |= 0x80; // MSB=1 para escritura, asegura que el bit superior esté seteado
 8000c0e:	78fb      	ldrb	r3, [r7, #3]
 8000c10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c14:	70fb      	strb	r3, [r7, #3]

  uint8_t buffer[2] = {addr, data};
 8000c16:	78fb      	ldrb	r3, [r7, #3]
 8000c18:	733b      	strb	r3, [r7, #12]
 8000c1a:	78bb      	ldrb	r3, [r7, #2]
 8000c1c:	737b      	strb	r3, [r7, #13]

  // Baja el pin CS del sensor específico para seleccionarlo
  HAL_GPIO_WritePin(hmax->cs_port, hmax->cs_pin, GPIO_PIN_RESET);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6858      	ldr	r0, [r3, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	891b      	ldrh	r3, [r3, #8]
 8000c26:	2200      	movs	r2, #0
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f001 f995 	bl	8001f58 <HAL_GPIO_WritePin>

  // Transmite la dirección del registro y el dato
  HAL_SPI_Transmit(hmax->hspi, buffer, 2, SPI_DELAY);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6818      	ldr	r0, [r3, #0]
 8000c32:	f107 010c 	add.w	r1, r7, #12
 8000c36:	23ff      	movs	r3, #255	@ 0xff
 8000c38:	2202      	movs	r2, #2
 8000c3a:	f001 fe39 	bl	80028b0 <HAL_SPI_Transmit>

  // Sube el pin CS del sensor específico para deseleccionarlo
  HAL_GPIO_WritePin(hmax->cs_port, hmax->cs_pin, GPIO_PIN_SET);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6858      	ldr	r0, [r3, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	891b      	ldrh	r3, [r3, #8]
 8000c46:	2201      	movs	r2, #1
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f001 f985 	bl	8001f58 <HAL_GPIO_WritePin>
}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <readRegister8>:
  * @brief  Lee un byte de un registro del MAX31856.
  * @param  hmax: Puntero a la estructura de handle del sensor MAX31856.
  * @param  addr: Dirección del registro a leer.
  * @retval El byte leído del registro.
  */
uint8_t readRegister8(Max31856_HandleTypeDef* hmax, uint8_t addr) {
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b084      	sub	sp, #16
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
 8000c5e:	460b      	mov	r3, r1
 8000c60:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	73fb      	strb	r3, [r7, #15]
  readRegisterN(hmax, addr, &ret, 1);
 8000c66:	f107 020f 	add.w	r2, r7, #15
 8000c6a:	78f9      	ldrb	r1, [r7, #3]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ff92 	bl	8000b98 <readRegisterN>
  return ret;
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <readRegister24>:
  * @brief  Lee 24 bits (3 bytes) de un registro del MAX31856.
  * @param  hmax: Puntero a la estructura de handle del sensor MAX31856.
  * @param  addr: Dirección del registro a leer.
  * @retval Los 24 bits leídos del registro.
  */
uint32_t readRegister24(Max31856_HandleTypeDef* hmax, uint8_t addr) {
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b084      	sub	sp, #16
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	460b      	mov	r3, r1
 8000c88:	70fb      	strb	r3, [r7, #3]
  uint8_t buffer[3] = {0, 0, 0};
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	2100      	movs	r1, #0
 8000c90:	460a      	mov	r2, r1
 8000c92:	801a      	strh	r2, [r3, #0]
 8000c94:	460a      	mov	r2, r1
 8000c96:	709a      	strb	r2, [r3, #2]
  readRegisterN(hmax, addr, buffer, 3);
 8000c98:	f107 0208 	add.w	r2, r7, #8
 8000c9c:	78f9      	ldrb	r1, [r7, #3]
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff79 	bl	8000b98 <readRegisterN>

  uint32_t ret = (uint32_t)buffer[0];
 8000ca6:	7a3b      	ldrb	r3, [r7, #8]
 8000ca8:	60fb      	str	r3, [r7, #12]
  ret <<= 8;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	021b      	lsls	r3, r3, #8
 8000cae:	60fb      	str	r3, [r7, #12]
  ret |= buffer[1];
 8000cb0:	7a7b      	ldrb	r3, [r7, #9]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
  ret <<= 8;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	021b      	lsls	r3, r3, #8
 8000cbe:	60fb      	str	r3, [r7, #12]
  ret |= buffer[2];
 8000cc0:	7abb      	ldrb	r3, [r7, #10]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]

  return ret;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <MAX31856_SetConversionMode>:
  * @brief  Establece el modo de conversión del sensor (One-Shot o Continuo).
  * @param  hmax: Puntero a la estructura de handle del sensor MAX31856.
  * @param  mode: Modo de conversión a establecer.
  * @retval None
  */
void MAX31856_SetConversionMode(Max31856_HandleTypeDef* hmax, max31856_conversion_mode_t mode) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
  hmax->conversionMode = mode;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	78fa      	ldrb	r2, [r7, #3]
 8000ce4:	729a      	strb	r2, [r3, #10]
  uint8_t t = readRegister8(hmax, MAX31856_CR0_REG); // Obtiene el valor actual del registro
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ffb4 	bl	8000c56 <readRegister8>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	73fb      	strb	r3, [r7, #15]
  if (hmax->conversionMode == MAX31856_CONTINUOUS) {
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	7a9b      	ldrb	r3, [r3, #10]
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d108      	bne.n	8000d0c <MAX31856_SetConversionMode+0x38>
    t |= MAX31856_CR0_AUTOCONVERT; // Enciende la conversión automática
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d00:	73fb      	strb	r3, [r7, #15]
    t &= ~MAX31856_CR0_1SHOT;      // Apaga el modo one-shot
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000d08:	73fb      	strb	r3, [r7, #15]
 8000d0a:	e007      	b.n	8000d1c <MAX31856_SetConversionMode+0x48>
  } else {
    t &= ~MAX31856_CR0_AUTOCONVERT; // Apaga la conversión automática
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d12:	73fb      	strb	r3, [r7, #15]
    t |= MAX31856_CR0_1SHOT;        // Enciende el modo one-shot
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d1a:	73fb      	strb	r3, [r7, #15]
  }
  writeRegister8(hmax, MAX31856_CR0_REG, t); // Escribe el valor de vuelta al registro
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	2100      	movs	r1, #0
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ff6b 	bl	8000bfe <writeRegister8>
}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <MAX31856_SetThermocoupleType>:
  * @brief  Establece el tipo de termopar para el sensor.
  * @param  hmax: Puntero a la estructura de handle del sensor MAX31856.
  * @param  type: Tipo de termopar a establecer.
  * @retval None
  */
void MAX31856_SetThermocoupleType(Max31856_HandleTypeDef* hmax, max31856_thermocoupletype_t type) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	70fb      	strb	r3, [r7, #3]
  uint8_t t = readRegister8(hmax, MAX31856_CR1_REG);
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ff89 	bl	8000c56 <readRegister8>
 8000d44:	4603      	mov	r3, r0
 8000d46:	73fb      	strb	r3, [r7, #15]
  t &= 0xF0; // Enmascara los 4 bits inferiores
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	f023 030f 	bic.w	r3, r3, #15
 8000d4e:	73fb      	strb	r3, [r7, #15]
  t |= (uint8_t)type & 0x0F;
 8000d50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d54:	f003 030f 	and.w	r3, r3, #15
 8000d58:	b25a      	sxtb	r2, r3
 8000d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	b25b      	sxtb	r3, r3
 8000d62:	73fb      	strb	r3, [r7, #15]
  writeRegister8(hmax, MAX31856_CR1_REG, t);
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	461a      	mov	r2, r3
 8000d68:	2101      	movs	r1, #1
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ff47 	bl	8000bfe <writeRegister8>
}
 8000d70:	bf00      	nop
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <MAX31856_TriggerOneShot>:
/**
  * @brief  Dispara una conversión One-Shot en el sensor.
  * @param  hmax: Puntero a la estructura de handle del sensor MAX31856.
  * @retval None
  */
void MAX31856_TriggerOneShot(Max31856_HandleTypeDef* hmax) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if (hmax->conversionMode == MAX31856_CONTINUOUS)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	7a9b      	ldrb	r3, [r3, #10]
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d014      	beq.n	8000db2 <MAX31856_TriggerOneShot+0x3a>
    return; // No se dispara one-shot si está en modo continuo

  uint8_t t = readRegister8(hmax, MAX31856_CR0_REG); // Obtiene el valor actual del registro
 8000d88:	2100      	movs	r1, #0
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ff63 	bl	8000c56 <readRegister8>
 8000d90:	4603      	mov	r3, r0
 8000d92:	73fb      	strb	r3, [r7, #15]
  t &= ~MAX31856_CR0_AUTOCONVERT;              // Apaga la conversión automática
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d9a:	73fb      	strb	r3, [r7, #15]
  t |= MAX31856_CR0_1SHOT;                     // Enciende el modo one-shot
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000da2:	73fb      	strb	r3, [r7, #15]
  writeRegister8(hmax, MAX31856_CR0_REG, t);   // Escribe el valor de vuelta al registro
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	461a      	mov	r2, r3
 8000da8:	2100      	movs	r1, #0
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ff27 	bl	8000bfe <writeRegister8>
 8000db0:	e000      	b.n	8000db4 <MAX31856_TriggerOneShot+0x3c>
    return; // No se dispara one-shot si está en modo continuo
 8000db2:	bf00      	nop
                                       // La conversión comienza cuando CS se pone en alto (después de la escritura)
}
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <MAX31856_ConversionComplete>:
/**
  * @brief  Verifica si la conversión de temperatura ha sido completada.
  * @param  hmax: Puntero a la estructura de handle del sensor MAX31856.
  * @retval true si la conversión está completa, false en caso contrario.
  */
bool MAX31856_ConversionComplete(Max31856_HandleTypeDef* hmax) {
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  if (hmax->conversionMode == MAX31856_CONTINUOUS)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7a9b      	ldrb	r3, [r3, #10]
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d101      	bne.n	8000dce <MAX31856_ConversionComplete+0x14>
    return true; // Siempre "completa" en modo continuo
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00b      	b.n	8000de6 <MAX31856_ConversionComplete+0x2c>

  // La conversión está completa cuando el bit MAX31856_CR0_1SHOT se borra automáticamente
  return !(readRegister8(hmax, MAX31856_CR0_REG) & MAX31856_CR0_1SHOT);
 8000dce:	2100      	movs	r1, #0
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff40 	bl	8000c56 <readRegister8>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	bf0c      	ite	eq
 8000de0:	2301      	moveq	r3, #1
 8000de2:	2300      	movne	r3, #0
 8000de4:	b2db      	uxtb	r3, r3
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <MAX31856_ReadThermocoupleTemperature>:
/**
  * @brief  Lee la temperatura del termopar del sensor.
  * @param  hmax: Puntero a la estructura de handle del sensor MAX31856.
  * @retval La temperatura del termopar en grados Celsius, o NAN si hay timeout.
  */
float MAX31856_ReadThermocoupleTemperature(Max31856_HandleTypeDef* hmax) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  // Para el modo One-Shot, dispara una conversión y espera a que termine
  if (hmax->conversionMode == MAX31856_ONESHOT) {
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	7a9b      	ldrb	r3, [r3, #10]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d11b      	bne.n	8000e38 <MAX31856_ReadThermocoupleTemperature+0x48>
    MAX31856_TriggerOneShot(hmax);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ffb9 	bl	8000d78 <MAX31856_TriggerOneShot>
    uint32_t start = HAL_GetTick();
 8000e06:	f000 fe19 	bl	8001a3c <HAL_GetTick>
 8000e0a:	60b8      	str	r0, [r7, #8]
    while (!MAX31856_ConversionComplete(hmax)) {
 8000e0c:	e00b      	b.n	8000e26 <MAX31856_ReadThermocoupleTemperature+0x36>
      if (HAL_GetTick() - start > 250) // Timeout de 250ms
 8000e0e:	f000 fe15 	bl	8001a3c <HAL_GetTick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2bfa      	cmp	r3, #250	@ 0xfa
 8000e1a:	d901      	bls.n	8000e20 <MAX31856_ReadThermocoupleTemperature+0x30>
        return NAN; // Retorna Not-A-Number en caso de timeout
 8000e1c:	4b19      	ldr	r3, [pc, #100]	@ (8000e84 <MAX31856_ReadThermocoupleTemperature+0x94>)
 8000e1e:	e02d      	b.n	8000e7c <MAX31856_ReadThermocoupleTemperature+0x8c>
      HAL_Delay(10); // Pequeño retraso para no saturar el bus
 8000e20:	200a      	movs	r0, #10
 8000e22:	f000 fe15 	bl	8001a50 <HAL_Delay>
    while (!MAX31856_ConversionComplete(hmax)) {
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffc7 	bl	8000dba <MAX31856_ConversionComplete>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	f083 0301 	eor.w	r3, r3, #1
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1ea      	bne.n	8000e0e <MAX31856_ReadThermocoupleTemperature+0x1e>
    }
  }

  // Lee los registros de temperatura linealizada del termopar (3 bytes)
  int32_t temp24 = (int32_t)readRegister24(hmax, MAX31856_LTCBH_REG); // Castea a int32_t para manejo de signo
 8000e38:	210c      	movs	r1, #12
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ff1f 	bl	8000c7e <readRegister24>
 8000e40:	4603      	mov	r3, r0
 8000e42:	60fb      	str	r3, [r7, #12]

  // El bit 23 es el bit de signo (MSB de los 24 bits de datos).
  // Si está seteado, el número es negativo y necesitamos extender el signo a 32 bits.
  if (temp24 & 0x800000) {
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <MAX31856_ReadThermocoupleTemperature+0x66>
    temp24 |= 0xFF000000; // Extiende el signo para valores negativos
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8000e54:	60fb      	str	r3, [r7, #12]
  }

  // Los 5 bits menos significativos (bits 0-4) no se usan y deben ser descartados.
  temp24 >>= 5;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	115b      	asrs	r3, r3, #5
 8000e5a:	60fb      	str	r3, [r7, #12]

  // La resolución es de 0.0078125 °C/LSB (1/128).
  return temp24 * 0.0078125;
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f7ff fad1 	bl	8000404 <__aeabi_i2d>
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000e6a:	f7ff fb35 	bl	80004d8 <__aeabi_dmul>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	4610      	mov	r0, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	f7ff fe07 	bl	8000a88 <__aeabi_d2f>
 8000e7a:	4603      	mov	r3, r0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	7fc00000 	.word	0x7fc00000

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e8a:	f6ad 2d94 	subw	sp, sp, #2708	@ 0xa94
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
		char MSG[100];
       char MSG0[100];
       char MSG1[100]=  "Could not initialize thermocouple\n\r";
 8000e90:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8000e94:	f5a3 7c96 	sub.w	ip, r3, #300	@ 0x12c
 8000e98:	4be2      	ldr	r3, [pc, #904]	@ (8001224 <main+0x39c>)
 8000e9a:	461c      	mov	r4, r3
 8000e9c:	4666      	mov	r6, ip
 8000e9e:	f104 0e20 	add.w	lr, r4, #32
 8000ea2:	4635      	mov	r5, r6
 8000ea4:	4623      	mov	r3, r4
 8000ea6:	6818      	ldr	r0, [r3, #0]
 8000ea8:	6859      	ldr	r1, [r3, #4]
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eb0:	3410      	adds	r4, #16
 8000eb2:	3610      	adds	r6, #16
 8000eb4:	4574      	cmp	r4, lr
 8000eb6:	d1f4      	bne.n	8000ea2 <main+0x1a>
 8000eb8:	4633      	mov	r3, r6
 8000eba:	4622      	mov	r2, r4
 8000ebc:	6810      	ldr	r0, [r2, #0]
 8000ebe:	6018      	str	r0, [r3, #0]
 8000ec0:	f10c 0324 	add.w	r3, ip, #36	@ 0x24
 8000ec4:	2240      	movs	r2, #64	@ 0x40
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f003 f946 	bl	800415a <memset>
       char MSG3[100]=  "$$***************************************$$\n\r";
 8000ece:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8000ed2:	f5a3 7cc8 	sub.w	ip, r3, #400	@ 0x190
 8000ed6:	4bd4      	ldr	r3, [pc, #848]	@ (8001228 <main+0x3a0>)
 8000ed8:	461c      	mov	r4, r3
 8000eda:	4666      	mov	r6, ip
 8000edc:	f104 0e20 	add.w	lr, r4, #32
 8000ee0:	4635      	mov	r5, r6
 8000ee2:	4623      	mov	r3, r4
 8000ee4:	6818      	ldr	r0, [r3, #0]
 8000ee6:	6859      	ldr	r1, [r3, #4]
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eee:	3410      	adds	r4, #16
 8000ef0:	3610      	adds	r6, #16
 8000ef2:	4574      	cmp	r4, lr
 8000ef4:	d1f4      	bne.n	8000ee0 <main+0x58>
 8000ef6:	4633      	mov	r3, r6
 8000ef8:	6820      	ldr	r0, [r4, #0]
 8000efa:	6861      	ldr	r1, [r4, #4]
 8000efc:	68a2      	ldr	r2, [r4, #8]
 8000efe:	c307      	stmia	r3!, {r0, r1, r2}
 8000f00:	89a2      	ldrh	r2, [r4, #12]
 8000f02:	801a      	strh	r2, [r3, #0]
 8000f04:	f10c 032e 	add.w	r3, ip, #46	@ 0x2e
 8000f08:	2236      	movs	r2, #54	@ 0x36
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f003 f924 	bl	800415a <memset>
       char MSG2[100]=  "Thermocouple type: ";
 8000f12:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8000f16:	f5a3 76fa 	sub.w	r6, r3, #500	@ 0x1f4
 8000f1a:	4bc4      	ldr	r3, [pc, #784]	@ (800122c <main+0x3a4>)
 8000f1c:	4634      	mov	r4, r6
 8000f1e:	461d      	mov	r5, r3
 8000f20:	6828      	ldr	r0, [r5, #0]
 8000f22:	6869      	ldr	r1, [r5, #4]
 8000f24:	68aa      	ldr	r2, [r5, #8]
 8000f26:	68eb      	ldr	r3, [r5, #12]
 8000f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2a:	6928      	ldr	r0, [r5, #16]
 8000f2c:	6020      	str	r0, [r4, #0]
 8000f2e:	f106 0314 	add.w	r3, r6, #20
 8000f32:	2250      	movs	r2, #80	@ 0x50
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f003 f90f 	bl	800415a <memset>
       char MSG4[100]=  "B Type\n\r";
 8000f3c:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8000f40:	f5a3 7416 	sub.w	r4, r3, #600	@ 0x258
 8000f44:	4aba      	ldr	r2, [pc, #744]	@ (8001230 <main+0x3a8>)
 8000f46:	4623      	mov	r3, r4
 8000f48:	6810      	ldr	r0, [r2, #0]
 8000f4a:	6851      	ldr	r1, [r2, #4]
 8000f4c:	c303      	stmia	r3!, {r0, r1}
 8000f4e:	7a12      	ldrb	r2, [r2, #8]
 8000f50:	701a      	strb	r2, [r3, #0]
 8000f52:	f104 0309 	add.w	r3, r4, #9
 8000f56:	225b      	movs	r2, #91	@ 0x5b
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 f8fd 	bl	800415a <memset>
       char MSG5[100]=  "E Type\n\r";
 8000f60:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8000f64:	f5a3 742f 	sub.w	r4, r3, #700	@ 0x2bc
 8000f68:	4ab2      	ldr	r2, [pc, #712]	@ (8001234 <main+0x3ac>)
 8000f6a:	4623      	mov	r3, r4
 8000f6c:	6810      	ldr	r0, [r2, #0]
 8000f6e:	6851      	ldr	r1, [r2, #4]
 8000f70:	c303      	stmia	r3!, {r0, r1}
 8000f72:	7a12      	ldrb	r2, [r2, #8]
 8000f74:	701a      	strb	r2, [r3, #0]
 8000f76:	f104 0309 	add.w	r3, r4, #9
 8000f7a:	225b      	movs	r2, #91	@ 0x5b
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f003 f8eb 	bl	800415a <memset>
       char MSG6[100]=  "J Type\n\r";
 8000f84:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8000f88:	f5a3 7448 	sub.w	r4, r3, #800	@ 0x320
 8000f8c:	4aaa      	ldr	r2, [pc, #680]	@ (8001238 <main+0x3b0>)
 8000f8e:	4623      	mov	r3, r4
 8000f90:	6810      	ldr	r0, [r2, #0]
 8000f92:	6851      	ldr	r1, [r2, #4]
 8000f94:	c303      	stmia	r3!, {r0, r1}
 8000f96:	7a12      	ldrb	r2, [r2, #8]
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	f104 0309 	add.w	r3, r4, #9
 8000f9e:	225b      	movs	r2, #91	@ 0x5b
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f003 f8d9 	bl	800415a <memset>
       char MSG7[100]=  "K Type\n\r";
 8000fa8:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8000fac:	f5a3 7461 	sub.w	r4, r3, #900	@ 0x384
 8000fb0:	4aa2      	ldr	r2, [pc, #648]	@ (800123c <main+0x3b4>)
 8000fb2:	4623      	mov	r3, r4
 8000fb4:	6810      	ldr	r0, [r2, #0]
 8000fb6:	6851      	ldr	r1, [r2, #4]
 8000fb8:	c303      	stmia	r3!, {r0, r1}
 8000fba:	7a12      	ldrb	r2, [r2, #8]
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	f104 0309 	add.w	r3, r4, #9
 8000fc2:	225b      	movs	r2, #91	@ 0x5b
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f003 f8c7 	bl	800415a <memset>
       char MSG8[100]=  "N Type\n\r";
 8000fcc:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8000fd0:	f5a3 747a 	sub.w	r4, r3, #1000	@ 0x3e8
 8000fd4:	4a9a      	ldr	r2, [pc, #616]	@ (8001240 <main+0x3b8>)
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	6810      	ldr	r0, [r2, #0]
 8000fda:	6851      	ldr	r1, [r2, #4]
 8000fdc:	c303      	stmia	r3!, {r0, r1}
 8000fde:	7a12      	ldrb	r2, [r2, #8]
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	f104 0309 	add.w	r3, r4, #9
 8000fe6:	225b      	movs	r2, #91	@ 0x5b
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f003 f8b5 	bl	800415a <memset>
       char MSG9[100]=  "R Type\n\r";
 8000ff0:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8000ff4:	f2a3 444c 	subw	r4, r3, #1100	@ 0x44c
 8000ff8:	4a92      	ldr	r2, [pc, #584]	@ (8001244 <main+0x3bc>)
 8000ffa:	4623      	mov	r3, r4
 8000ffc:	6810      	ldr	r0, [r2, #0]
 8000ffe:	6851      	ldr	r1, [r2, #4]
 8001000:	c303      	stmia	r3!, {r0, r1}
 8001002:	7a12      	ldrb	r2, [r2, #8]
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	f104 0309 	add.w	r3, r4, #9
 800100a:	225b      	movs	r2, #91	@ 0x5b
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f003 f8a3 	bl	800415a <memset>
       char MSG10[100]= "S Type\n\r";
 8001014:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8001018:	f5a3 6496 	sub.w	r4, r3, #1200	@ 0x4b0
 800101c:	4a8a      	ldr	r2, [pc, #552]	@ (8001248 <main+0x3c0>)
 800101e:	4623      	mov	r3, r4
 8001020:	6810      	ldr	r0, [r2, #0]
 8001022:	6851      	ldr	r1, [r2, #4]
 8001024:	c303      	stmia	r3!, {r0, r1}
 8001026:	7a12      	ldrb	r2, [r2, #8]
 8001028:	701a      	strb	r2, [r3, #0]
 800102a:	f104 0309 	add.w	r3, r4, #9
 800102e:	225b      	movs	r2, #91	@ 0x5b
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f003 f891 	bl	800415a <memset>
       char MSG11[100]= "T Type\n\r";
 8001038:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800103c:	f2a3 5414 	subw	r4, r3, #1300	@ 0x514
 8001040:	4a82      	ldr	r2, [pc, #520]	@ (800124c <main+0x3c4>)
 8001042:	4623      	mov	r3, r4
 8001044:	6810      	ldr	r0, [r2, #0]
 8001046:	6851      	ldr	r1, [r2, #4]
 8001048:	c303      	stmia	r3!, {r0, r1}
 800104a:	7a12      	ldrb	r2, [r2, #8]
 800104c:	701a      	strb	r2, [r3, #0]
 800104e:	f104 0309 	add.w	r3, r4, #9
 8001052:	225b      	movs	r2, #91	@ 0x5b
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f003 f87f 	bl	800415a <memset>
       char MSG12[100]= "Voltage x8 Gain mode\n\r";
 800105c:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8001060:	f5a3 66af 	sub.w	r6, r3, #1400	@ 0x578
 8001064:	4b7a      	ldr	r3, [pc, #488]	@ (8001250 <main+0x3c8>)
 8001066:	4634      	mov	r4, r6
 8001068:	461d      	mov	r5, r3
 800106a:	6828      	ldr	r0, [r5, #0]
 800106c:	6869      	ldr	r1, [r5, #4]
 800106e:	68aa      	ldr	r2, [r5, #8]
 8001070:	68eb      	ldr	r3, [r5, #12]
 8001072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001074:	6928      	ldr	r0, [r5, #16]
 8001076:	6020      	str	r0, [r4, #0]
 8001078:	8aab      	ldrh	r3, [r5, #20]
 800107a:	7daa      	ldrb	r2, [r5, #22]
 800107c:	80a3      	strh	r3, [r4, #4]
 800107e:	4613      	mov	r3, r2
 8001080:	71a3      	strb	r3, [r4, #6]
 8001082:	f106 0317 	add.w	r3, r6, #23
 8001086:	224d      	movs	r2, #77	@ 0x4d
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f003 f865 	bl	800415a <memset>
       char MSG13[100]= "Voltage x8 Gain mode\n\r";
 8001090:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8001094:	f2a3 56dc 	subw	r6, r3, #1500	@ 0x5dc
 8001098:	4b6d      	ldr	r3, [pc, #436]	@ (8001250 <main+0x3c8>)
 800109a:	4634      	mov	r4, r6
 800109c:	461d      	mov	r5, r3
 800109e:	6828      	ldr	r0, [r5, #0]
 80010a0:	6869      	ldr	r1, [r5, #4]
 80010a2:	68aa      	ldr	r2, [r5, #8]
 80010a4:	68eb      	ldr	r3, [r5, #12]
 80010a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a8:	6928      	ldr	r0, [r5, #16]
 80010aa:	6020      	str	r0, [r4, #0]
 80010ac:	8aab      	ldrh	r3, [r5, #20]
 80010ae:	7daa      	ldrb	r2, [r5, #22]
 80010b0:	80a3      	strh	r3, [r4, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	71a3      	strb	r3, [r4, #6]
 80010b6:	f106 0317 	add.w	r3, r6, #23
 80010ba:	224d      	movs	r2, #77	@ 0x4d
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f003 f84b 	bl	800415a <memset>
       char MSG14[100]= "Unknown\n\r";
 80010c4:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80010c8:	f5a3 64c8 	sub.w	r4, r3, #1600	@ 0x640
 80010cc:	4a61      	ldr	r2, [pc, #388]	@ (8001254 <main+0x3cc>)
 80010ce:	4623      	mov	r3, r4
 80010d0:	6810      	ldr	r0, [r2, #0]
 80010d2:	6851      	ldr	r1, [r2, #4]
 80010d4:	c303      	stmia	r3!, {r0, r1}
 80010d6:	8912      	ldrh	r2, [r2, #8]
 80010d8:	801a      	strh	r2, [r3, #0]
 80010da:	f104 030a 	add.w	r3, r4, #10
 80010de:	225a      	movs	r2, #90	@ 0x5a
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 f839 	bl	800415a <memset>
       char MSG15[100]= "Cold Junction Range Fault\n\r";
 80010e8:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80010ec:	f2a3 66a4 	subw	r6, r3, #1700	@ 0x6a4
 80010f0:	4b59      	ldr	r3, [pc, #356]	@ (8001258 <main+0x3d0>)
 80010f2:	4634      	mov	r4, r6
 80010f4:	461d      	mov	r5, r3
 80010f6:	6828      	ldr	r0, [r5, #0]
 80010f8:	6869      	ldr	r1, [r5, #4]
 80010fa:	68aa      	ldr	r2, [r5, #8]
 80010fc:	68eb      	ldr	r3, [r5, #12]
 80010fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001100:	6928      	ldr	r0, [r5, #16]
 8001102:	6969      	ldr	r1, [r5, #20]
 8001104:	69aa      	ldr	r2, [r5, #24]
 8001106:	c407      	stmia	r4!, {r0, r1, r2}
 8001108:	f106 031c 	add.w	r3, r6, #28
 800110c:	2248      	movs	r2, #72	@ 0x48
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f003 f822 	bl	800415a <memset>
       char MSG16[100]= "Thermocouple Range Fault\n\r";
 8001116:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800111a:	f5a3 66e1 	sub.w	r6, r3, #1800	@ 0x708
 800111e:	4b4f      	ldr	r3, [pc, #316]	@ (800125c <main+0x3d4>)
 8001120:	4634      	mov	r4, r6
 8001122:	461d      	mov	r5, r3
 8001124:	6828      	ldr	r0, [r5, #0]
 8001126:	6869      	ldr	r1, [r5, #4]
 8001128:	68aa      	ldr	r2, [r5, #8]
 800112a:	68eb      	ldr	r3, [r5, #12]
 800112c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112e:	6928      	ldr	r0, [r5, #16]
 8001130:	6969      	ldr	r1, [r5, #20]
 8001132:	c403      	stmia	r4!, {r0, r1}
 8001134:	8b2b      	ldrh	r3, [r5, #24]
 8001136:	7eaa      	ldrb	r2, [r5, #26]
 8001138:	8023      	strh	r3, [r4, #0]
 800113a:	4613      	mov	r3, r2
 800113c:	70a3      	strb	r3, [r4, #2]
 800113e:	f106 031b 	add.w	r3, r6, #27
 8001142:	2249      	movs	r2, #73	@ 0x49
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f003 f807 	bl	800415a <memset>
       char MSG17[100]= "Cold Junction High Fault\n\r";
 800114c:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8001150:	f2a3 766c 	subw	r6, r3, #1900	@ 0x76c
 8001154:	4b42      	ldr	r3, [pc, #264]	@ (8001260 <main+0x3d8>)
 8001156:	4634      	mov	r4, r6
 8001158:	461d      	mov	r5, r3
 800115a:	6828      	ldr	r0, [r5, #0]
 800115c:	6869      	ldr	r1, [r5, #4]
 800115e:	68aa      	ldr	r2, [r5, #8]
 8001160:	68eb      	ldr	r3, [r5, #12]
 8001162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001164:	6928      	ldr	r0, [r5, #16]
 8001166:	6969      	ldr	r1, [r5, #20]
 8001168:	c403      	stmia	r4!, {r0, r1}
 800116a:	8b2b      	ldrh	r3, [r5, #24]
 800116c:	7eaa      	ldrb	r2, [r5, #26]
 800116e:	8023      	strh	r3, [r4, #0]
 8001170:	4613      	mov	r3, r2
 8001172:	70a3      	strb	r3, [r4, #2]
 8001174:	f106 031b 	add.w	r3, r6, #27
 8001178:	2249      	movs	r2, #73	@ 0x49
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f002 ffec 	bl	800415a <memset>
       char MSG18[100]= "Cold Junction Low Fault\n\r";
 8001182:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8001186:	f5a3 66fa 	sub.w	r6, r3, #2000	@ 0x7d0
 800118a:	4b36      	ldr	r3, [pc, #216]	@ (8001264 <main+0x3dc>)
 800118c:	4634      	mov	r4, r6
 800118e:	461d      	mov	r5, r3
 8001190:	6828      	ldr	r0, [r5, #0]
 8001192:	6869      	ldr	r1, [r5, #4]
 8001194:	68aa      	ldr	r2, [r5, #8]
 8001196:	68eb      	ldr	r3, [r5, #12]
 8001198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119a:	6928      	ldr	r0, [r5, #16]
 800119c:	6969      	ldr	r1, [r5, #20]
 800119e:	c403      	stmia	r4!, {r0, r1}
 80011a0:	8b2b      	ldrh	r3, [r5, #24]
 80011a2:	8023      	strh	r3, [r4, #0]
 80011a4:	f106 031a 	add.w	r3, r6, #26
 80011a8:	224a      	movs	r2, #74	@ 0x4a
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 ffd4 	bl	800415a <memset>
       char MSG19[100]= "Thermocouple High Fault\n\r";
 80011b2:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80011b6:	f6a3 0634 	subw	r6, r3, #2100	@ 0x834
 80011ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001268 <main+0x3e0>)
 80011bc:	4634      	mov	r4, r6
 80011be:	461d      	mov	r5, r3
 80011c0:	6828      	ldr	r0, [r5, #0]
 80011c2:	6869      	ldr	r1, [r5, #4]
 80011c4:	68aa      	ldr	r2, [r5, #8]
 80011c6:	68eb      	ldr	r3, [r5, #12]
 80011c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ca:	6928      	ldr	r0, [r5, #16]
 80011cc:	6969      	ldr	r1, [r5, #20]
 80011ce:	c403      	stmia	r4!, {r0, r1}
 80011d0:	8b2b      	ldrh	r3, [r5, #24]
 80011d2:	8023      	strh	r3, [r4, #0]
 80011d4:	f106 031a 	add.w	r3, r6, #26
 80011d8:	224a      	movs	r2, #74	@ 0x4a
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 ffbc 	bl	800415a <memset>
       char MSG20[100]= "Thermocouple Low Fault\n\r";
 80011e2:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80011e6:	f6a3 0698 	subw	r6, r3, #2200	@ 0x898
 80011ea:	4b20      	ldr	r3, [pc, #128]	@ (800126c <main+0x3e4>)
 80011ec:	4634      	mov	r4, r6
 80011ee:	461d      	mov	r5, r3
 80011f0:	6828      	ldr	r0, [r5, #0]
 80011f2:	6869      	ldr	r1, [r5, #4]
 80011f4:	68aa      	ldr	r2, [r5, #8]
 80011f6:	68eb      	ldr	r3, [r5, #12]
 80011f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011fa:	6928      	ldr	r0, [r5, #16]
 80011fc:	6969      	ldr	r1, [r5, #20]
 80011fe:	c403      	stmia	r4!, {r0, r1}
 8001200:	7e2b      	ldrb	r3, [r5, #24]
 8001202:	7023      	strb	r3, [r4, #0]
 8001204:	f106 0319 	add.w	r3, r6, #25
 8001208:	224b      	movs	r2, #75	@ 0x4b
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f002 ffa4 	bl	800415a <memset>
       char MSG21[100]= "Over/Under Voltage Fault\n\r";
 8001212:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8001216:	f6a3 06fc 	subw	r6, r3, #2300	@ 0x8fc
 800121a:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <main+0x3e8>)
 800121c:	4634      	mov	r4, r6
 800121e:	461d      	mov	r5, r3
 8001220:	e028      	b.n	8001274 <main+0x3ec>
 8001222:	bf00      	nop
 8001224:	080063a4 	.word	0x080063a4
 8001228:	080063c8 	.word	0x080063c8
 800122c:	080063f8 	.word	0x080063f8
 8001230:	0800640c 	.word	0x0800640c
 8001234:	08006418 	.word	0x08006418
 8001238:	08006424 	.word	0x08006424
 800123c:	08006430 	.word	0x08006430
 8001240:	0800643c 	.word	0x0800643c
 8001244:	08006448 	.word	0x08006448
 8001248:	08006454 	.word	0x08006454
 800124c:	08006460 	.word	0x08006460
 8001250:	0800646c 	.word	0x0800646c
 8001254:	08006484 	.word	0x08006484
 8001258:	08006490 	.word	0x08006490
 800125c:	080064ac 	.word	0x080064ac
 8001260:	080064c8 	.word	0x080064c8
 8001264:	080064e4 	.word	0x080064e4
 8001268:	08006500 	.word	0x08006500
 800126c:	0800651c 	.word	0x0800651c
 8001270:	08006538 	.word	0x08006538
 8001274:	6828      	ldr	r0, [r5, #0]
 8001276:	6869      	ldr	r1, [r5, #4]
 8001278:	68aa      	ldr	r2, [r5, #8]
 800127a:	68eb      	ldr	r3, [r5, #12]
 800127c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800127e:	6928      	ldr	r0, [r5, #16]
 8001280:	6969      	ldr	r1, [r5, #20]
 8001282:	c403      	stmia	r4!, {r0, r1}
 8001284:	8b2b      	ldrh	r3, [r5, #24]
 8001286:	7eaa      	ldrb	r2, [r5, #26]
 8001288:	8023      	strh	r3, [r4, #0]
 800128a:	4613      	mov	r3, r2
 800128c:	70a3      	strb	r3, [r4, #2]
 800128e:	f106 031b 	add.w	r3, r6, #27
 8001292:	2249      	movs	r2, #73	@ 0x49
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f002 ff5f 	bl	800415a <memset>
       char MSG22[100]= "hermocouple Open Faultn\r";
 800129c:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80012a0:	f5a3 6616 	sub.w	r6, r3, #2400	@ 0x960
 80012a4:	4b52      	ldr	r3, [pc, #328]	@ (80013f0 <main+0x568>)
 80012a6:	4634      	mov	r4, r6
 80012a8:	461d      	mov	r5, r3
 80012aa:	6828      	ldr	r0, [r5, #0]
 80012ac:	6869      	ldr	r1, [r5, #4]
 80012ae:	68aa      	ldr	r2, [r5, #8]
 80012b0:	68eb      	ldr	r3, [r5, #12]
 80012b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b4:	6928      	ldr	r0, [r5, #16]
 80012b6:	6969      	ldr	r1, [r5, #20]
 80012b8:	c403      	stmia	r4!, {r0, r1}
 80012ba:	7e2b      	ldrb	r3, [r5, #24]
 80012bc:	7023      	strb	r3, [r4, #0]
 80012be:	f106 0319 	add.w	r3, r6, #25
 80012c2:	224b      	movs	r2, #75	@ 0x4b
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f002 ff47 	bl	800415a <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012cc:	f000 fb5e 	bl	800198c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d0:	f000 f8a2 	bl	8001418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d4:	f000 f940 	bl	8001558 <MX_GPIO_Init>
  MX_SPI1_Init();
 80012d8:	f000 f8de 	bl	8001498 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80012dc:	f000 f912 	bl	8001504 <MX_USART1_UART_Init>
  /*if(HAL_SPI_Init(&hspi1) != HAL_OK){
  	while (1) HAL_Delay(10);
  }*/

  //erores de inicialización para cada sensor
  if (!MAX31856_Init(&mySensor1, &hspi1, SENSOR1_CS_PORT, SENSOR1_CS_PIN)) {
 80012e0:	2310      	movs	r3, #16
 80012e2:	4a44      	ldr	r2, [pc, #272]	@ (80013f4 <main+0x56c>)
 80012e4:	4944      	ldr	r1, [pc, #272]	@ (80013f8 <main+0x570>)
 80012e6:	4845      	ldr	r0, [pc, #276]	@ (80013fc <main+0x574>)
 80012e8:	f7ff fc1e 	bl	8000b28 <MAX31856_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f083 0301 	eor.w	r3, r3, #1
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d006      	beq.n	8001306 <main+0x47e>
	  HAL_UART_Transmit(&huart1,(uint8_t*)MSG1,sizeof(MSG1), 100);
 80012f8:	f607 1164 	addw	r1, r7, #2404	@ 0x964
 80012fc:	2364      	movs	r3, #100	@ 0x64
 80012fe:	2264      	movs	r2, #100	@ 0x64
 8001300:	483f      	ldr	r0, [pc, #252]	@ (8001400 <main+0x578>)
 8001302:	f002 f829 	bl	8003358 <HAL_UART_Transmit>
    }
    if (!MAX31856_Init(&mySensor2, &hspi1, SENSOR2_CS_PORT, SENSOR2_CS_PIN)) {
 8001306:	2301      	movs	r3, #1
 8001308:	4a3a      	ldr	r2, [pc, #232]	@ (80013f4 <main+0x56c>)
 800130a:	493b      	ldr	r1, [pc, #236]	@ (80013f8 <main+0x570>)
 800130c:	483d      	ldr	r0, [pc, #244]	@ (8001404 <main+0x57c>)
 800130e:	f7ff fc0b 	bl	8000b28 <MAX31856_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	f083 0301 	eor.w	r3, r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00a      	beq.n	8001334 <main+0x4ac>
    	HAL_UART_Transmit(&huart1,(uint8_t*)MSG1,sizeof(MSG1), 100);
 800131e:	f607 1164 	addw	r1, r7, #2404	@ 0x964
 8001322:	2364      	movs	r3, #100	@ 0x64
 8001324:	2264      	movs	r2, #100	@ 0x64
 8001326:	4836      	ldr	r0, [pc, #216]	@ (8001400 <main+0x578>)
 8001328:	f002 f816 	bl	8003358 <HAL_UART_Transmit>
    	while (1) HAL_Delay(10);
 800132c:	200a      	movs	r0, #10
 800132e:	f000 fb8f 	bl	8001a50 <HAL_Delay>
 8001332:	e7fb      	b.n	800132c <main+0x4a4>
    }
    if (!MAX31856_Init(&mySensor3, &hspi1, SENSOR3_CS_PORT, SENSOR3_CS_PIN)) {
 8001334:	2302      	movs	r3, #2
 8001336:	4a2f      	ldr	r2, [pc, #188]	@ (80013f4 <main+0x56c>)
 8001338:	492f      	ldr	r1, [pc, #188]	@ (80013f8 <main+0x570>)
 800133a:	4833      	ldr	r0, [pc, #204]	@ (8001408 <main+0x580>)
 800133c:	f7ff fbf4 	bl	8000b28 <MAX31856_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	f083 0301 	eor.w	r3, r3, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00a      	beq.n	8001362 <main+0x4da>
    	HAL_UART_Transmit(&huart1,(uint8_t*)MSG1,sizeof(MSG1), 100);
 800134c:	f607 1164 	addw	r1, r7, #2404	@ 0x964
 8001350:	2364      	movs	r3, #100	@ 0x64
 8001352:	2264      	movs	r2, #100	@ 0x64
 8001354:	482a      	ldr	r0, [pc, #168]	@ (8001400 <main+0x578>)
 8001356:	f001 ffff 	bl	8003358 <HAL_UART_Transmit>
    	while (1) HAL_Delay(10);
 800135a:	200a      	movs	r0, #10
 800135c:	f000 fb78 	bl	8001a50 <HAL_Delay>
 8001360:	e7fb      	b.n	800135a <main+0x4d2>
    }

  HAL_Delay(2000);
 8001362:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001366:	f000 fb73 	bl	8001a50 <HAL_Delay>

    /* USER CODE BEGIN 3 */

	//se envía a la UART los valores de la temperatura
	  sprintf(MSG_temp1,"Thermocouple 1 Temp: %.2f degrees Celsius\n\r",
			  MAX31856_ReadThermocoupleTemperature(&mySensor1));
 800136a:	4824      	ldr	r0, [pc, #144]	@ (80013fc <main+0x574>)
 800136c:	f7ff fd40 	bl	8000df0 <MAX31856_ReadThermocoupleTemperature>
 8001370:	4603      	mov	r3, r0
	  sprintf(MSG_temp1,"Thermocouple 1 Temp: %.2f degrees Celsius\n\r",
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f858 	bl	8000428 <__aeabi_f2d>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8001380:	4922      	ldr	r1, [pc, #136]	@ (800140c <main+0x584>)
 8001382:	f002 fe85 	bl	8004090 <siprintf>
	  sprintf(MSG_temp2,"Thermocouple 2 Temp: %.2f degrees Celsius\n\r",
	  			  MAX31856_ReadThermocoupleTemperature(&mySensor2));
 8001386:	481f      	ldr	r0, [pc, #124]	@ (8001404 <main+0x57c>)
 8001388:	f7ff fd32 	bl	8000df0 <MAX31856_ReadThermocoupleTemperature>
 800138c:	4603      	mov	r3, r0
	  sprintf(MSG_temp2,"Thermocouple 2 Temp: %.2f degrees Celsius\n\r",
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f84a 	bl	8000428 <__aeabi_f2d>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800139c:	491c      	ldr	r1, [pc, #112]	@ (8001410 <main+0x588>)
 800139e:	f002 fe77 	bl	8004090 <siprintf>
	  sprintf(MSG_temp3,"Thermocouple 3 Temp: %.2f degrees Celsius\n\r",
	  	  			  MAX31856_ReadThermocoupleTemperature(&mySensor3));
 80013a2:	4819      	ldr	r0, [pc, #100]	@ (8001408 <main+0x580>)
 80013a4:	f7ff fd24 	bl	8000df0 <MAX31856_ReadThermocoupleTemperature>
 80013a8:	4603      	mov	r3, r0
	  sprintf(MSG_temp3,"Thermocouple 3 Temp: %.2f degrees Celsius\n\r",
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f83c 	bl	8000428 <__aeabi_f2d>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	1d38      	adds	r0, r7, #4
 80013b6:	4917      	ldr	r1, [pc, #92]	@ (8001414 <main+0x58c>)
 80013b8:	f002 fe6a 	bl	8004090 <siprintf>
    HAL_UART_Transmit(&huart1,(uint8_t *) MSG_temp1, sizeof(MSG_temp1), 100);
 80013bc:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 80013c0:	2364      	movs	r3, #100	@ 0x64
 80013c2:	2264      	movs	r2, #100	@ 0x64
 80013c4:	480e      	ldr	r0, [pc, #56]	@ (8001400 <main+0x578>)
 80013c6:	f001 ffc7 	bl	8003358 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1,(uint8_t *) MSG_temp2, sizeof(MSG_temp2), 100);
 80013ca:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80013ce:	2364      	movs	r3, #100	@ 0x64
 80013d0:	2264      	movs	r2, #100	@ 0x64
 80013d2:	480b      	ldr	r0, [pc, #44]	@ (8001400 <main+0x578>)
 80013d4:	f001 ffc0 	bl	8003358 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1,(uint8_t *) MSG_temp3, sizeof(MSG_temp3), 100);
 80013d8:	1d39      	adds	r1, r7, #4
 80013da:	2364      	movs	r3, #100	@ 0x64
 80013dc:	2264      	movs	r2, #100	@ 0x64
 80013de:	4808      	ldr	r0, [pc, #32]	@ (8001400 <main+0x578>)
 80013e0:	f001 ffba 	bl	8003358 <HAL_UART_Transmit>
    HAL_Delay(200);
 80013e4:	20c8      	movs	r0, #200	@ 0xc8
 80013e6:	f000 fb33 	bl	8001a50 <HAL_Delay>
	  sprintf(MSG_temp1,"Thermocouple 1 Temp: %.2f degrees Celsius\n\r",
 80013ea:	bf00      	nop
 80013ec:	e7bd      	b.n	800136a <main+0x4e2>
 80013ee:	bf00      	nop
 80013f0:	08006554 	.word	0x08006554
 80013f4:	40010800 	.word	0x40010800
 80013f8:	200001f0 	.word	0x200001f0
 80013fc:	20000290 	.word	0x20000290
 8001400:	20000248 	.word	0x20000248
 8001404:	2000029c 	.word	0x2000029c
 8001408:	200002a8 	.word	0x200002a8
 800140c:	08006320 	.word	0x08006320
 8001410:	0800634c 	.word	0x0800634c
 8001414:	08006378 	.word	0x08006378

08001418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b090      	sub	sp, #64	@ 0x40
 800141c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141e:	f107 0318 	add.w	r3, r7, #24
 8001422:	2228      	movs	r2, #40	@ 0x28
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f002 fe97 	bl	800415a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800143a:	2302      	movs	r3, #2
 800143c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800143e:	2301      	movs	r3, #1
 8001440:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001442:	2310      	movs	r3, #16
 8001444:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001446:	2302      	movs	r3, #2
 8001448:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800144a:	2300      	movs	r3, #0
 800144c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800144e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001452:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001454:	f107 0318 	add.w	r3, r7, #24
 8001458:	4618      	mov	r0, r3
 800145a:	f000 fd95 	bl	8001f88 <HAL_RCC_OscConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001464:	f000 f8aa 	bl	80015bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001468:	230f      	movs	r3, #15
 800146a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146c:	2302      	movs	r3, #2
 800146e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f001 f803 	bl	800248c <HAL_RCC_ClockConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800148c:	f000 f896 	bl	80015bc <Error_Handler>
  }
}
 8001490:	bf00      	nop
 8001492:	3740      	adds	r7, #64	@ 0x40
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800149c:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <MX_SPI1_Init+0x64>)
 800149e:	4a18      	ldr	r2, [pc, #96]	@ (8001500 <MX_SPI1_Init+0x68>)
 80014a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014a2:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <MX_SPI1_Init+0x64>)
 80014a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014aa:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <MX_SPI1_Init+0x64>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <MX_SPI1_Init+0x64>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014b6:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <MX_SPI1_Init+0x64>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <MX_SPI1_Init+0x64>)
 80014be:	2201      	movs	r2, #1
 80014c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <MX_SPI1_Init+0x64>)
 80014c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014ca:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <MX_SPI1_Init+0x64>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d0:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <MX_SPI1_Init+0x64>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <MX_SPI1_Init+0x64>)
 80014d8:	2200      	movs	r2, #0
 80014da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014dc:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <MX_SPI1_Init+0x64>)
 80014de:	2200      	movs	r2, #0
 80014e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <MX_SPI1_Init+0x64>)
 80014e4:	220a      	movs	r2, #10
 80014e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014e8:	4804      	ldr	r0, [pc, #16]	@ (80014fc <MX_SPI1_Init+0x64>)
 80014ea:	f001 f95d 	bl	80027a8 <HAL_SPI_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014f4:	f000 f862 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200001f0 	.word	0x200001f0
 8001500:	40013000 	.word	0x40013000

08001504 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001508:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <MX_USART1_UART_Init+0x4c>)
 800150a:	4a12      	ldr	r2, [pc, #72]	@ (8001554 <MX_USART1_UART_Init+0x50>)
 800150c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800150e:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <MX_USART1_UART_Init+0x4c>)
 8001510:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001514:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001516:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <MX_USART1_UART_Init+0x4c>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <MX_USART1_UART_Init+0x4c>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001522:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <MX_USART1_UART_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001528:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <MX_USART1_UART_Init+0x4c>)
 800152a:	220c      	movs	r2, #12
 800152c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152e:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <MX_USART1_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <MX_USART1_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800153a:	4805      	ldr	r0, [pc, #20]	@ (8001550 <MX_USART1_UART_Init+0x4c>)
 800153c:	f001 febc 	bl	80032b8 <HAL_UART_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001546:	f000 f839 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000248 	.word	0x20000248
 8001554:	40013800 	.word	0x40013800

08001558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <MX_GPIO_Init+0x5c>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a10      	ldr	r2, [pc, #64]	@ (80015b4 <MX_GPIO_Init+0x5c>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <MX_GPIO_Init+0x5c>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS2_Pin|SPI_CS3_Pin|MAX_FAULT_Pin|SPI1_CS_Pin, GPIO_PIN_SET);
 8001584:	2201      	movs	r2, #1
 8001586:	211b      	movs	r1, #27
 8001588:	480b      	ldr	r0, [pc, #44]	@ (80015b8 <MX_GPIO_Init+0x60>)
 800158a:	f000 fce5 	bl	8001f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CS2_Pin SPI_CS3_Pin MAX_FAULT_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS2_Pin|SPI_CS3_Pin|MAX_FAULT_Pin|SPI1_CS_Pin;
 800158e:	231b      	movs	r3, #27
 8001590:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2302      	movs	r3, #2
 800159c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	4619      	mov	r1, r3
 80015a4:	4804      	ldr	r0, [pc, #16]	@ (80015b8 <MX_GPIO_Init+0x60>)
 80015a6:	f000 fb5b 	bl	8001c60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40010800 	.word	0x40010800

080015bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
}
 80015c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <Error_Handler+0x8>

080015c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <HAL_MspInit+0x5c>)
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	4a14      	ldr	r2, [pc, #80]	@ (8001624 <HAL_MspInit+0x5c>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6193      	str	r3, [r2, #24]
 80015da:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <HAL_MspInit+0x5c>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <HAL_MspInit+0x5c>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001624 <HAL_MspInit+0x5c>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f0:	61d3      	str	r3, [r2, #28]
 80015f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <HAL_MspInit+0x5c>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80015fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <HAL_MspInit+0x60>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	4a04      	ldr	r2, [pc, #16]	@ (8001628 <HAL_MspInit+0x60>)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	40021000 	.word	0x40021000
 8001628:	40010000 	.word	0x40010000

0800162c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a1b      	ldr	r2, [pc, #108]	@ (80016b4 <HAL_SPI_MspInit+0x88>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d12f      	bne.n	80016ac <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800164c:	4b1a      	ldr	r3, [pc, #104]	@ (80016b8 <HAL_SPI_MspInit+0x8c>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a19      	ldr	r2, [pc, #100]	@ (80016b8 <HAL_SPI_MspInit+0x8c>)
 8001652:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b17      	ldr	r3, [pc, #92]	@ (80016b8 <HAL_SPI_MspInit+0x8c>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <HAL_SPI_MspInit+0x8c>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	4a13      	ldr	r2, [pc, #76]	@ (80016b8 <HAL_SPI_MspInit+0x8c>)
 800166a:	f043 0304 	orr.w	r3, r3, #4
 800166e:	6193      	str	r3, [r2, #24]
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <HAL_SPI_MspInit+0x8c>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800167c:	23a0      	movs	r3, #160	@ 0xa0
 800167e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	4619      	mov	r1, r3
 800168e:	480b      	ldr	r0, [pc, #44]	@ (80016bc <HAL_SPI_MspInit+0x90>)
 8001690:	f000 fae6 	bl	8001c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001694:	2340      	movs	r3, #64	@ 0x40
 8001696:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a0:	f107 0310 	add.w	r3, r7, #16
 80016a4:	4619      	mov	r1, r3
 80016a6:	4805      	ldr	r0, [pc, #20]	@ (80016bc <HAL_SPI_MspInit+0x90>)
 80016a8:	f000 fada 	bl	8001c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016ac:	bf00      	nop
 80016ae:	3720      	adds	r7, #32
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40013000 	.word	0x40013000
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40010800 	.word	0x40010800

080016c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 0310 	add.w	r3, r7, #16
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a1c      	ldr	r2, [pc, #112]	@ (800174c <HAL_UART_MspInit+0x8c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d131      	bne.n	8001744 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <HAL_UART_MspInit+0x90>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001750 <HAL_UART_MspInit+0x90>)
 80016e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <HAL_UART_MspInit+0x90>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f8:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <HAL_UART_MspInit+0x90>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	4a14      	ldr	r2, [pc, #80]	@ (8001750 <HAL_UART_MspInit+0x90>)
 80016fe:	f043 0304 	orr.w	r3, r3, #4
 8001702:	6193      	str	r3, [r2, #24]
 8001704:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <HAL_UART_MspInit+0x90>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001710:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001714:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800171a:	2303      	movs	r3, #3
 800171c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171e:	f107 0310 	add.w	r3, r7, #16
 8001722:	4619      	mov	r1, r3
 8001724:	480b      	ldr	r0, [pc, #44]	@ (8001754 <HAL_UART_MspInit+0x94>)
 8001726:	f000 fa9b 	bl	8001c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800172a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800172e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	4619      	mov	r1, r3
 800173e:	4805      	ldr	r0, [pc, #20]	@ (8001754 <HAL_UART_MspInit+0x94>)
 8001740:	f000 fa8e 	bl	8001c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001744:	bf00      	nop
 8001746:	3720      	adds	r7, #32
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40013800 	.word	0x40013800
 8001750:	40021000 	.word	0x40021000
 8001754:	40010800 	.word	0x40010800

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <NMI_Handler+0x4>

08001760 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <HardFault_Handler+0x4>

08001768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <MemManage_Handler+0x4>

08001770 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <UsageFault_Handler+0x4>

08001780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a8:	f000 f936 	bl	8001a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return 1;
 80017b4:	2301      	movs	r3, #1
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <_kill>:

int _kill(int pid, int sig)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017c8:	f002 fd1a 	bl	8004200 <__errno>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2216      	movs	r2, #22
 80017d0:	601a      	str	r2, [r3, #0]
  return -1;
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <_exit>:

void _exit (int status)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017e6:	f04f 31ff 	mov.w	r1, #4294967295
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ffe7 	bl	80017be <_kill>
  while (1) {}    /* Make sure we hang here */
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <_exit+0x12>

080017f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	e00a      	b.n	800181c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001806:	f3af 8000 	nop.w
 800180a:	4601      	mov	r1, r0
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	60ba      	str	r2, [r7, #8]
 8001812:	b2ca      	uxtb	r2, r1
 8001814:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3301      	adds	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	dbf0      	blt.n	8001806 <_read+0x12>
  }

  return len;
 8001824:	687b      	ldr	r3, [r7, #4]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	e009      	b.n	8001854 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	60ba      	str	r2, [r7, #8]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	429a      	cmp	r2, r3
 800185a:	dbf1      	blt.n	8001840 <_write+0x12>
  }
  return len;
 800185c:	687b      	ldr	r3, [r7, #4]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <_close>:

int _close(int file)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800188c:	605a      	str	r2, [r3, #4]
  return 0;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <_isatty>:

int _isatty(int file)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b085      	sub	sp, #20
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
	...

080018c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d0:	4a14      	ldr	r2, [pc, #80]	@ (8001924 <_sbrk+0x5c>)
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <_sbrk+0x60>)
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018dc:	4b13      	ldr	r3, [pc, #76]	@ (800192c <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e4:	4b11      	ldr	r3, [pc, #68]	@ (800192c <_sbrk+0x64>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	@ (8001930 <_sbrk+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ea:	4b10      	ldr	r3, [pc, #64]	@ (800192c <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d207      	bcs.n	8001908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f8:	f002 fc82 	bl	8004200 <__errno>
 80018fc:	4603      	mov	r3, r0
 80018fe:	220c      	movs	r2, #12
 8001900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	e009      	b.n	800191c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001908:	4b08      	ldr	r3, [pc, #32]	@ (800192c <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190e:	4b07      	ldr	r3, [pc, #28]	@ (800192c <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	4a05      	ldr	r2, [pc, #20]	@ (800192c <_sbrk+0x64>)
 8001918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20002800 	.word	0x20002800
 8001928:	00000400 	.word	0x00000400
 800192c:	200002b4 	.word	0x200002b4
 8001930:	20000408 	.word	0x20000408

08001934 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001940:	f7ff fff8 	bl	8001934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001944:	480b      	ldr	r0, [pc, #44]	@ (8001974 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001946:	490c      	ldr	r1, [pc, #48]	@ (8001978 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001948:	4a0c      	ldr	r2, [pc, #48]	@ (800197c <LoopFillZerobss+0x16>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800194c:	e002      	b.n	8001954 <LoopCopyDataInit>

0800194e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001952:	3304      	adds	r3, #4

08001954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001958:	d3f9      	bcc.n	800194e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195a:	4a09      	ldr	r2, [pc, #36]	@ (8001980 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800195c:	4c09      	ldr	r4, [pc, #36]	@ (8001984 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001960:	e001      	b.n	8001966 <LoopFillZerobss>

08001962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001964:	3204      	adds	r2, #4

08001966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001968:	d3fb      	bcc.n	8001962 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800196a:	f002 fc4f 	bl	800420c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800196e:	f7ff fa8b 	bl	8000e88 <main>
  bx lr
 8001972:	4770      	bx	lr
  ldr r0, =_sdata
 8001974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001978:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800197c:	0800691c 	.word	0x0800691c
  ldr r2, =_sbss
 8001980:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001984:	20000408 	.word	0x20000408

08001988 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001988:	e7fe      	b.n	8001988 <ADC1_2_IRQHandler>
	...

0800198c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001990:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <HAL_Init+0x28>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a07      	ldr	r2, [pc, #28]	@ (80019b4 <HAL_Init+0x28>)
 8001996:	f043 0310 	orr.w	r3, r3, #16
 800199a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199c:	2003      	movs	r0, #3
 800199e:	f000 f92b 	bl	8001bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a2:	200f      	movs	r0, #15
 80019a4:	f000 f808 	bl	80019b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a8:	f7ff fe0e 	bl	80015c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40022000 	.word	0x40022000

080019b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c0:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <HAL_InitTick+0x54>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <HAL_InitTick+0x58>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4619      	mov	r1, r3
 80019ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f935 	bl	8001c46 <HAL_SYSTICK_Config>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00e      	b.n	8001a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b0f      	cmp	r3, #15
 80019ea:	d80a      	bhi.n	8001a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ec:	2200      	movs	r2, #0
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f000 f90b 	bl	8001c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f8:	4a06      	ldr	r2, [pc, #24]	@ (8001a14 <HAL_InitTick+0x5c>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e000      	b.n	8001a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000008 	.word	0x20000008
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a1c:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <HAL_IncTick+0x1c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <HAL_IncTick+0x20>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	4a03      	ldr	r2, [pc, #12]	@ (8001a38 <HAL_IncTick+0x20>)
 8001a2a:	6013      	str	r3, [r2, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	20000008 	.word	0x20000008
 8001a38:	200002b8 	.word	0x200002b8

08001a3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a40:	4b02      	ldr	r3, [pc, #8]	@ (8001a4c <HAL_GetTick+0x10>)
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	200002b8 	.word	0x200002b8

08001a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a58:	f7ff fff0 	bl	8001a3c <HAL_GetTick>
 8001a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a68:	d005      	beq.n	8001a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <HAL_Delay+0x44>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4413      	add	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a76:	bf00      	nop
 8001a78:	f7ff ffe0 	bl	8001a3c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d8f7      	bhi.n	8001a78 <HAL_Delay+0x28>
  {
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000008 	.word	0x20000008

08001a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aca:	4a04      	ldr	r2, [pc, #16]	@ (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	60d3      	str	r3, [r2, #12]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae4:	4b04      	ldr	r3, [pc, #16]	@ (8001af8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	f003 0307 	and.w	r3, r3, #7
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	db0a      	blt.n	8001b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	490c      	ldr	r1, [pc, #48]	@ (8001b48 <__NVIC_SetPriority+0x4c>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	0112      	lsls	r2, r2, #4
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b24:	e00a      	b.n	8001b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4908      	ldr	r1, [pc, #32]	@ (8001b4c <__NVIC_SetPriority+0x50>)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	3b04      	subs	r3, #4
 8001b34:	0112      	lsls	r2, r2, #4
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	440b      	add	r3, r1
 8001b3a:	761a      	strb	r2, [r3, #24]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000e100 	.word	0xe000e100
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	@ 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f1c3 0307 	rsb	r3, r3, #7
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	bf28      	it	cs
 8001b6e:	2304      	movcs	r3, #4
 8001b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3304      	adds	r3, #4
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d902      	bls.n	8001b80 <NVIC_EncodePriority+0x30>
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3b03      	subs	r3, #3
 8001b7e:	e000      	b.n	8001b82 <NVIC_EncodePriority+0x32>
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	401a      	ands	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	43d9      	mvns	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	4313      	orrs	r3, r2
         );
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3724      	adds	r7, #36	@ 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bc4:	d301      	bcc.n	8001bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00f      	b.n	8001bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bca:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf4 <SysTick_Config+0x40>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f7ff ff90 	bl	8001afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bdc:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <SysTick_Config+0x40>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be2:	4b04      	ldr	r3, [pc, #16]	@ (8001bf4 <SysTick_Config+0x40>)
 8001be4:	2207      	movs	r2, #7
 8001be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	e000e010 	.word	0xe000e010

08001bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff49 	bl	8001a98 <__NVIC_SetPriorityGrouping>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c20:	f7ff ff5e 	bl	8001ae0 <__NVIC_GetPriorityGrouping>
 8001c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	6978      	ldr	r0, [r7, #20]
 8001c2c:	f7ff ff90 	bl	8001b50 <NVIC_EncodePriority>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff5f 	bl	8001afc <__NVIC_SetPriority>
}
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ffb0 	bl	8001bb4 <SysTick_Config>
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b08b      	sub	sp, #44	@ 0x2c
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c72:	e161      	b.n	8001f38 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c74:	2201      	movs	r2, #1
 8001c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	f040 8150 	bne.w	8001f32 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4a97      	ldr	r2, [pc, #604]	@ (8001ef4 <HAL_GPIO_Init+0x294>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d05e      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001c9c:	4a95      	ldr	r2, [pc, #596]	@ (8001ef4 <HAL_GPIO_Init+0x294>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d875      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001ca2:	4a95      	ldr	r2, [pc, #596]	@ (8001ef8 <HAL_GPIO_Init+0x298>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d058      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001ca8:	4a93      	ldr	r2, [pc, #588]	@ (8001ef8 <HAL_GPIO_Init+0x298>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d86f      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cae:	4a93      	ldr	r2, [pc, #588]	@ (8001efc <HAL_GPIO_Init+0x29c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d052      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001cb4:	4a91      	ldr	r2, [pc, #580]	@ (8001efc <HAL_GPIO_Init+0x29c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d869      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cba:	4a91      	ldr	r2, [pc, #580]	@ (8001f00 <HAL_GPIO_Init+0x2a0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d04c      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001cc0:	4a8f      	ldr	r2, [pc, #572]	@ (8001f00 <HAL_GPIO_Init+0x2a0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d863      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cc6:	4a8f      	ldr	r2, [pc, #572]	@ (8001f04 <HAL_GPIO_Init+0x2a4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d046      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
 8001ccc:	4a8d      	ldr	r2, [pc, #564]	@ (8001f04 <HAL_GPIO_Init+0x2a4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d85d      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cd2:	2b12      	cmp	r3, #18
 8001cd4:	d82a      	bhi.n	8001d2c <HAL_GPIO_Init+0xcc>
 8001cd6:	2b12      	cmp	r3, #18
 8001cd8:	d859      	bhi.n	8001d8e <HAL_GPIO_Init+0x12e>
 8001cda:	a201      	add	r2, pc, #4	@ (adr r2, 8001ce0 <HAL_GPIO_Init+0x80>)
 8001cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce0:	08001d5b 	.word	0x08001d5b
 8001ce4:	08001d35 	.word	0x08001d35
 8001ce8:	08001d47 	.word	0x08001d47
 8001cec:	08001d89 	.word	0x08001d89
 8001cf0:	08001d8f 	.word	0x08001d8f
 8001cf4:	08001d8f 	.word	0x08001d8f
 8001cf8:	08001d8f 	.word	0x08001d8f
 8001cfc:	08001d8f 	.word	0x08001d8f
 8001d00:	08001d8f 	.word	0x08001d8f
 8001d04:	08001d8f 	.word	0x08001d8f
 8001d08:	08001d8f 	.word	0x08001d8f
 8001d0c:	08001d8f 	.word	0x08001d8f
 8001d10:	08001d8f 	.word	0x08001d8f
 8001d14:	08001d8f 	.word	0x08001d8f
 8001d18:	08001d8f 	.word	0x08001d8f
 8001d1c:	08001d8f 	.word	0x08001d8f
 8001d20:	08001d8f 	.word	0x08001d8f
 8001d24:	08001d3d 	.word	0x08001d3d
 8001d28:	08001d51 	.word	0x08001d51
 8001d2c:	4a76      	ldr	r2, [pc, #472]	@ (8001f08 <HAL_GPIO_Init+0x2a8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d32:	e02c      	b.n	8001d8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	623b      	str	r3, [r7, #32]
          break;
 8001d3a:	e029      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	3304      	adds	r3, #4
 8001d42:	623b      	str	r3, [r7, #32]
          break;
 8001d44:	e024      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	3308      	adds	r3, #8
 8001d4c:	623b      	str	r3, [r7, #32]
          break;
 8001d4e:	e01f      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	330c      	adds	r3, #12
 8001d56:	623b      	str	r3, [r7, #32]
          break;
 8001d58:	e01a      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d102      	bne.n	8001d68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d62:	2304      	movs	r3, #4
 8001d64:	623b      	str	r3, [r7, #32]
          break;
 8001d66:	e013      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d105      	bne.n	8001d7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d70:	2308      	movs	r3, #8
 8001d72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	611a      	str	r2, [r3, #16]
          break;
 8001d7a:	e009      	b.n	8001d90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d7c:	2308      	movs	r3, #8
 8001d7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	615a      	str	r2, [r3, #20]
          break;
 8001d86:	e003      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	623b      	str	r3, [r7, #32]
          break;
 8001d8c:	e000      	b.n	8001d90 <HAL_GPIO_Init+0x130>
          break;
 8001d8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2bff      	cmp	r3, #255	@ 0xff
 8001d94:	d801      	bhi.n	8001d9a <HAL_GPIO_Init+0x13a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	e001      	b.n	8001d9e <HAL_GPIO_Init+0x13e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	2bff      	cmp	r3, #255	@ 0xff
 8001da4:	d802      	bhi.n	8001dac <HAL_GPIO_Init+0x14c>
 8001da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	e002      	b.n	8001db2 <HAL_GPIO_Init+0x152>
 8001dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dae:	3b08      	subs	r3, #8
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	210f      	movs	r1, #15
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	6a39      	ldr	r1, [r7, #32]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80a9 	beq.w	8001f32 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001de0:	4b4a      	ldr	r3, [pc, #296]	@ (8001f0c <HAL_GPIO_Init+0x2ac>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4a49      	ldr	r2, [pc, #292]	@ (8001f0c <HAL_GPIO_Init+0x2ac>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6193      	str	r3, [r2, #24]
 8001dec:	4b47      	ldr	r3, [pc, #284]	@ (8001f0c <HAL_GPIO_Init+0x2ac>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001df8:	4a45      	ldr	r2, [pc, #276]	@ (8001f10 <HAL_GPIO_Init+0x2b0>)
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfc:	089b      	lsrs	r3, r3, #2
 8001dfe:	3302      	adds	r3, #2
 8001e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	220f      	movs	r2, #15
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a3d      	ldr	r2, [pc, #244]	@ (8001f14 <HAL_GPIO_Init+0x2b4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d00d      	beq.n	8001e40 <HAL_GPIO_Init+0x1e0>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a3c      	ldr	r2, [pc, #240]	@ (8001f18 <HAL_GPIO_Init+0x2b8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d007      	beq.n	8001e3c <HAL_GPIO_Init+0x1dc>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a3b      	ldr	r2, [pc, #236]	@ (8001f1c <HAL_GPIO_Init+0x2bc>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d101      	bne.n	8001e38 <HAL_GPIO_Init+0x1d8>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e004      	b.n	8001e42 <HAL_GPIO_Init+0x1e2>
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e002      	b.n	8001e42 <HAL_GPIO_Init+0x1e2>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <HAL_GPIO_Init+0x1e2>
 8001e40:	2300      	movs	r3, #0
 8001e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e44:	f002 0203 	and.w	r2, r2, #3
 8001e48:	0092      	lsls	r2, r2, #2
 8001e4a:	4093      	lsls	r3, r2
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e52:	492f      	ldr	r1, [pc, #188]	@ (8001f10 <HAL_GPIO_Init+0x2b0>)
 8001e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	3302      	adds	r3, #2
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d006      	beq.n	8001e7a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	492b      	ldr	r1, [pc, #172]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	608b      	str	r3, [r1, #8]
 8001e78:	e006      	b.n	8001e88 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e7a:	4b29      	ldr	r3, [pc, #164]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	4927      	ldr	r1, [pc, #156]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d006      	beq.n	8001ea2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e94:	4b22      	ldr	r3, [pc, #136]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	4921      	ldr	r1, [pc, #132]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	60cb      	str	r3, [r1, #12]
 8001ea0:	e006      	b.n	8001eb0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	491d      	ldr	r1, [pc, #116]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d006      	beq.n	8001eca <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ebc:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	4917      	ldr	r1, [pc, #92]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	4913      	ldr	r1, [pc, #76]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01f      	beq.n	8001f24 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	490d      	ldr	r1, [pc, #52]	@ (8001f20 <HAL_GPIO_Init+0x2c0>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]
 8001ef0:	e01f      	b.n	8001f32 <HAL_GPIO_Init+0x2d2>
 8001ef2:	bf00      	nop
 8001ef4:	10320000 	.word	0x10320000
 8001ef8:	10310000 	.word	0x10310000
 8001efc:	10220000 	.word	0x10220000
 8001f00:	10210000 	.word	0x10210000
 8001f04:	10120000 	.word	0x10120000
 8001f08:	10110000 	.word	0x10110000
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40010000 	.word	0x40010000
 8001f14:	40010800 	.word	0x40010800
 8001f18:	40010c00 	.word	0x40010c00
 8001f1c:	40011000 	.word	0x40011000
 8001f20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f24:	4b0b      	ldr	r3, [pc, #44]	@ (8001f54 <HAL_GPIO_Init+0x2f4>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	4909      	ldr	r1, [pc, #36]	@ (8001f54 <HAL_GPIO_Init+0x2f4>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	3301      	adds	r3, #1
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f47f ae96 	bne.w	8001c74 <HAL_GPIO_Init+0x14>
  }
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	372c      	adds	r7, #44	@ 0x2c
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	40010400 	.word	0x40010400

08001f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	807b      	strh	r3, [r7, #2]
 8001f64:	4613      	mov	r3, r2
 8001f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f68:	787b      	ldrb	r3, [r7, #1]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6e:	887a      	ldrh	r2, [r7, #2]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f74:	e003      	b.n	8001f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f76:	887b      	ldrh	r3, [r7, #2]
 8001f78:	041a      	lsls	r2, r3, #16
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	611a      	str	r2, [r3, #16]
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e272      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 8087 	beq.w	80020b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fa8:	4b92      	ldr	r3, [pc, #584]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 030c 	and.w	r3, r3, #12
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d00c      	beq.n	8001fce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fb4:	4b8f      	ldr	r3, [pc, #572]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d112      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x5e>
 8001fc0:	4b8c      	ldr	r3, [pc, #560]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fcc:	d10b      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fce:	4b89      	ldr	r3, [pc, #548]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d06c      	beq.n	80020b4 <HAL_RCC_OscConfig+0x12c>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d168      	bne.n	80020b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e24c      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fee:	d106      	bne.n	8001ffe <HAL_RCC_OscConfig+0x76>
 8001ff0:	4b80      	ldr	r3, [pc, #512]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a7f      	ldr	r2, [pc, #508]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	e02e      	b.n	800205c <HAL_RCC_OscConfig+0xd4>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0x98>
 8002006:	4b7b      	ldr	r3, [pc, #492]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a7a      	ldr	r2, [pc, #488]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 800200c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b78      	ldr	r3, [pc, #480]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a77      	ldr	r2, [pc, #476]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002018:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e01d      	b.n	800205c <HAL_RCC_OscConfig+0xd4>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0xbc>
 800202a:	4b72      	ldr	r3, [pc, #456]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a71      	ldr	r2, [pc, #452]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002030:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	4b6f      	ldr	r3, [pc, #444]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a6e      	ldr	r2, [pc, #440]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 800203c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	e00b      	b.n	800205c <HAL_RCC_OscConfig+0xd4>
 8002044:	4b6b      	ldr	r3, [pc, #428]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a6a      	ldr	r2, [pc, #424]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 800204a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b68      	ldr	r3, [pc, #416]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a67      	ldr	r2, [pc, #412]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002056:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800205a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d013      	beq.n	800208c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7ff fcea 	bl	8001a3c <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800206c:	f7ff fce6 	bl	8001a3c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	@ 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e200      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	4b5d      	ldr	r3, [pc, #372]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0xe4>
 800208a:	e014      	b.n	80020b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff fcd6 	bl	8001a3c <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002094:	f7ff fcd2 	bl	8001a3c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	@ 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e1ec      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a6:	4b53      	ldr	r3, [pc, #332]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x10c>
 80020b2:	e000      	b.n	80020b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d063      	beq.n	800218a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020c2:	4b4c      	ldr	r3, [pc, #304]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00b      	beq.n	80020e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ce:	4b49      	ldr	r3, [pc, #292]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d11c      	bne.n	8002114 <HAL_RCC_OscConfig+0x18c>
 80020da:	4b46      	ldr	r3, [pc, #280]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d116      	bne.n	8002114 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e6:	4b43      	ldr	r3, [pc, #268]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_RCC_OscConfig+0x176>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d001      	beq.n	80020fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e1c0      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fe:	4b3d      	ldr	r3, [pc, #244]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4939      	ldr	r1, [pc, #228]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002112:	e03a      	b.n	800218a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d020      	beq.n	800215e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800211c:	4b36      	ldr	r3, [pc, #216]	@ (80021f8 <HAL_RCC_OscConfig+0x270>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7ff fc8b 	bl	8001a3c <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212a:	f7ff fc87 	bl	8001a3c <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e1a1      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213c:	4b2d      	ldr	r3, [pc, #180]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002148:	4b2a      	ldr	r3, [pc, #168]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4927      	ldr	r1, [pc, #156]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002158:	4313      	orrs	r3, r2
 800215a:	600b      	str	r3, [r1, #0]
 800215c:	e015      	b.n	800218a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800215e:	4b26      	ldr	r3, [pc, #152]	@ (80021f8 <HAL_RCC_OscConfig+0x270>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7ff fc6a 	bl	8001a3c <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216c:	f7ff fc66 	bl	8001a3c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e180      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217e:	4b1d      	ldr	r3, [pc, #116]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d03a      	beq.n	800220c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d019      	beq.n	80021d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800219e:	4b17      	ldr	r3, [pc, #92]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a4:	f7ff fc4a 	bl	8001a3c <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ac:	f7ff fc46 	bl	8001a3c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e160      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021be:	4b0d      	ldr	r3, [pc, #52]	@ (80021f4 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ca:	2001      	movs	r0, #1
 80021cc:	f000 face 	bl	800276c <RCC_Delay>
 80021d0:	e01c      	b.n	800220c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d2:	4b0a      	ldr	r3, [pc, #40]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d8:	f7ff fc30 	bl	8001a3c <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021de:	e00f      	b.n	8002200 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e0:	f7ff fc2c 	bl	8001a3c <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d908      	bls.n	8002200 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e146      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	42420000 	.word	0x42420000
 80021fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002200:	4b92      	ldr	r3, [pc, #584]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 8002202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1e9      	bne.n	80021e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80a6 	beq.w	8002366 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221e:	4b8b      	ldr	r3, [pc, #556]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10d      	bne.n	8002246 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222a:	4b88      	ldr	r3, [pc, #544]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	4a87      	ldr	r2, [pc, #540]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002234:	61d3      	str	r3, [r2, #28]
 8002236:	4b85      	ldr	r3, [pc, #532]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002242:	2301      	movs	r3, #1
 8002244:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002246:	4b82      	ldr	r3, [pc, #520]	@ (8002450 <HAL_RCC_OscConfig+0x4c8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d118      	bne.n	8002284 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002252:	4b7f      	ldr	r3, [pc, #508]	@ (8002450 <HAL_RCC_OscConfig+0x4c8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a7e      	ldr	r2, [pc, #504]	@ (8002450 <HAL_RCC_OscConfig+0x4c8>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800225c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225e:	f7ff fbed 	bl	8001a3c <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002266:	f7ff fbe9 	bl	8001a3c <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b64      	cmp	r3, #100	@ 0x64
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e103      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	4b75      	ldr	r3, [pc, #468]	@ (8002450 <HAL_RCC_OscConfig+0x4c8>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d106      	bne.n	800229a <HAL_RCC_OscConfig+0x312>
 800228c:	4b6f      	ldr	r3, [pc, #444]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	4a6e      	ldr	r2, [pc, #440]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	6213      	str	r3, [r2, #32]
 8002298:	e02d      	b.n	80022f6 <HAL_RCC_OscConfig+0x36e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x334>
 80022a2:	4b6a      	ldr	r3, [pc, #424]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	4a69      	ldr	r2, [pc, #420]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	6213      	str	r3, [r2, #32]
 80022ae:	4b67      	ldr	r3, [pc, #412]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4a66      	ldr	r2, [pc, #408]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	f023 0304 	bic.w	r3, r3, #4
 80022b8:	6213      	str	r3, [r2, #32]
 80022ba:	e01c      	b.n	80022f6 <HAL_RCC_OscConfig+0x36e>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2b05      	cmp	r3, #5
 80022c2:	d10c      	bne.n	80022de <HAL_RCC_OscConfig+0x356>
 80022c4:	4b61      	ldr	r3, [pc, #388]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4a60      	ldr	r2, [pc, #384]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022ca:	f043 0304 	orr.w	r3, r3, #4
 80022ce:	6213      	str	r3, [r2, #32]
 80022d0:	4b5e      	ldr	r3, [pc, #376]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4a5d      	ldr	r2, [pc, #372]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6213      	str	r3, [r2, #32]
 80022dc:	e00b      	b.n	80022f6 <HAL_RCC_OscConfig+0x36e>
 80022de:	4b5b      	ldr	r3, [pc, #364]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4a5a      	ldr	r2, [pc, #360]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	6213      	str	r3, [r2, #32]
 80022ea:	4b58      	ldr	r3, [pc, #352]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a57      	ldr	r2, [pc, #348]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	f023 0304 	bic.w	r3, r3, #4
 80022f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d015      	beq.n	800232a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fe:	f7ff fb9d 	bl	8001a3c <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002304:	e00a      	b.n	800231c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7ff fb99 	bl	8001a3c <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e0b1      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231c:	4b4b      	ldr	r3, [pc, #300]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0ee      	beq.n	8002306 <HAL_RCC_OscConfig+0x37e>
 8002328:	e014      	b.n	8002354 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232a:	f7ff fb87 	bl	8001a3c <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002330:	e00a      	b.n	8002348 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002332:	f7ff fb83 	bl	8001a3c <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002340:	4293      	cmp	r3, r2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e09b      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002348:	4b40      	ldr	r3, [pc, #256]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1ee      	bne.n	8002332 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002354:	7dfb      	ldrb	r3, [r7, #23]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d105      	bne.n	8002366 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800235a:	4b3c      	ldr	r3, [pc, #240]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	4a3b      	ldr	r2, [pc, #236]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 8002360:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002364:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 8087 	beq.w	800247e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002370:	4b36      	ldr	r3, [pc, #216]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 030c 	and.w	r3, r3, #12
 8002378:	2b08      	cmp	r3, #8
 800237a:	d061      	beq.n	8002440 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d146      	bne.n	8002412 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002384:	4b33      	ldr	r3, [pc, #204]	@ (8002454 <HAL_RCC_OscConfig+0x4cc>)
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238a:	f7ff fb57 	bl	8001a3c <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002392:	f7ff fb53 	bl	8001a3c <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e06d      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a4:	4b29      	ldr	r3, [pc, #164]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f0      	bne.n	8002392 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023b8:	d108      	bne.n	80023cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023ba:	4b24      	ldr	r3, [pc, #144]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	4921      	ldr	r1, [pc, #132]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023cc:	4b1f      	ldr	r3, [pc, #124]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a19      	ldr	r1, [r3, #32]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023dc:	430b      	orrs	r3, r1
 80023de:	491b      	ldr	r1, [pc, #108]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002454 <HAL_RCC_OscConfig+0x4cc>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ea:	f7ff fb27 	bl	8001a3c <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f2:	f7ff fb23 	bl	8001a3c <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e03d      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002404:	4b11      	ldr	r3, [pc, #68]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x46a>
 8002410:	e035      	b.n	800247e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002412:	4b10      	ldr	r3, [pc, #64]	@ (8002454 <HAL_RCC_OscConfig+0x4cc>)
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7ff fb10 	bl	8001a3c <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002420:	f7ff fb0c 	bl	8001a3c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e026      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002432:	4b06      	ldr	r3, [pc, #24]	@ (800244c <HAL_RCC_OscConfig+0x4c4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x498>
 800243e:	e01e      	b.n	800247e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d107      	bne.n	8002458 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e019      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
 800244c:	40021000 	.word	0x40021000
 8002450:	40007000 	.word	0x40007000
 8002454:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002458:	4b0b      	ldr	r3, [pc, #44]	@ (8002488 <HAL_RCC_OscConfig+0x500>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	429a      	cmp	r2, r3
 800246a:	d106      	bne.n	800247a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002476:	429a      	cmp	r2, r3
 8002478:	d001      	beq.n	800247e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021000 	.word	0x40021000

0800248c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0d0      	b.n	8002642 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024a0:	4b6a      	ldr	r3, [pc, #424]	@ (800264c <HAL_RCC_ClockConfig+0x1c0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d910      	bls.n	80024d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	4b67      	ldr	r3, [pc, #412]	@ (800264c <HAL_RCC_ClockConfig+0x1c0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 0207 	bic.w	r2, r3, #7
 80024b6:	4965      	ldr	r1, [pc, #404]	@ (800264c <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b63      	ldr	r3, [pc, #396]	@ (800264c <HAL_RCC_ClockConfig+0x1c0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0b8      	b.n	8002642 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d020      	beq.n	800251e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e8:	4b59      	ldr	r3, [pc, #356]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4a58      	ldr	r2, [pc, #352]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002500:	4b53      	ldr	r3, [pc, #332]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4a52      	ldr	r2, [pc, #328]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800250a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800250c:	4b50      	ldr	r3, [pc, #320]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	494d      	ldr	r1, [pc, #308]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d040      	beq.n	80025ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d107      	bne.n	8002542 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	4b47      	ldr	r3, [pc, #284]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d115      	bne.n	800256a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e07f      	b.n	8002642 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d107      	bne.n	800255a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254a:	4b41      	ldr	r3, [pc, #260]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d109      	bne.n	800256a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e073      	b.n	8002642 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255a:	4b3d      	ldr	r3, [pc, #244]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e06b      	b.n	8002642 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800256a:	4b39      	ldr	r3, [pc, #228]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f023 0203 	bic.w	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4936      	ldr	r1, [pc, #216]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800257c:	f7ff fa5e 	bl	8001a3c <HAL_GetTick>
 8002580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002582:	e00a      	b.n	800259a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002584:	f7ff fa5a 	bl	8001a3c <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e053      	b.n	8002642 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259a:	4b2d      	ldr	r3, [pc, #180]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 020c 	and.w	r2, r3, #12
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d1eb      	bne.n	8002584 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025ac:	4b27      	ldr	r3, [pc, #156]	@ (800264c <HAL_RCC_ClockConfig+0x1c0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d210      	bcs.n	80025dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ba:	4b24      	ldr	r3, [pc, #144]	@ (800264c <HAL_RCC_ClockConfig+0x1c0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 0207 	bic.w	r2, r3, #7
 80025c2:	4922      	ldr	r1, [pc, #136]	@ (800264c <HAL_RCC_ClockConfig+0x1c0>)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	4b20      	ldr	r3, [pc, #128]	@ (800264c <HAL_RCC_ClockConfig+0x1c0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e032      	b.n	8002642 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d008      	beq.n	80025fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e8:	4b19      	ldr	r3, [pc, #100]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4916      	ldr	r1, [pc, #88]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d009      	beq.n	800261a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002606:	4b12      	ldr	r3, [pc, #72]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	490e      	ldr	r1, [pc, #56]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	4313      	orrs	r3, r2
 8002618:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800261a:	f000 f821 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 800261e:	4602      	mov	r2, r0
 8002620:	4b0b      	ldr	r3, [pc, #44]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	490a      	ldr	r1, [pc, #40]	@ (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 800262c:	5ccb      	ldrb	r3, [r1, r3]
 800262e:	fa22 f303 	lsr.w	r3, r2, r3
 8002632:	4a09      	ldr	r2, [pc, #36]	@ (8002658 <HAL_RCC_ClockConfig+0x1cc>)
 8002634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002636:	4b09      	ldr	r3, [pc, #36]	@ (800265c <HAL_RCC_ClockConfig+0x1d0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff f9bc 	bl	80019b8 <HAL_InitTick>

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40022000 	.word	0x40022000
 8002650:	40021000 	.word	0x40021000
 8002654:	08006570 	.word	0x08006570
 8002658:	20000000 	.word	0x20000000
 800265c:	20000004 	.word	0x20000004

08002660 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	2300      	movs	r3, #0
 8002674:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800267a:	4b1e      	ldr	r3, [pc, #120]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b04      	cmp	r3, #4
 8002688:	d002      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x30>
 800268a:	2b08      	cmp	r3, #8
 800268c:	d003      	beq.n	8002696 <HAL_RCC_GetSysClockFreq+0x36>
 800268e:	e027      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002690:	4b19      	ldr	r3, [pc, #100]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002692:	613b      	str	r3, [r7, #16]
      break;
 8002694:	e027      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	0c9b      	lsrs	r3, r3, #18
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	4a17      	ldr	r2, [pc, #92]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80026a0:	5cd3      	ldrb	r3, [r2, r3]
 80026a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d010      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026ae:	4b11      	ldr	r3, [pc, #68]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	0c5b      	lsrs	r3, r3, #17
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	4a11      	ldr	r2, [pc, #68]	@ (8002700 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026ba:	5cd3      	ldrb	r3, [r2, r3]
 80026bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a0d      	ldr	r2, [pc, #52]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80026c2:	fb03 f202 	mul.w	r2, r3, r2
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	e004      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002704 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026d4:	fb02 f303 	mul.w	r3, r2, r3
 80026d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	613b      	str	r3, [r7, #16]
      break;
 80026de:	e002      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026e0:	4b05      	ldr	r3, [pc, #20]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80026e2:	613b      	str	r3, [r7, #16]
      break;
 80026e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026e6:	693b      	ldr	r3, [r7, #16]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	371c      	adds	r7, #28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000
 80026f8:	007a1200 	.word	0x007a1200
 80026fc:	08006588 	.word	0x08006588
 8002700:	08006598 	.word	0x08006598
 8002704:	003d0900 	.word	0x003d0900

08002708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800270c:	4b02      	ldr	r3, [pc, #8]	@ (8002718 <HAL_RCC_GetHCLKFreq+0x10>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	20000000 	.word	0x20000000

0800271c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002720:	f7ff fff2 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 8002724:	4602      	mov	r2, r0
 8002726:	4b05      	ldr	r3, [pc, #20]	@ (800273c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	4903      	ldr	r1, [pc, #12]	@ (8002740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002732:	5ccb      	ldrb	r3, [r1, r3]
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002738:	4618      	mov	r0, r3
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	08006580 	.word	0x08006580

08002744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002748:	f7ff ffde 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 800274c:	4602      	mov	r2, r0
 800274e:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	0adb      	lsrs	r3, r3, #11
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	4903      	ldr	r1, [pc, #12]	@ (8002768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000
 8002768:	08006580 	.word	0x08006580

0800276c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002774:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <RCC_Delay+0x34>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0a      	ldr	r2, [pc, #40]	@ (80027a4 <RCC_Delay+0x38>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	0a5b      	lsrs	r3, r3, #9
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002788:	bf00      	nop
  }
  while (Delay --);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1e5a      	subs	r2, r3, #1
 800278e:	60fa      	str	r2, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f9      	bne.n	8002788 <RCC_Delay+0x1c>
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	20000000 	.word	0x20000000
 80027a4:	10624dd3 	.word	0x10624dd3

080027a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e076      	b.n	80028a8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d108      	bne.n	80027d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027ca:	d009      	beq.n	80027e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	61da      	str	r2, [r3, #28]
 80027d2:	e005      	b.n	80027e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe ff16 	bl	800162c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002816:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002864:	ea42 0103 	orr.w	r1, r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	0c1a      	lsrs	r2, r3, #16
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f002 0204 	and.w	r2, r2, #4
 8002886:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	69da      	ldr	r2, [r3, #28]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002896:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	4613      	mov	r3, r2
 80028be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_SPI_Transmit+0x22>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e12d      	b.n	8002b2e <HAL_SPI_Transmit+0x27e>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028da:	f7ff f8af 	bl	8001a3c <HAL_GetTick>
 80028de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d002      	beq.n	80028f6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80028f0:	2302      	movs	r3, #2
 80028f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028f4:	e116      	b.n	8002b24 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <HAL_SPI_Transmit+0x52>
 80028fc:	88fb      	ldrh	r3, [r7, #6]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d102      	bne.n	8002908 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002906:	e10d      	b.n	8002b24 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2203      	movs	r2, #3
 800290c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	88fa      	ldrh	r2, [r7, #6]
 8002920:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	88fa      	ldrh	r2, [r7, #6]
 8002926:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800294e:	d10f      	bne.n	8002970 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800295e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800296e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800297a:	2b40      	cmp	r3, #64	@ 0x40
 800297c:	d007      	beq.n	800298e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800298c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002996:	d14f      	bne.n	8002a38 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_SPI_Transmit+0xf6>
 80029a0:	8afb      	ldrh	r3, [r7, #22]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d142      	bne.n	8002a2c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	881a      	ldrh	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	1c9a      	adds	r2, r3, #2
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029ca:	e02f      	b.n	8002a2c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d112      	bne.n	8002a00 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	881a      	ldrh	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	1c9a      	adds	r2, r3, #2
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80029fe:	e015      	b.n	8002a2c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a00:	f7ff f81c 	bl	8001a3c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d803      	bhi.n	8002a18 <HAL_SPI_Transmit+0x168>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a16:	d102      	bne.n	8002a1e <HAL_SPI_Transmit+0x16e>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002a2a:	e07b      	b.n	8002b24 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1ca      	bne.n	80029cc <HAL_SPI_Transmit+0x11c>
 8002a36:	e050      	b.n	8002ada <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <HAL_SPI_Transmit+0x196>
 8002a40:	8afb      	ldrh	r3, [r7, #22]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d144      	bne.n	8002ad0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	330c      	adds	r3, #12
 8002a50:	7812      	ldrb	r2, [r2, #0]
 8002a52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a6c:	e030      	b.n	8002ad0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d113      	bne.n	8002aa4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	330c      	adds	r3, #12
 8002a86:	7812      	ldrb	r2, [r2, #0]
 8002a88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002aa2:	e015      	b.n	8002ad0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aa4:	f7fe ffca 	bl	8001a3c <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d803      	bhi.n	8002abc <HAL_SPI_Transmit+0x20c>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aba:	d102      	bne.n	8002ac2 <HAL_SPI_Transmit+0x212>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002ace:	e029      	b.n	8002b24 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1c9      	bne.n	8002a6e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	6839      	ldr	r1, [r7, #0]
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fbcc 	bl	800327c <SPI_EndRxTxTransaction>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2220      	movs	r2, #32
 8002aee:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10a      	bne.n	8002b0e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002af8:	2300      	movs	r3, #0
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	77fb      	strb	r3, [r7, #31]
 8002b1a:	e003      	b.n	8002b24 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002b2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3720      	adds	r7, #32
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b088      	sub	sp, #32
 8002b3a:	af02      	add	r7, sp, #8
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	603b      	str	r3, [r7, #0]
 8002b42:	4613      	mov	r3, r2
 8002b44:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d002      	beq.n	8002b5c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002b56:	2302      	movs	r3, #2
 8002b58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b5a:	e0fb      	b.n	8002d54 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b64:	d112      	bne.n	8002b8c <HAL_SPI_Receive+0x56>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10e      	bne.n	8002b8c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2204      	movs	r2, #4
 8002b72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b76:	88fa      	ldrh	r2, [r7, #6]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f8ef 	bl	8002d66 <HAL_SPI_TransmitReceive>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	e0e8      	b.n	8002d5e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <HAL_SPI_Receive+0x64>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e0e1      	b.n	8002d5e <HAL_SPI_Receive+0x228>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ba2:	f7fe ff4b 	bl	8001a3c <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <HAL_SPI_Receive+0x7e>
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d102      	bne.n	8002bba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002bb8:	e0cc      	b.n	8002d54 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	88fa      	ldrh	r2, [r7, #6]
 8002bd2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	88fa      	ldrh	r2, [r7, #6]
 8002bd8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c00:	d10f      	bne.n	8002c22 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c2c:	2b40      	cmp	r3, #64	@ 0x40
 8002c2e:	d007      	beq.n	8002c40 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d16a      	bne.n	8002d1e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c48:	e032      	b.n	8002cb0 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d115      	bne.n	8002c84 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f103 020c 	add.w	r2, r3, #12
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c64:	7812      	ldrb	r2, [r2, #0]
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c82:	e015      	b.n	8002cb0 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c84:	f7fe feda 	bl	8001a3c <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d803      	bhi.n	8002c9c <HAL_SPI_Receive+0x166>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9a:	d102      	bne.n	8002ca2 <HAL_SPI_Receive+0x16c>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002cae:	e051      	b.n	8002d54 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1c7      	bne.n	8002c4a <HAL_SPI_Receive+0x114>
 8002cba:	e035      	b.n	8002d28 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d113      	bne.n	8002cf2 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd4:	b292      	uxth	r2, r2
 8002cd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cdc:	1c9a      	adds	r2, r3, #2
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002cf0:	e015      	b.n	8002d1e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cf2:	f7fe fea3 	bl	8001a3c <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d803      	bhi.n	8002d0a <HAL_SPI_Receive+0x1d4>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d102      	bne.n	8002d10 <HAL_SPI_Receive+0x1da>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d106      	bne.n	8002d1e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002d1c:	e01a      	b.n	8002d54 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1c9      	bne.n	8002cbc <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	6839      	ldr	r1, [r7, #0]
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 fa53 	bl	80031d8 <SPI_EndRxTransaction>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d002      	beq.n	8002d3e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	75fb      	strb	r3, [r7, #23]
 8002d4a:	e003      	b.n	8002d54 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b08c      	sub	sp, #48	@ 0x30
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d74:	2301      	movs	r3, #1
 8002d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_SPI_TransmitReceive+0x26>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e198      	b.n	80030be <HAL_SPI_TransmitReceive+0x358>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d94:	f7fe fe52 	bl	8001a3c <HAL_GetTick>
 8002d98:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002da0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002daa:	887b      	ldrh	r3, [r7, #2]
 8002dac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d00f      	beq.n	8002dd6 <HAL_SPI_TransmitReceive+0x70>
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dbc:	d107      	bne.n	8002dce <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d103      	bne.n	8002dce <HAL_SPI_TransmitReceive+0x68>
 8002dc6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d003      	beq.n	8002dd6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002dd4:	e16d      	b.n	80030b2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_SPI_TransmitReceive+0x82>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_SPI_TransmitReceive+0x82>
 8002de2:	887b      	ldrh	r3, [r7, #2]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d103      	bne.n	8002df0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002dee:	e160      	b.n	80030b2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d003      	beq.n	8002e04 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2205      	movs	r2, #5
 8002e00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	887a      	ldrh	r2, [r7, #2]
 8002e14:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	887a      	ldrh	r2, [r7, #2]
 8002e1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	887a      	ldrh	r2, [r7, #2]
 8002e26:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	887a      	ldrh	r2, [r7, #2]
 8002e2c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e44:	2b40      	cmp	r3, #64	@ 0x40
 8002e46:	d007      	beq.n	8002e58 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e60:	d17c      	bne.n	8002f5c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_SPI_TransmitReceive+0x10a>
 8002e6a:	8b7b      	ldrh	r3, [r7, #26]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d16a      	bne.n	8002f46 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e74:	881a      	ldrh	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e80:	1c9a      	adds	r2, r3, #2
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e94:	e057      	b.n	8002f46 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d11b      	bne.n	8002edc <HAL_SPI_TransmitReceive+0x176>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d016      	beq.n	8002edc <HAL_SPI_TransmitReceive+0x176>
 8002eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d113      	bne.n	8002edc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb8:	881a      	ldrh	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	1c9a      	adds	r2, r3, #2
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d119      	bne.n	8002f1e <HAL_SPI_TransmitReceive+0x1b8>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d014      	beq.n	8002f1e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efe:	b292      	uxth	r2, r2
 8002f00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f06:	1c9a      	adds	r2, r3, #2
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f1e:	f7fe fd8d 	bl	8001a3c <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d80b      	bhi.n	8002f46 <HAL_SPI_TransmitReceive+0x1e0>
 8002f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f34:	d007      	beq.n	8002f46 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002f44:	e0b5      	b.n	80030b2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1a2      	bne.n	8002e96 <HAL_SPI_TransmitReceive+0x130>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d19d      	bne.n	8002e96 <HAL_SPI_TransmitReceive+0x130>
 8002f5a:	e080      	b.n	800305e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <HAL_SPI_TransmitReceive+0x204>
 8002f64:	8b7b      	ldrh	r3, [r7, #26]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d16f      	bne.n	800304a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	330c      	adds	r3, #12
 8002f74:	7812      	ldrb	r2, [r2, #0]
 8002f76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f90:	e05b      	b.n	800304a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d11c      	bne.n	8002fda <HAL_SPI_TransmitReceive+0x274>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d017      	beq.n	8002fda <HAL_SPI_TransmitReceive+0x274>
 8002faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d114      	bne.n	8002fda <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	330c      	adds	r3, #12
 8002fba:	7812      	ldrb	r2, [r2, #0]
 8002fbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d119      	bne.n	800301c <HAL_SPI_TransmitReceive+0x2b6>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d014      	beq.n	800301c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003018:	2301      	movs	r3, #1
 800301a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800301c:	f7fe fd0e 	bl	8001a3c <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003028:	429a      	cmp	r2, r3
 800302a:	d803      	bhi.n	8003034 <HAL_SPI_TransmitReceive+0x2ce>
 800302c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800302e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003032:	d102      	bne.n	800303a <HAL_SPI_TransmitReceive+0x2d4>
 8003034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003036:	2b00      	cmp	r3, #0
 8003038:	d107      	bne.n	800304a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003048:	e033      	b.n	80030b2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d19e      	bne.n	8002f92 <HAL_SPI_TransmitReceive+0x22c>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d199      	bne.n	8002f92 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800305e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003060:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f90a 	bl	800327c <SPI_EndRxTxTransaction>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d006      	beq.n	800307c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800307a:	e01a      	b.n	80030b2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030a8:	e003      	b.n	80030b2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80030ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3730      	adds	r7, #48	@ 0x30
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	4613      	mov	r3, r2
 80030d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030d8:	f7fe fcb0 	bl	8001a3c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	4413      	add	r3, r2
 80030e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030e8:	f7fe fca8 	bl	8001a3c <HAL_GetTick>
 80030ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030ee:	4b39      	ldr	r3, [pc, #228]	@ (80031d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	015b      	lsls	r3, r3, #5
 80030f4:	0d1b      	lsrs	r3, r3, #20
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
 80030fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030fe:	e054      	b.n	80031aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003106:	d050      	beq.n	80031aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003108:	f7fe fc98 	bl	8001a3c <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	429a      	cmp	r2, r3
 8003116:	d902      	bls.n	800311e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d13d      	bne.n	800319a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800312c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003136:	d111      	bne.n	800315c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003140:	d004      	beq.n	800314c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800314a:	d107      	bne.n	800315c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800315a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003160:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003164:	d10f      	bne.n	8003186 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003184:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e017      	b.n	80031ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4013      	ands	r3, r2
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	bf0c      	ite	eq
 80031ba:	2301      	moveq	r3, #1
 80031bc:	2300      	movne	r3, #0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d19b      	bne.n	8003100 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20000000 	.word	0x20000000

080031d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af02      	add	r7, sp, #8
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031ec:	d111      	bne.n	8003212 <SPI_EndRxTransaction+0x3a>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031f6:	d004      	beq.n	8003202 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003200:	d107      	bne.n	8003212 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003210:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800321a:	d117      	bne.n	800324c <SPI_EndRxTransaction+0x74>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003224:	d112      	bne.n	800324c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2200      	movs	r2, #0
 800322e:	2101      	movs	r1, #1
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f7ff ff49 	bl	80030c8 <SPI_WaitFlagStateUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01a      	beq.n	8003272 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003240:	f043 0220 	orr.w	r2, r3, #32
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e013      	b.n	8003274 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2200      	movs	r2, #0
 8003254:	2180      	movs	r1, #128	@ 0x80
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f7ff ff36 	bl	80030c8 <SPI_WaitFlagStateUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d007      	beq.n	8003272 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003266:	f043 0220 	orr.w	r2, r3, #32
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e000      	b.n	8003274 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af02      	add	r7, sp, #8
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2200      	movs	r2, #0
 8003290:	2180      	movs	r1, #128	@ 0x80
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f7ff ff18 	bl	80030c8 <SPI_WaitFlagStateUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d007      	beq.n	80032ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a2:	f043 0220 	orr.w	r2, r3, #32
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e000      	b.n	80032b0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e042      	b.n	8003350 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fe f9ee 	bl	80016c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2224      	movs	r2, #36	@ 0x24
 80032e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f91d 	bl	800353c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695a      	ldr	r2, [r3, #20]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003320:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003330:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08a      	sub	sp, #40	@ 0x28
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	4613      	mov	r3, r2
 8003366:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b20      	cmp	r3, #32
 8003376:	d16d      	bne.n	8003454 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <HAL_UART_Transmit+0x2c>
 800337e:	88fb      	ldrh	r3, [r7, #6]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e066      	b.n	8003456 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2221      	movs	r2, #33	@ 0x21
 8003392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003396:	f7fe fb51 	bl	8001a3c <HAL_GetTick>
 800339a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	88fa      	ldrh	r2, [r7, #6]
 80033a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	88fa      	ldrh	r2, [r7, #6]
 80033a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033b0:	d108      	bne.n	80033c4 <HAL_UART_Transmit+0x6c>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d104      	bne.n	80033c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	61bb      	str	r3, [r7, #24]
 80033c2:	e003      	b.n	80033cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033cc:	e02a      	b.n	8003424 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2200      	movs	r2, #0
 80033d6:	2180      	movs	r1, #128	@ 0x80
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f840 	bl	800345e <UART_WaitOnFlagUntilTimeout>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e036      	b.n	8003456 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10b      	bne.n	8003406 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	3302      	adds	r3, #2
 8003402:	61bb      	str	r3, [r7, #24]
 8003404:	e007      	b.n	8003416 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	781a      	ldrb	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	3301      	adds	r3, #1
 8003414:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800341a:	b29b      	uxth	r3, r3
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1cf      	bne.n	80033ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2200      	movs	r2, #0
 8003436:	2140      	movs	r1, #64	@ 0x40
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f810 	bl	800345e <UART_WaitOnFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e006      	b.n	8003456 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	e000      	b.n	8003456 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003454:	2302      	movs	r3, #2
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b090      	sub	sp, #64	@ 0x40
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	4613      	mov	r3, r2
 800346c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346e:	e050      	b.n	8003512 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003470:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003476:	d04c      	beq.n	8003512 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003478:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800347a:	2b00      	cmp	r3, #0
 800347c:	d007      	beq.n	800348e <UART_WaitOnFlagUntilTimeout+0x30>
 800347e:	f7fe fadd 	bl	8001a3c <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800348a:	429a      	cmp	r2, r3
 800348c:	d241      	bcs.n	8003512 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	330c      	adds	r3, #12
 8003494:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003498:	e853 3f00 	ldrex	r3, [r3]
 800349c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800349e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80034a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	330c      	adds	r3, #12
 80034ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034ae:	637a      	str	r2, [r7, #52]	@ 0x34
 80034b0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80034b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034b6:	e841 2300 	strex	r3, r2, [r1]
 80034ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80034bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1e5      	bne.n	800348e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3314      	adds	r3, #20
 80034c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	e853 3f00 	ldrex	r3, [r3]
 80034d0:	613b      	str	r3, [r7, #16]
   return(result);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f023 0301 	bic.w	r3, r3, #1
 80034d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3314      	adds	r3, #20
 80034e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034e2:	623a      	str	r2, [r7, #32]
 80034e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e6:	69f9      	ldr	r1, [r7, #28]
 80034e8:	6a3a      	ldr	r2, [r7, #32]
 80034ea:	e841 2300 	strex	r3, r2, [r1]
 80034ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1e5      	bne.n	80034c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e00f      	b.n	8003532 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4013      	ands	r3, r2
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	429a      	cmp	r2, r3
 8003520:	bf0c      	ite	eq
 8003522:	2301      	moveq	r3, #1
 8003524:	2300      	movne	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	429a      	cmp	r2, r3
 800352e:	d09f      	beq.n	8003470 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3740      	adds	r7, #64	@ 0x40
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003576:	f023 030c 	bic.w	r3, r3, #12
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	68b9      	ldr	r1, [r7, #8]
 8003580:	430b      	orrs	r3, r1
 8003582:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a2c      	ldr	r2, [pc, #176]	@ (8003650 <UART_SetConfig+0x114>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d103      	bne.n	80035ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035a4:	f7ff f8ce 	bl	8002744 <HAL_RCC_GetPCLK2Freq>
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	e002      	b.n	80035b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035ac:	f7ff f8b6 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 80035b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	009a      	lsls	r2, r3, #2
 80035bc:	441a      	add	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c8:	4a22      	ldr	r2, [pc, #136]	@ (8003654 <UART_SetConfig+0x118>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	0119      	lsls	r1, r3, #4
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	009a      	lsls	r2, r3, #2
 80035dc:	441a      	add	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003654 <UART_SetConfig+0x118>)
 80035ea:	fba3 0302 	umull	r0, r3, r3, r2
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	2064      	movs	r0, #100	@ 0x64
 80035f2:	fb00 f303 	mul.w	r3, r0, r3
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	3332      	adds	r3, #50	@ 0x32
 80035fc:	4a15      	ldr	r2, [pc, #84]	@ (8003654 <UART_SetConfig+0x118>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003608:	4419      	add	r1, r3
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	009a      	lsls	r2, r3, #2
 8003614:	441a      	add	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003620:	4b0c      	ldr	r3, [pc, #48]	@ (8003654 <UART_SetConfig+0x118>)
 8003622:	fba3 0302 	umull	r0, r3, r3, r2
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	2064      	movs	r0, #100	@ 0x64
 800362a:	fb00 f303 	mul.w	r3, r0, r3
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	3332      	adds	r3, #50	@ 0x32
 8003634:	4a07      	ldr	r2, [pc, #28]	@ (8003654 <UART_SetConfig+0x118>)
 8003636:	fba2 2303 	umull	r2, r3, r2, r3
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	f003 020f 	and.w	r2, r3, #15
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	440a      	add	r2, r1
 8003646:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40013800 	.word	0x40013800
 8003654:	51eb851f 	.word	0x51eb851f

08003658 <__cvt>:
 8003658:	2b00      	cmp	r3, #0
 800365a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800365e:	461d      	mov	r5, r3
 8003660:	bfbb      	ittet	lt
 8003662:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003666:	461d      	movlt	r5, r3
 8003668:	2300      	movge	r3, #0
 800366a:	232d      	movlt	r3, #45	@ 0x2d
 800366c:	b088      	sub	sp, #32
 800366e:	4614      	mov	r4, r2
 8003670:	bfb8      	it	lt
 8003672:	4614      	movlt	r4, r2
 8003674:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003676:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003678:	7013      	strb	r3, [r2, #0]
 800367a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800367c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003680:	f023 0820 	bic.w	r8, r3, #32
 8003684:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003688:	d005      	beq.n	8003696 <__cvt+0x3e>
 800368a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800368e:	d100      	bne.n	8003692 <__cvt+0x3a>
 8003690:	3601      	adds	r6, #1
 8003692:	2302      	movs	r3, #2
 8003694:	e000      	b.n	8003698 <__cvt+0x40>
 8003696:	2303      	movs	r3, #3
 8003698:	aa07      	add	r2, sp, #28
 800369a:	9204      	str	r2, [sp, #16]
 800369c:	aa06      	add	r2, sp, #24
 800369e:	e9cd a202 	strd	sl, r2, [sp, #8]
 80036a2:	e9cd 3600 	strd	r3, r6, [sp]
 80036a6:	4622      	mov	r2, r4
 80036a8:	462b      	mov	r3, r5
 80036aa:	f000 fe6d 	bl	8004388 <_dtoa_r>
 80036ae:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80036b2:	4607      	mov	r7, r0
 80036b4:	d119      	bne.n	80036ea <__cvt+0x92>
 80036b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80036b8:	07db      	lsls	r3, r3, #31
 80036ba:	d50e      	bpl.n	80036da <__cvt+0x82>
 80036bc:	eb00 0906 	add.w	r9, r0, r6
 80036c0:	2200      	movs	r2, #0
 80036c2:	2300      	movs	r3, #0
 80036c4:	4620      	mov	r0, r4
 80036c6:	4629      	mov	r1, r5
 80036c8:	f7fd f96e 	bl	80009a8 <__aeabi_dcmpeq>
 80036cc:	b108      	cbz	r0, 80036d2 <__cvt+0x7a>
 80036ce:	f8cd 901c 	str.w	r9, [sp, #28]
 80036d2:	2230      	movs	r2, #48	@ 0x30
 80036d4:	9b07      	ldr	r3, [sp, #28]
 80036d6:	454b      	cmp	r3, r9
 80036d8:	d31e      	bcc.n	8003718 <__cvt+0xc0>
 80036da:	4638      	mov	r0, r7
 80036dc:	9b07      	ldr	r3, [sp, #28]
 80036de:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80036e0:	1bdb      	subs	r3, r3, r7
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	b008      	add	sp, #32
 80036e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ea:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80036ee:	eb00 0906 	add.w	r9, r0, r6
 80036f2:	d1e5      	bne.n	80036c0 <__cvt+0x68>
 80036f4:	7803      	ldrb	r3, [r0, #0]
 80036f6:	2b30      	cmp	r3, #48	@ 0x30
 80036f8:	d10a      	bne.n	8003710 <__cvt+0xb8>
 80036fa:	2200      	movs	r2, #0
 80036fc:	2300      	movs	r3, #0
 80036fe:	4620      	mov	r0, r4
 8003700:	4629      	mov	r1, r5
 8003702:	f7fd f951 	bl	80009a8 <__aeabi_dcmpeq>
 8003706:	b918      	cbnz	r0, 8003710 <__cvt+0xb8>
 8003708:	f1c6 0601 	rsb	r6, r6, #1
 800370c:	f8ca 6000 	str.w	r6, [sl]
 8003710:	f8da 3000 	ldr.w	r3, [sl]
 8003714:	4499      	add	r9, r3
 8003716:	e7d3      	b.n	80036c0 <__cvt+0x68>
 8003718:	1c59      	adds	r1, r3, #1
 800371a:	9107      	str	r1, [sp, #28]
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	e7d9      	b.n	80036d4 <__cvt+0x7c>

08003720 <__exponent>:
 8003720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003722:	2900      	cmp	r1, #0
 8003724:	bfb6      	itet	lt
 8003726:	232d      	movlt	r3, #45	@ 0x2d
 8003728:	232b      	movge	r3, #43	@ 0x2b
 800372a:	4249      	neglt	r1, r1
 800372c:	2909      	cmp	r1, #9
 800372e:	7002      	strb	r2, [r0, #0]
 8003730:	7043      	strb	r3, [r0, #1]
 8003732:	dd29      	ble.n	8003788 <__exponent+0x68>
 8003734:	f10d 0307 	add.w	r3, sp, #7
 8003738:	461d      	mov	r5, r3
 800373a:	270a      	movs	r7, #10
 800373c:	fbb1 f6f7 	udiv	r6, r1, r7
 8003740:	461a      	mov	r2, r3
 8003742:	fb07 1416 	mls	r4, r7, r6, r1
 8003746:	3430      	adds	r4, #48	@ 0x30
 8003748:	f802 4c01 	strb.w	r4, [r2, #-1]
 800374c:	460c      	mov	r4, r1
 800374e:	2c63      	cmp	r4, #99	@ 0x63
 8003750:	4631      	mov	r1, r6
 8003752:	f103 33ff 	add.w	r3, r3, #4294967295
 8003756:	dcf1      	bgt.n	800373c <__exponent+0x1c>
 8003758:	3130      	adds	r1, #48	@ 0x30
 800375a:	1e94      	subs	r4, r2, #2
 800375c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003760:	4623      	mov	r3, r4
 8003762:	1c41      	adds	r1, r0, #1
 8003764:	42ab      	cmp	r3, r5
 8003766:	d30a      	bcc.n	800377e <__exponent+0x5e>
 8003768:	f10d 0309 	add.w	r3, sp, #9
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	42ac      	cmp	r4, r5
 8003770:	bf88      	it	hi
 8003772:	2300      	movhi	r3, #0
 8003774:	3302      	adds	r3, #2
 8003776:	4403      	add	r3, r0
 8003778:	1a18      	subs	r0, r3, r0
 800377a:	b003      	add	sp, #12
 800377c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800377e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003782:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003786:	e7ed      	b.n	8003764 <__exponent+0x44>
 8003788:	2330      	movs	r3, #48	@ 0x30
 800378a:	3130      	adds	r1, #48	@ 0x30
 800378c:	7083      	strb	r3, [r0, #2]
 800378e:	70c1      	strb	r1, [r0, #3]
 8003790:	1d03      	adds	r3, r0, #4
 8003792:	e7f1      	b.n	8003778 <__exponent+0x58>

08003794 <_printf_float>:
 8003794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003798:	b091      	sub	sp, #68	@ 0x44
 800379a:	460c      	mov	r4, r1
 800379c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80037a0:	4616      	mov	r6, r2
 80037a2:	461f      	mov	r7, r3
 80037a4:	4605      	mov	r5, r0
 80037a6:	f000 fce1 	bl	800416c <_localeconv_r>
 80037aa:	6803      	ldr	r3, [r0, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	9308      	str	r3, [sp, #32]
 80037b0:	f7fc fcce 	bl	8000150 <strlen>
 80037b4:	2300      	movs	r3, #0
 80037b6:	930e      	str	r3, [sp, #56]	@ 0x38
 80037b8:	f8d8 3000 	ldr.w	r3, [r8]
 80037bc:	9009      	str	r0, [sp, #36]	@ 0x24
 80037be:	3307      	adds	r3, #7
 80037c0:	f023 0307 	bic.w	r3, r3, #7
 80037c4:	f103 0208 	add.w	r2, r3, #8
 80037c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80037cc:	f8d4 b000 	ldr.w	fp, [r4]
 80037d0:	f8c8 2000 	str.w	r2, [r8]
 80037d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80037d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80037dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80037de:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80037e2:	f04f 32ff 	mov.w	r2, #4294967295
 80037e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80037ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80037ee:	4b9c      	ldr	r3, [pc, #624]	@ (8003a60 <_printf_float+0x2cc>)
 80037f0:	f7fd f90c 	bl	8000a0c <__aeabi_dcmpun>
 80037f4:	bb70      	cbnz	r0, 8003854 <_printf_float+0xc0>
 80037f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80037fa:	f04f 32ff 	mov.w	r2, #4294967295
 80037fe:	4b98      	ldr	r3, [pc, #608]	@ (8003a60 <_printf_float+0x2cc>)
 8003800:	f7fd f8e6 	bl	80009d0 <__aeabi_dcmple>
 8003804:	bb30      	cbnz	r0, 8003854 <_printf_float+0xc0>
 8003806:	2200      	movs	r2, #0
 8003808:	2300      	movs	r3, #0
 800380a:	4640      	mov	r0, r8
 800380c:	4649      	mov	r1, r9
 800380e:	f7fd f8d5 	bl	80009bc <__aeabi_dcmplt>
 8003812:	b110      	cbz	r0, 800381a <_printf_float+0x86>
 8003814:	232d      	movs	r3, #45	@ 0x2d
 8003816:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800381a:	4a92      	ldr	r2, [pc, #584]	@ (8003a64 <_printf_float+0x2d0>)
 800381c:	4b92      	ldr	r3, [pc, #584]	@ (8003a68 <_printf_float+0x2d4>)
 800381e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003822:	bf8c      	ite	hi
 8003824:	4690      	movhi	r8, r2
 8003826:	4698      	movls	r8, r3
 8003828:	2303      	movs	r3, #3
 800382a:	f04f 0900 	mov.w	r9, #0
 800382e:	6123      	str	r3, [r4, #16]
 8003830:	f02b 0304 	bic.w	r3, fp, #4
 8003834:	6023      	str	r3, [r4, #0]
 8003836:	4633      	mov	r3, r6
 8003838:	4621      	mov	r1, r4
 800383a:	4628      	mov	r0, r5
 800383c:	9700      	str	r7, [sp, #0]
 800383e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003840:	f000 f9d4 	bl	8003bec <_printf_common>
 8003844:	3001      	adds	r0, #1
 8003846:	f040 8090 	bne.w	800396a <_printf_float+0x1d6>
 800384a:	f04f 30ff 	mov.w	r0, #4294967295
 800384e:	b011      	add	sp, #68	@ 0x44
 8003850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003854:	4642      	mov	r2, r8
 8003856:	464b      	mov	r3, r9
 8003858:	4640      	mov	r0, r8
 800385a:	4649      	mov	r1, r9
 800385c:	f7fd f8d6 	bl	8000a0c <__aeabi_dcmpun>
 8003860:	b148      	cbz	r0, 8003876 <_printf_float+0xe2>
 8003862:	464b      	mov	r3, r9
 8003864:	2b00      	cmp	r3, #0
 8003866:	bfb8      	it	lt
 8003868:	232d      	movlt	r3, #45	@ 0x2d
 800386a:	4a80      	ldr	r2, [pc, #512]	@ (8003a6c <_printf_float+0x2d8>)
 800386c:	bfb8      	it	lt
 800386e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003872:	4b7f      	ldr	r3, [pc, #508]	@ (8003a70 <_printf_float+0x2dc>)
 8003874:	e7d3      	b.n	800381e <_printf_float+0x8a>
 8003876:	6863      	ldr	r3, [r4, #4]
 8003878:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	d13f      	bne.n	8003900 <_printf_float+0x16c>
 8003880:	2306      	movs	r3, #6
 8003882:	6063      	str	r3, [r4, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800388a:	6023      	str	r3, [r4, #0]
 800388c:	9206      	str	r2, [sp, #24]
 800388e:	aa0e      	add	r2, sp, #56	@ 0x38
 8003890:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003894:	aa0d      	add	r2, sp, #52	@ 0x34
 8003896:	9203      	str	r2, [sp, #12]
 8003898:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800389c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80038a0:	6863      	ldr	r3, [r4, #4]
 80038a2:	4642      	mov	r2, r8
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	4628      	mov	r0, r5
 80038a8:	464b      	mov	r3, r9
 80038aa:	910a      	str	r1, [sp, #40]	@ 0x28
 80038ac:	f7ff fed4 	bl	8003658 <__cvt>
 80038b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80038b2:	4680      	mov	r8, r0
 80038b4:	2947      	cmp	r1, #71	@ 0x47
 80038b6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80038b8:	d128      	bne.n	800390c <_printf_float+0x178>
 80038ba:	1cc8      	adds	r0, r1, #3
 80038bc:	db02      	blt.n	80038c4 <_printf_float+0x130>
 80038be:	6863      	ldr	r3, [r4, #4]
 80038c0:	4299      	cmp	r1, r3
 80038c2:	dd40      	ble.n	8003946 <_printf_float+0x1b2>
 80038c4:	f1aa 0a02 	sub.w	sl, sl, #2
 80038c8:	fa5f fa8a 	uxtb.w	sl, sl
 80038cc:	4652      	mov	r2, sl
 80038ce:	3901      	subs	r1, #1
 80038d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80038d4:	910d      	str	r1, [sp, #52]	@ 0x34
 80038d6:	f7ff ff23 	bl	8003720 <__exponent>
 80038da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80038dc:	4681      	mov	r9, r0
 80038de:	1813      	adds	r3, r2, r0
 80038e0:	2a01      	cmp	r2, #1
 80038e2:	6123      	str	r3, [r4, #16]
 80038e4:	dc02      	bgt.n	80038ec <_printf_float+0x158>
 80038e6:	6822      	ldr	r2, [r4, #0]
 80038e8:	07d2      	lsls	r2, r2, #31
 80038ea:	d501      	bpl.n	80038f0 <_printf_float+0x15c>
 80038ec:	3301      	adds	r3, #1
 80038ee:	6123      	str	r3, [r4, #16]
 80038f0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d09e      	beq.n	8003836 <_printf_float+0xa2>
 80038f8:	232d      	movs	r3, #45	@ 0x2d
 80038fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038fe:	e79a      	b.n	8003836 <_printf_float+0xa2>
 8003900:	2947      	cmp	r1, #71	@ 0x47
 8003902:	d1bf      	bne.n	8003884 <_printf_float+0xf0>
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1bd      	bne.n	8003884 <_printf_float+0xf0>
 8003908:	2301      	movs	r3, #1
 800390a:	e7ba      	b.n	8003882 <_printf_float+0xee>
 800390c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003910:	d9dc      	bls.n	80038cc <_printf_float+0x138>
 8003912:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003916:	d118      	bne.n	800394a <_printf_float+0x1b6>
 8003918:	2900      	cmp	r1, #0
 800391a:	6863      	ldr	r3, [r4, #4]
 800391c:	dd0b      	ble.n	8003936 <_printf_float+0x1a2>
 800391e:	6121      	str	r1, [r4, #16]
 8003920:	b913      	cbnz	r3, 8003928 <_printf_float+0x194>
 8003922:	6822      	ldr	r2, [r4, #0]
 8003924:	07d0      	lsls	r0, r2, #31
 8003926:	d502      	bpl.n	800392e <_printf_float+0x19a>
 8003928:	3301      	adds	r3, #1
 800392a:	440b      	add	r3, r1
 800392c:	6123      	str	r3, [r4, #16]
 800392e:	f04f 0900 	mov.w	r9, #0
 8003932:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003934:	e7dc      	b.n	80038f0 <_printf_float+0x15c>
 8003936:	b913      	cbnz	r3, 800393e <_printf_float+0x1aa>
 8003938:	6822      	ldr	r2, [r4, #0]
 800393a:	07d2      	lsls	r2, r2, #31
 800393c:	d501      	bpl.n	8003942 <_printf_float+0x1ae>
 800393e:	3302      	adds	r3, #2
 8003940:	e7f4      	b.n	800392c <_printf_float+0x198>
 8003942:	2301      	movs	r3, #1
 8003944:	e7f2      	b.n	800392c <_printf_float+0x198>
 8003946:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800394a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800394c:	4299      	cmp	r1, r3
 800394e:	db05      	blt.n	800395c <_printf_float+0x1c8>
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	6121      	str	r1, [r4, #16]
 8003954:	07d8      	lsls	r0, r3, #31
 8003956:	d5ea      	bpl.n	800392e <_printf_float+0x19a>
 8003958:	1c4b      	adds	r3, r1, #1
 800395a:	e7e7      	b.n	800392c <_printf_float+0x198>
 800395c:	2900      	cmp	r1, #0
 800395e:	bfcc      	ite	gt
 8003960:	2201      	movgt	r2, #1
 8003962:	f1c1 0202 	rsble	r2, r1, #2
 8003966:	4413      	add	r3, r2
 8003968:	e7e0      	b.n	800392c <_printf_float+0x198>
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	055a      	lsls	r2, r3, #21
 800396e:	d407      	bmi.n	8003980 <_printf_float+0x1ec>
 8003970:	6923      	ldr	r3, [r4, #16]
 8003972:	4642      	mov	r2, r8
 8003974:	4631      	mov	r1, r6
 8003976:	4628      	mov	r0, r5
 8003978:	47b8      	blx	r7
 800397a:	3001      	adds	r0, #1
 800397c:	d12b      	bne.n	80039d6 <_printf_float+0x242>
 800397e:	e764      	b.n	800384a <_printf_float+0xb6>
 8003980:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003984:	f240 80dc 	bls.w	8003b40 <_printf_float+0x3ac>
 8003988:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800398c:	2200      	movs	r2, #0
 800398e:	2300      	movs	r3, #0
 8003990:	f7fd f80a 	bl	80009a8 <__aeabi_dcmpeq>
 8003994:	2800      	cmp	r0, #0
 8003996:	d033      	beq.n	8003a00 <_printf_float+0x26c>
 8003998:	2301      	movs	r3, #1
 800399a:	4631      	mov	r1, r6
 800399c:	4628      	mov	r0, r5
 800399e:	4a35      	ldr	r2, [pc, #212]	@ (8003a74 <_printf_float+0x2e0>)
 80039a0:	47b8      	blx	r7
 80039a2:	3001      	adds	r0, #1
 80039a4:	f43f af51 	beq.w	800384a <_printf_float+0xb6>
 80039a8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80039ac:	4543      	cmp	r3, r8
 80039ae:	db02      	blt.n	80039b6 <_printf_float+0x222>
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	07d8      	lsls	r0, r3, #31
 80039b4:	d50f      	bpl.n	80039d6 <_printf_float+0x242>
 80039b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80039ba:	4631      	mov	r1, r6
 80039bc:	4628      	mov	r0, r5
 80039be:	47b8      	blx	r7
 80039c0:	3001      	adds	r0, #1
 80039c2:	f43f af42 	beq.w	800384a <_printf_float+0xb6>
 80039c6:	f04f 0900 	mov.w	r9, #0
 80039ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80039ce:	f104 0a1a 	add.w	sl, r4, #26
 80039d2:	45c8      	cmp	r8, r9
 80039d4:	dc09      	bgt.n	80039ea <_printf_float+0x256>
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	079b      	lsls	r3, r3, #30
 80039da:	f100 8102 	bmi.w	8003be2 <_printf_float+0x44e>
 80039de:	68e0      	ldr	r0, [r4, #12]
 80039e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80039e2:	4298      	cmp	r0, r3
 80039e4:	bfb8      	it	lt
 80039e6:	4618      	movlt	r0, r3
 80039e8:	e731      	b.n	800384e <_printf_float+0xba>
 80039ea:	2301      	movs	r3, #1
 80039ec:	4652      	mov	r2, sl
 80039ee:	4631      	mov	r1, r6
 80039f0:	4628      	mov	r0, r5
 80039f2:	47b8      	blx	r7
 80039f4:	3001      	adds	r0, #1
 80039f6:	f43f af28 	beq.w	800384a <_printf_float+0xb6>
 80039fa:	f109 0901 	add.w	r9, r9, #1
 80039fe:	e7e8      	b.n	80039d2 <_printf_float+0x23e>
 8003a00:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	dc38      	bgt.n	8003a78 <_printf_float+0x2e4>
 8003a06:	2301      	movs	r3, #1
 8003a08:	4631      	mov	r1, r6
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	4a19      	ldr	r2, [pc, #100]	@ (8003a74 <_printf_float+0x2e0>)
 8003a0e:	47b8      	blx	r7
 8003a10:	3001      	adds	r0, #1
 8003a12:	f43f af1a 	beq.w	800384a <_printf_float+0xb6>
 8003a16:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003a1a:	ea59 0303 	orrs.w	r3, r9, r3
 8003a1e:	d102      	bne.n	8003a26 <_printf_float+0x292>
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	07d9      	lsls	r1, r3, #31
 8003a24:	d5d7      	bpl.n	80039d6 <_printf_float+0x242>
 8003a26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003a2a:	4631      	mov	r1, r6
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	47b8      	blx	r7
 8003a30:	3001      	adds	r0, #1
 8003a32:	f43f af0a 	beq.w	800384a <_printf_float+0xb6>
 8003a36:	f04f 0a00 	mov.w	sl, #0
 8003a3a:	f104 0b1a 	add.w	fp, r4, #26
 8003a3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a40:	425b      	negs	r3, r3
 8003a42:	4553      	cmp	r3, sl
 8003a44:	dc01      	bgt.n	8003a4a <_printf_float+0x2b6>
 8003a46:	464b      	mov	r3, r9
 8003a48:	e793      	b.n	8003972 <_printf_float+0x1de>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	465a      	mov	r2, fp
 8003a4e:	4631      	mov	r1, r6
 8003a50:	4628      	mov	r0, r5
 8003a52:	47b8      	blx	r7
 8003a54:	3001      	adds	r0, #1
 8003a56:	f43f aef8 	beq.w	800384a <_printf_float+0xb6>
 8003a5a:	f10a 0a01 	add.w	sl, sl, #1
 8003a5e:	e7ee      	b.n	8003a3e <_printf_float+0x2aa>
 8003a60:	7fefffff 	.word	0x7fefffff
 8003a64:	0800659e 	.word	0x0800659e
 8003a68:	0800659a 	.word	0x0800659a
 8003a6c:	080065a6 	.word	0x080065a6
 8003a70:	080065a2 	.word	0x080065a2
 8003a74:	080065aa 	.word	0x080065aa
 8003a78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a7a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003a7e:	4553      	cmp	r3, sl
 8003a80:	bfa8      	it	ge
 8003a82:	4653      	movge	r3, sl
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	4699      	mov	r9, r3
 8003a88:	dc36      	bgt.n	8003af8 <_printf_float+0x364>
 8003a8a:	f04f 0b00 	mov.w	fp, #0
 8003a8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a92:	f104 021a 	add.w	r2, r4, #26
 8003a96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a98:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a9a:	eba3 0309 	sub.w	r3, r3, r9
 8003a9e:	455b      	cmp	r3, fp
 8003aa0:	dc31      	bgt.n	8003b06 <_printf_float+0x372>
 8003aa2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003aa4:	459a      	cmp	sl, r3
 8003aa6:	dc3a      	bgt.n	8003b1e <_printf_float+0x38a>
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	07da      	lsls	r2, r3, #31
 8003aac:	d437      	bmi.n	8003b1e <_printf_float+0x38a>
 8003aae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ab0:	ebaa 0903 	sub.w	r9, sl, r3
 8003ab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ab6:	ebaa 0303 	sub.w	r3, sl, r3
 8003aba:	4599      	cmp	r9, r3
 8003abc:	bfa8      	it	ge
 8003abe:	4699      	movge	r9, r3
 8003ac0:	f1b9 0f00 	cmp.w	r9, #0
 8003ac4:	dc33      	bgt.n	8003b2e <_printf_float+0x39a>
 8003ac6:	f04f 0800 	mov.w	r8, #0
 8003aca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ace:	f104 0b1a 	add.w	fp, r4, #26
 8003ad2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ad4:	ebaa 0303 	sub.w	r3, sl, r3
 8003ad8:	eba3 0309 	sub.w	r3, r3, r9
 8003adc:	4543      	cmp	r3, r8
 8003ade:	f77f af7a 	ble.w	80039d6 <_printf_float+0x242>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	465a      	mov	r2, fp
 8003ae6:	4631      	mov	r1, r6
 8003ae8:	4628      	mov	r0, r5
 8003aea:	47b8      	blx	r7
 8003aec:	3001      	adds	r0, #1
 8003aee:	f43f aeac 	beq.w	800384a <_printf_float+0xb6>
 8003af2:	f108 0801 	add.w	r8, r8, #1
 8003af6:	e7ec      	b.n	8003ad2 <_printf_float+0x33e>
 8003af8:	4642      	mov	r2, r8
 8003afa:	4631      	mov	r1, r6
 8003afc:	4628      	mov	r0, r5
 8003afe:	47b8      	blx	r7
 8003b00:	3001      	adds	r0, #1
 8003b02:	d1c2      	bne.n	8003a8a <_printf_float+0x2f6>
 8003b04:	e6a1      	b.n	800384a <_printf_float+0xb6>
 8003b06:	2301      	movs	r3, #1
 8003b08:	4631      	mov	r1, r6
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	920a      	str	r2, [sp, #40]	@ 0x28
 8003b0e:	47b8      	blx	r7
 8003b10:	3001      	adds	r0, #1
 8003b12:	f43f ae9a 	beq.w	800384a <_printf_float+0xb6>
 8003b16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003b18:	f10b 0b01 	add.w	fp, fp, #1
 8003b1c:	e7bb      	b.n	8003a96 <_printf_float+0x302>
 8003b1e:	4631      	mov	r1, r6
 8003b20:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b24:	4628      	mov	r0, r5
 8003b26:	47b8      	blx	r7
 8003b28:	3001      	adds	r0, #1
 8003b2a:	d1c0      	bne.n	8003aae <_printf_float+0x31a>
 8003b2c:	e68d      	b.n	800384a <_printf_float+0xb6>
 8003b2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003b30:	464b      	mov	r3, r9
 8003b32:	4631      	mov	r1, r6
 8003b34:	4628      	mov	r0, r5
 8003b36:	4442      	add	r2, r8
 8003b38:	47b8      	blx	r7
 8003b3a:	3001      	adds	r0, #1
 8003b3c:	d1c3      	bne.n	8003ac6 <_printf_float+0x332>
 8003b3e:	e684      	b.n	800384a <_printf_float+0xb6>
 8003b40:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003b44:	f1ba 0f01 	cmp.w	sl, #1
 8003b48:	dc01      	bgt.n	8003b4e <_printf_float+0x3ba>
 8003b4a:	07db      	lsls	r3, r3, #31
 8003b4c:	d536      	bpl.n	8003bbc <_printf_float+0x428>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	4642      	mov	r2, r8
 8003b52:	4631      	mov	r1, r6
 8003b54:	4628      	mov	r0, r5
 8003b56:	47b8      	blx	r7
 8003b58:	3001      	adds	r0, #1
 8003b5a:	f43f ae76 	beq.w	800384a <_printf_float+0xb6>
 8003b5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b62:	4631      	mov	r1, r6
 8003b64:	4628      	mov	r0, r5
 8003b66:	47b8      	blx	r7
 8003b68:	3001      	adds	r0, #1
 8003b6a:	f43f ae6e 	beq.w	800384a <_printf_float+0xb6>
 8003b6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003b72:	2200      	movs	r2, #0
 8003b74:	2300      	movs	r3, #0
 8003b76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b7a:	f7fc ff15 	bl	80009a8 <__aeabi_dcmpeq>
 8003b7e:	b9c0      	cbnz	r0, 8003bb2 <_printf_float+0x41e>
 8003b80:	4653      	mov	r3, sl
 8003b82:	f108 0201 	add.w	r2, r8, #1
 8003b86:	4631      	mov	r1, r6
 8003b88:	4628      	mov	r0, r5
 8003b8a:	47b8      	blx	r7
 8003b8c:	3001      	adds	r0, #1
 8003b8e:	d10c      	bne.n	8003baa <_printf_float+0x416>
 8003b90:	e65b      	b.n	800384a <_printf_float+0xb6>
 8003b92:	2301      	movs	r3, #1
 8003b94:	465a      	mov	r2, fp
 8003b96:	4631      	mov	r1, r6
 8003b98:	4628      	mov	r0, r5
 8003b9a:	47b8      	blx	r7
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	f43f ae54 	beq.w	800384a <_printf_float+0xb6>
 8003ba2:	f108 0801 	add.w	r8, r8, #1
 8003ba6:	45d0      	cmp	r8, sl
 8003ba8:	dbf3      	blt.n	8003b92 <_printf_float+0x3fe>
 8003baa:	464b      	mov	r3, r9
 8003bac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003bb0:	e6e0      	b.n	8003974 <_printf_float+0x1e0>
 8003bb2:	f04f 0800 	mov.w	r8, #0
 8003bb6:	f104 0b1a 	add.w	fp, r4, #26
 8003bba:	e7f4      	b.n	8003ba6 <_printf_float+0x412>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	4642      	mov	r2, r8
 8003bc0:	e7e1      	b.n	8003b86 <_printf_float+0x3f2>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	464a      	mov	r2, r9
 8003bc6:	4631      	mov	r1, r6
 8003bc8:	4628      	mov	r0, r5
 8003bca:	47b8      	blx	r7
 8003bcc:	3001      	adds	r0, #1
 8003bce:	f43f ae3c 	beq.w	800384a <_printf_float+0xb6>
 8003bd2:	f108 0801 	add.w	r8, r8, #1
 8003bd6:	68e3      	ldr	r3, [r4, #12]
 8003bd8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003bda:	1a5b      	subs	r3, r3, r1
 8003bdc:	4543      	cmp	r3, r8
 8003bde:	dcf0      	bgt.n	8003bc2 <_printf_float+0x42e>
 8003be0:	e6fd      	b.n	80039de <_printf_float+0x24a>
 8003be2:	f04f 0800 	mov.w	r8, #0
 8003be6:	f104 0919 	add.w	r9, r4, #25
 8003bea:	e7f4      	b.n	8003bd6 <_printf_float+0x442>

08003bec <_printf_common>:
 8003bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf0:	4616      	mov	r6, r2
 8003bf2:	4698      	mov	r8, r3
 8003bf4:	688a      	ldr	r2, [r1, #8]
 8003bf6:	690b      	ldr	r3, [r1, #16]
 8003bf8:	4607      	mov	r7, r0
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	bfb8      	it	lt
 8003bfe:	4613      	movlt	r3, r2
 8003c00:	6033      	str	r3, [r6, #0]
 8003c02:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c06:	460c      	mov	r4, r1
 8003c08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c0c:	b10a      	cbz	r2, 8003c12 <_printf_common+0x26>
 8003c0e:	3301      	adds	r3, #1
 8003c10:	6033      	str	r3, [r6, #0]
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	0699      	lsls	r1, r3, #26
 8003c16:	bf42      	ittt	mi
 8003c18:	6833      	ldrmi	r3, [r6, #0]
 8003c1a:	3302      	addmi	r3, #2
 8003c1c:	6033      	strmi	r3, [r6, #0]
 8003c1e:	6825      	ldr	r5, [r4, #0]
 8003c20:	f015 0506 	ands.w	r5, r5, #6
 8003c24:	d106      	bne.n	8003c34 <_printf_common+0x48>
 8003c26:	f104 0a19 	add.w	sl, r4, #25
 8003c2a:	68e3      	ldr	r3, [r4, #12]
 8003c2c:	6832      	ldr	r2, [r6, #0]
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	42ab      	cmp	r3, r5
 8003c32:	dc2b      	bgt.n	8003c8c <_printf_common+0xa0>
 8003c34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c38:	6822      	ldr	r2, [r4, #0]
 8003c3a:	3b00      	subs	r3, #0
 8003c3c:	bf18      	it	ne
 8003c3e:	2301      	movne	r3, #1
 8003c40:	0692      	lsls	r2, r2, #26
 8003c42:	d430      	bmi.n	8003ca6 <_printf_common+0xba>
 8003c44:	4641      	mov	r1, r8
 8003c46:	4638      	mov	r0, r7
 8003c48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c4c:	47c8      	blx	r9
 8003c4e:	3001      	adds	r0, #1
 8003c50:	d023      	beq.n	8003c9a <_printf_common+0xae>
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	6922      	ldr	r2, [r4, #16]
 8003c56:	f003 0306 	and.w	r3, r3, #6
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	bf14      	ite	ne
 8003c5e:	2500      	movne	r5, #0
 8003c60:	6833      	ldreq	r3, [r6, #0]
 8003c62:	f04f 0600 	mov.w	r6, #0
 8003c66:	bf08      	it	eq
 8003c68:	68e5      	ldreq	r5, [r4, #12]
 8003c6a:	f104 041a 	add.w	r4, r4, #26
 8003c6e:	bf08      	it	eq
 8003c70:	1aed      	subeq	r5, r5, r3
 8003c72:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003c76:	bf08      	it	eq
 8003c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	bfc4      	itt	gt
 8003c80:	1a9b      	subgt	r3, r3, r2
 8003c82:	18ed      	addgt	r5, r5, r3
 8003c84:	42b5      	cmp	r5, r6
 8003c86:	d11a      	bne.n	8003cbe <_printf_common+0xd2>
 8003c88:	2000      	movs	r0, #0
 8003c8a:	e008      	b.n	8003c9e <_printf_common+0xb2>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	4652      	mov	r2, sl
 8003c90:	4641      	mov	r1, r8
 8003c92:	4638      	mov	r0, r7
 8003c94:	47c8      	blx	r9
 8003c96:	3001      	adds	r0, #1
 8003c98:	d103      	bne.n	8003ca2 <_printf_common+0xb6>
 8003c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ca2:	3501      	adds	r5, #1
 8003ca4:	e7c1      	b.n	8003c2a <_printf_common+0x3e>
 8003ca6:	2030      	movs	r0, #48	@ 0x30
 8003ca8:	18e1      	adds	r1, r4, r3
 8003caa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003cb4:	4422      	add	r2, r4
 8003cb6:	3302      	adds	r3, #2
 8003cb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003cbc:	e7c2      	b.n	8003c44 <_printf_common+0x58>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	4622      	mov	r2, r4
 8003cc2:	4641      	mov	r1, r8
 8003cc4:	4638      	mov	r0, r7
 8003cc6:	47c8      	blx	r9
 8003cc8:	3001      	adds	r0, #1
 8003cca:	d0e6      	beq.n	8003c9a <_printf_common+0xae>
 8003ccc:	3601      	adds	r6, #1
 8003cce:	e7d9      	b.n	8003c84 <_printf_common+0x98>

08003cd0 <_printf_i>:
 8003cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd4:	7e0f      	ldrb	r7, [r1, #24]
 8003cd6:	4691      	mov	r9, r2
 8003cd8:	2f78      	cmp	r7, #120	@ 0x78
 8003cda:	4680      	mov	r8, r0
 8003cdc:	460c      	mov	r4, r1
 8003cde:	469a      	mov	sl, r3
 8003ce0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ce2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ce6:	d807      	bhi.n	8003cf8 <_printf_i+0x28>
 8003ce8:	2f62      	cmp	r7, #98	@ 0x62
 8003cea:	d80a      	bhi.n	8003d02 <_printf_i+0x32>
 8003cec:	2f00      	cmp	r7, #0
 8003cee:	f000 80d1 	beq.w	8003e94 <_printf_i+0x1c4>
 8003cf2:	2f58      	cmp	r7, #88	@ 0x58
 8003cf4:	f000 80b8 	beq.w	8003e68 <_printf_i+0x198>
 8003cf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d00:	e03a      	b.n	8003d78 <_printf_i+0xa8>
 8003d02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d06:	2b15      	cmp	r3, #21
 8003d08:	d8f6      	bhi.n	8003cf8 <_printf_i+0x28>
 8003d0a:	a101      	add	r1, pc, #4	@ (adr r1, 8003d10 <_printf_i+0x40>)
 8003d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d10:	08003d69 	.word	0x08003d69
 8003d14:	08003d7d 	.word	0x08003d7d
 8003d18:	08003cf9 	.word	0x08003cf9
 8003d1c:	08003cf9 	.word	0x08003cf9
 8003d20:	08003cf9 	.word	0x08003cf9
 8003d24:	08003cf9 	.word	0x08003cf9
 8003d28:	08003d7d 	.word	0x08003d7d
 8003d2c:	08003cf9 	.word	0x08003cf9
 8003d30:	08003cf9 	.word	0x08003cf9
 8003d34:	08003cf9 	.word	0x08003cf9
 8003d38:	08003cf9 	.word	0x08003cf9
 8003d3c:	08003e7b 	.word	0x08003e7b
 8003d40:	08003da7 	.word	0x08003da7
 8003d44:	08003e35 	.word	0x08003e35
 8003d48:	08003cf9 	.word	0x08003cf9
 8003d4c:	08003cf9 	.word	0x08003cf9
 8003d50:	08003e9d 	.word	0x08003e9d
 8003d54:	08003cf9 	.word	0x08003cf9
 8003d58:	08003da7 	.word	0x08003da7
 8003d5c:	08003cf9 	.word	0x08003cf9
 8003d60:	08003cf9 	.word	0x08003cf9
 8003d64:	08003e3d 	.word	0x08003e3d
 8003d68:	6833      	ldr	r3, [r6, #0]
 8003d6a:	1d1a      	adds	r2, r3, #4
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6032      	str	r2, [r6, #0]
 8003d70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e09c      	b.n	8003eb6 <_printf_i+0x1e6>
 8003d7c:	6833      	ldr	r3, [r6, #0]
 8003d7e:	6820      	ldr	r0, [r4, #0]
 8003d80:	1d19      	adds	r1, r3, #4
 8003d82:	6031      	str	r1, [r6, #0]
 8003d84:	0606      	lsls	r6, r0, #24
 8003d86:	d501      	bpl.n	8003d8c <_printf_i+0xbc>
 8003d88:	681d      	ldr	r5, [r3, #0]
 8003d8a:	e003      	b.n	8003d94 <_printf_i+0xc4>
 8003d8c:	0645      	lsls	r5, r0, #25
 8003d8e:	d5fb      	bpl.n	8003d88 <_printf_i+0xb8>
 8003d90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d94:	2d00      	cmp	r5, #0
 8003d96:	da03      	bge.n	8003da0 <_printf_i+0xd0>
 8003d98:	232d      	movs	r3, #45	@ 0x2d
 8003d9a:	426d      	negs	r5, r5
 8003d9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003da0:	230a      	movs	r3, #10
 8003da2:	4858      	ldr	r0, [pc, #352]	@ (8003f04 <_printf_i+0x234>)
 8003da4:	e011      	b.n	8003dca <_printf_i+0xfa>
 8003da6:	6821      	ldr	r1, [r4, #0]
 8003da8:	6833      	ldr	r3, [r6, #0]
 8003daa:	0608      	lsls	r0, r1, #24
 8003dac:	f853 5b04 	ldr.w	r5, [r3], #4
 8003db0:	d402      	bmi.n	8003db8 <_printf_i+0xe8>
 8003db2:	0649      	lsls	r1, r1, #25
 8003db4:	bf48      	it	mi
 8003db6:	b2ad      	uxthmi	r5, r5
 8003db8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003dba:	6033      	str	r3, [r6, #0]
 8003dbc:	bf14      	ite	ne
 8003dbe:	230a      	movne	r3, #10
 8003dc0:	2308      	moveq	r3, #8
 8003dc2:	4850      	ldr	r0, [pc, #320]	@ (8003f04 <_printf_i+0x234>)
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003dca:	6866      	ldr	r6, [r4, #4]
 8003dcc:	2e00      	cmp	r6, #0
 8003dce:	60a6      	str	r6, [r4, #8]
 8003dd0:	db05      	blt.n	8003dde <_printf_i+0x10e>
 8003dd2:	6821      	ldr	r1, [r4, #0]
 8003dd4:	432e      	orrs	r6, r5
 8003dd6:	f021 0104 	bic.w	r1, r1, #4
 8003dda:	6021      	str	r1, [r4, #0]
 8003ddc:	d04b      	beq.n	8003e76 <_printf_i+0x1a6>
 8003dde:	4616      	mov	r6, r2
 8003de0:	fbb5 f1f3 	udiv	r1, r5, r3
 8003de4:	fb03 5711 	mls	r7, r3, r1, r5
 8003de8:	5dc7      	ldrb	r7, [r0, r7]
 8003dea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003dee:	462f      	mov	r7, r5
 8003df0:	42bb      	cmp	r3, r7
 8003df2:	460d      	mov	r5, r1
 8003df4:	d9f4      	bls.n	8003de0 <_printf_i+0x110>
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d10b      	bne.n	8003e12 <_printf_i+0x142>
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	07df      	lsls	r7, r3, #31
 8003dfe:	d508      	bpl.n	8003e12 <_printf_i+0x142>
 8003e00:	6923      	ldr	r3, [r4, #16]
 8003e02:	6861      	ldr	r1, [r4, #4]
 8003e04:	4299      	cmp	r1, r3
 8003e06:	bfde      	ittt	le
 8003e08:	2330      	movle	r3, #48	@ 0x30
 8003e0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e0e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e12:	1b92      	subs	r2, r2, r6
 8003e14:	6122      	str	r2, [r4, #16]
 8003e16:	464b      	mov	r3, r9
 8003e18:	4621      	mov	r1, r4
 8003e1a:	4640      	mov	r0, r8
 8003e1c:	f8cd a000 	str.w	sl, [sp]
 8003e20:	aa03      	add	r2, sp, #12
 8003e22:	f7ff fee3 	bl	8003bec <_printf_common>
 8003e26:	3001      	adds	r0, #1
 8003e28:	d14a      	bne.n	8003ec0 <_printf_i+0x1f0>
 8003e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2e:	b004      	add	sp, #16
 8003e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	f043 0320 	orr.w	r3, r3, #32
 8003e3a:	6023      	str	r3, [r4, #0]
 8003e3c:	2778      	movs	r7, #120	@ 0x78
 8003e3e:	4832      	ldr	r0, [pc, #200]	@ (8003f08 <_printf_i+0x238>)
 8003e40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	6831      	ldr	r1, [r6, #0]
 8003e48:	061f      	lsls	r7, r3, #24
 8003e4a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e4e:	d402      	bmi.n	8003e56 <_printf_i+0x186>
 8003e50:	065f      	lsls	r7, r3, #25
 8003e52:	bf48      	it	mi
 8003e54:	b2ad      	uxthmi	r5, r5
 8003e56:	6031      	str	r1, [r6, #0]
 8003e58:	07d9      	lsls	r1, r3, #31
 8003e5a:	bf44      	itt	mi
 8003e5c:	f043 0320 	orrmi.w	r3, r3, #32
 8003e60:	6023      	strmi	r3, [r4, #0]
 8003e62:	b11d      	cbz	r5, 8003e6c <_printf_i+0x19c>
 8003e64:	2310      	movs	r3, #16
 8003e66:	e7ad      	b.n	8003dc4 <_printf_i+0xf4>
 8003e68:	4826      	ldr	r0, [pc, #152]	@ (8003f04 <_printf_i+0x234>)
 8003e6a:	e7e9      	b.n	8003e40 <_printf_i+0x170>
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	f023 0320 	bic.w	r3, r3, #32
 8003e72:	6023      	str	r3, [r4, #0]
 8003e74:	e7f6      	b.n	8003e64 <_printf_i+0x194>
 8003e76:	4616      	mov	r6, r2
 8003e78:	e7bd      	b.n	8003df6 <_printf_i+0x126>
 8003e7a:	6833      	ldr	r3, [r6, #0]
 8003e7c:	6825      	ldr	r5, [r4, #0]
 8003e7e:	1d18      	adds	r0, r3, #4
 8003e80:	6961      	ldr	r1, [r4, #20]
 8003e82:	6030      	str	r0, [r6, #0]
 8003e84:	062e      	lsls	r6, r5, #24
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	d501      	bpl.n	8003e8e <_printf_i+0x1be>
 8003e8a:	6019      	str	r1, [r3, #0]
 8003e8c:	e002      	b.n	8003e94 <_printf_i+0x1c4>
 8003e8e:	0668      	lsls	r0, r5, #25
 8003e90:	d5fb      	bpl.n	8003e8a <_printf_i+0x1ba>
 8003e92:	8019      	strh	r1, [r3, #0]
 8003e94:	2300      	movs	r3, #0
 8003e96:	4616      	mov	r6, r2
 8003e98:	6123      	str	r3, [r4, #16]
 8003e9a:	e7bc      	b.n	8003e16 <_printf_i+0x146>
 8003e9c:	6833      	ldr	r3, [r6, #0]
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	1d1a      	adds	r2, r3, #4
 8003ea2:	6032      	str	r2, [r6, #0]
 8003ea4:	681e      	ldr	r6, [r3, #0]
 8003ea6:	6862      	ldr	r2, [r4, #4]
 8003ea8:	4630      	mov	r0, r6
 8003eaa:	f000 f9d6 	bl	800425a <memchr>
 8003eae:	b108      	cbz	r0, 8003eb4 <_printf_i+0x1e4>
 8003eb0:	1b80      	subs	r0, r0, r6
 8003eb2:	6060      	str	r0, [r4, #4]
 8003eb4:	6863      	ldr	r3, [r4, #4]
 8003eb6:	6123      	str	r3, [r4, #16]
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ebe:	e7aa      	b.n	8003e16 <_printf_i+0x146>
 8003ec0:	4632      	mov	r2, r6
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	4640      	mov	r0, r8
 8003ec6:	6923      	ldr	r3, [r4, #16]
 8003ec8:	47d0      	blx	sl
 8003eca:	3001      	adds	r0, #1
 8003ecc:	d0ad      	beq.n	8003e2a <_printf_i+0x15a>
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	079b      	lsls	r3, r3, #30
 8003ed2:	d413      	bmi.n	8003efc <_printf_i+0x22c>
 8003ed4:	68e0      	ldr	r0, [r4, #12]
 8003ed6:	9b03      	ldr	r3, [sp, #12]
 8003ed8:	4298      	cmp	r0, r3
 8003eda:	bfb8      	it	lt
 8003edc:	4618      	movlt	r0, r3
 8003ede:	e7a6      	b.n	8003e2e <_printf_i+0x15e>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	4632      	mov	r2, r6
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	4640      	mov	r0, r8
 8003ee8:	47d0      	blx	sl
 8003eea:	3001      	adds	r0, #1
 8003eec:	d09d      	beq.n	8003e2a <_printf_i+0x15a>
 8003eee:	3501      	adds	r5, #1
 8003ef0:	68e3      	ldr	r3, [r4, #12]
 8003ef2:	9903      	ldr	r1, [sp, #12]
 8003ef4:	1a5b      	subs	r3, r3, r1
 8003ef6:	42ab      	cmp	r3, r5
 8003ef8:	dcf2      	bgt.n	8003ee0 <_printf_i+0x210>
 8003efa:	e7eb      	b.n	8003ed4 <_printf_i+0x204>
 8003efc:	2500      	movs	r5, #0
 8003efe:	f104 0619 	add.w	r6, r4, #25
 8003f02:	e7f5      	b.n	8003ef0 <_printf_i+0x220>
 8003f04:	080065ac 	.word	0x080065ac
 8003f08:	080065bd 	.word	0x080065bd

08003f0c <std>:
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	b510      	push	{r4, lr}
 8003f10:	4604      	mov	r4, r0
 8003f12:	e9c0 3300 	strd	r3, r3, [r0]
 8003f16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f1a:	6083      	str	r3, [r0, #8]
 8003f1c:	8181      	strh	r1, [r0, #12]
 8003f1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f20:	81c2      	strh	r2, [r0, #14]
 8003f22:	6183      	str	r3, [r0, #24]
 8003f24:	4619      	mov	r1, r3
 8003f26:	2208      	movs	r2, #8
 8003f28:	305c      	adds	r0, #92	@ 0x5c
 8003f2a:	f000 f916 	bl	800415a <memset>
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f64 <std+0x58>)
 8003f30:	6224      	str	r4, [r4, #32]
 8003f32:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f34:	4b0c      	ldr	r3, [pc, #48]	@ (8003f68 <std+0x5c>)
 8003f36:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f38:	4b0c      	ldr	r3, [pc, #48]	@ (8003f6c <std+0x60>)
 8003f3a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f70 <std+0x64>)
 8003f3e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f40:	4b0c      	ldr	r3, [pc, #48]	@ (8003f74 <std+0x68>)
 8003f42:	429c      	cmp	r4, r3
 8003f44:	d006      	beq.n	8003f54 <std+0x48>
 8003f46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f4a:	4294      	cmp	r4, r2
 8003f4c:	d002      	beq.n	8003f54 <std+0x48>
 8003f4e:	33d0      	adds	r3, #208	@ 0xd0
 8003f50:	429c      	cmp	r4, r3
 8003f52:	d105      	bne.n	8003f60 <std+0x54>
 8003f54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f5c:	f000 b97a 	b.w	8004254 <__retarget_lock_init_recursive>
 8003f60:	bd10      	pop	{r4, pc}
 8003f62:	bf00      	nop
 8003f64:	080040d5 	.word	0x080040d5
 8003f68:	080040f7 	.word	0x080040f7
 8003f6c:	0800412f 	.word	0x0800412f
 8003f70:	08004153 	.word	0x08004153
 8003f74:	200002bc 	.word	0x200002bc

08003f78 <stdio_exit_handler>:
 8003f78:	4a02      	ldr	r2, [pc, #8]	@ (8003f84 <stdio_exit_handler+0xc>)
 8003f7a:	4903      	ldr	r1, [pc, #12]	@ (8003f88 <stdio_exit_handler+0x10>)
 8003f7c:	4803      	ldr	r0, [pc, #12]	@ (8003f8c <stdio_exit_handler+0x14>)
 8003f7e:	f000 b869 	b.w	8004054 <_fwalk_sglue>
 8003f82:	bf00      	nop
 8003f84:	2000000c 	.word	0x2000000c
 8003f88:	08005bd1 	.word	0x08005bd1
 8003f8c:	2000001c 	.word	0x2000001c

08003f90 <cleanup_stdio>:
 8003f90:	6841      	ldr	r1, [r0, #4]
 8003f92:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc4 <cleanup_stdio+0x34>)
 8003f94:	b510      	push	{r4, lr}
 8003f96:	4299      	cmp	r1, r3
 8003f98:	4604      	mov	r4, r0
 8003f9a:	d001      	beq.n	8003fa0 <cleanup_stdio+0x10>
 8003f9c:	f001 fe18 	bl	8005bd0 <_fflush_r>
 8003fa0:	68a1      	ldr	r1, [r4, #8]
 8003fa2:	4b09      	ldr	r3, [pc, #36]	@ (8003fc8 <cleanup_stdio+0x38>)
 8003fa4:	4299      	cmp	r1, r3
 8003fa6:	d002      	beq.n	8003fae <cleanup_stdio+0x1e>
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f001 fe11 	bl	8005bd0 <_fflush_r>
 8003fae:	68e1      	ldr	r1, [r4, #12]
 8003fb0:	4b06      	ldr	r3, [pc, #24]	@ (8003fcc <cleanup_stdio+0x3c>)
 8003fb2:	4299      	cmp	r1, r3
 8003fb4:	d004      	beq.n	8003fc0 <cleanup_stdio+0x30>
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fbc:	f001 be08 	b.w	8005bd0 <_fflush_r>
 8003fc0:	bd10      	pop	{r4, pc}
 8003fc2:	bf00      	nop
 8003fc4:	200002bc 	.word	0x200002bc
 8003fc8:	20000324 	.word	0x20000324
 8003fcc:	2000038c 	.word	0x2000038c

08003fd0 <global_stdio_init.part.0>:
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004000 <global_stdio_init.part.0+0x30>)
 8003fd4:	4c0b      	ldr	r4, [pc, #44]	@ (8004004 <global_stdio_init.part.0+0x34>)
 8003fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8004008 <global_stdio_init.part.0+0x38>)
 8003fd8:	4620      	mov	r0, r4
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	2104      	movs	r1, #4
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f7ff ff94 	bl	8003f0c <std>
 8003fe4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003fe8:	2201      	movs	r2, #1
 8003fea:	2109      	movs	r1, #9
 8003fec:	f7ff ff8e 	bl	8003f0c <std>
 8003ff0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ffa:	2112      	movs	r1, #18
 8003ffc:	f7ff bf86 	b.w	8003f0c <std>
 8004000:	200003f4 	.word	0x200003f4
 8004004:	200002bc 	.word	0x200002bc
 8004008:	08003f79 	.word	0x08003f79

0800400c <__sfp_lock_acquire>:
 800400c:	4801      	ldr	r0, [pc, #4]	@ (8004014 <__sfp_lock_acquire+0x8>)
 800400e:	f000 b922 	b.w	8004256 <__retarget_lock_acquire_recursive>
 8004012:	bf00      	nop
 8004014:	200003fd 	.word	0x200003fd

08004018 <__sfp_lock_release>:
 8004018:	4801      	ldr	r0, [pc, #4]	@ (8004020 <__sfp_lock_release+0x8>)
 800401a:	f000 b91d 	b.w	8004258 <__retarget_lock_release_recursive>
 800401e:	bf00      	nop
 8004020:	200003fd 	.word	0x200003fd

08004024 <__sinit>:
 8004024:	b510      	push	{r4, lr}
 8004026:	4604      	mov	r4, r0
 8004028:	f7ff fff0 	bl	800400c <__sfp_lock_acquire>
 800402c:	6a23      	ldr	r3, [r4, #32]
 800402e:	b11b      	cbz	r3, 8004038 <__sinit+0x14>
 8004030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004034:	f7ff bff0 	b.w	8004018 <__sfp_lock_release>
 8004038:	4b04      	ldr	r3, [pc, #16]	@ (800404c <__sinit+0x28>)
 800403a:	6223      	str	r3, [r4, #32]
 800403c:	4b04      	ldr	r3, [pc, #16]	@ (8004050 <__sinit+0x2c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f5      	bne.n	8004030 <__sinit+0xc>
 8004044:	f7ff ffc4 	bl	8003fd0 <global_stdio_init.part.0>
 8004048:	e7f2      	b.n	8004030 <__sinit+0xc>
 800404a:	bf00      	nop
 800404c:	08003f91 	.word	0x08003f91
 8004050:	200003f4 	.word	0x200003f4

08004054 <_fwalk_sglue>:
 8004054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004058:	4607      	mov	r7, r0
 800405a:	4688      	mov	r8, r1
 800405c:	4614      	mov	r4, r2
 800405e:	2600      	movs	r6, #0
 8004060:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004064:	f1b9 0901 	subs.w	r9, r9, #1
 8004068:	d505      	bpl.n	8004076 <_fwalk_sglue+0x22>
 800406a:	6824      	ldr	r4, [r4, #0]
 800406c:	2c00      	cmp	r4, #0
 800406e:	d1f7      	bne.n	8004060 <_fwalk_sglue+0xc>
 8004070:	4630      	mov	r0, r6
 8004072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004076:	89ab      	ldrh	r3, [r5, #12]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d907      	bls.n	800408c <_fwalk_sglue+0x38>
 800407c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004080:	3301      	adds	r3, #1
 8004082:	d003      	beq.n	800408c <_fwalk_sglue+0x38>
 8004084:	4629      	mov	r1, r5
 8004086:	4638      	mov	r0, r7
 8004088:	47c0      	blx	r8
 800408a:	4306      	orrs	r6, r0
 800408c:	3568      	adds	r5, #104	@ 0x68
 800408e:	e7e9      	b.n	8004064 <_fwalk_sglue+0x10>

08004090 <siprintf>:
 8004090:	b40e      	push	{r1, r2, r3}
 8004092:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004096:	b510      	push	{r4, lr}
 8004098:	2400      	movs	r4, #0
 800409a:	b09d      	sub	sp, #116	@ 0x74
 800409c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800409e:	9002      	str	r0, [sp, #8]
 80040a0:	9006      	str	r0, [sp, #24]
 80040a2:	9107      	str	r1, [sp, #28]
 80040a4:	9104      	str	r1, [sp, #16]
 80040a6:	4809      	ldr	r0, [pc, #36]	@ (80040cc <siprintf+0x3c>)
 80040a8:	4909      	ldr	r1, [pc, #36]	@ (80040d0 <siprintf+0x40>)
 80040aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80040ae:	9105      	str	r1, [sp, #20]
 80040b0:	6800      	ldr	r0, [r0, #0]
 80040b2:	a902      	add	r1, sp, #8
 80040b4:	9301      	str	r3, [sp, #4]
 80040b6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80040b8:	f001 fc0e 	bl	80058d8 <_svfiprintf_r>
 80040bc:	9b02      	ldr	r3, [sp, #8]
 80040be:	701c      	strb	r4, [r3, #0]
 80040c0:	b01d      	add	sp, #116	@ 0x74
 80040c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040c6:	b003      	add	sp, #12
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000018 	.word	0x20000018
 80040d0:	ffff0208 	.word	0xffff0208

080040d4 <__sread>:
 80040d4:	b510      	push	{r4, lr}
 80040d6:	460c      	mov	r4, r1
 80040d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040dc:	f000 f86c 	bl	80041b8 <_read_r>
 80040e0:	2800      	cmp	r0, #0
 80040e2:	bfab      	itete	ge
 80040e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80040e6:	89a3      	ldrhlt	r3, [r4, #12]
 80040e8:	181b      	addge	r3, r3, r0
 80040ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80040ee:	bfac      	ite	ge
 80040f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80040f2:	81a3      	strhlt	r3, [r4, #12]
 80040f4:	bd10      	pop	{r4, pc}

080040f6 <__swrite>:
 80040f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040fa:	461f      	mov	r7, r3
 80040fc:	898b      	ldrh	r3, [r1, #12]
 80040fe:	4605      	mov	r5, r0
 8004100:	05db      	lsls	r3, r3, #23
 8004102:	460c      	mov	r4, r1
 8004104:	4616      	mov	r6, r2
 8004106:	d505      	bpl.n	8004114 <__swrite+0x1e>
 8004108:	2302      	movs	r3, #2
 800410a:	2200      	movs	r2, #0
 800410c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004110:	f000 f840 	bl	8004194 <_lseek_r>
 8004114:	89a3      	ldrh	r3, [r4, #12]
 8004116:	4632      	mov	r2, r6
 8004118:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800411c:	81a3      	strh	r3, [r4, #12]
 800411e:	4628      	mov	r0, r5
 8004120:	463b      	mov	r3, r7
 8004122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800412a:	f000 b857 	b.w	80041dc <_write_r>

0800412e <__sseek>:
 800412e:	b510      	push	{r4, lr}
 8004130:	460c      	mov	r4, r1
 8004132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004136:	f000 f82d 	bl	8004194 <_lseek_r>
 800413a:	1c43      	adds	r3, r0, #1
 800413c:	89a3      	ldrh	r3, [r4, #12]
 800413e:	bf15      	itete	ne
 8004140:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004142:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004146:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800414a:	81a3      	strheq	r3, [r4, #12]
 800414c:	bf18      	it	ne
 800414e:	81a3      	strhne	r3, [r4, #12]
 8004150:	bd10      	pop	{r4, pc}

08004152 <__sclose>:
 8004152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004156:	f000 b80d 	b.w	8004174 <_close_r>

0800415a <memset>:
 800415a:	4603      	mov	r3, r0
 800415c:	4402      	add	r2, r0
 800415e:	4293      	cmp	r3, r2
 8004160:	d100      	bne.n	8004164 <memset+0xa>
 8004162:	4770      	bx	lr
 8004164:	f803 1b01 	strb.w	r1, [r3], #1
 8004168:	e7f9      	b.n	800415e <memset+0x4>
	...

0800416c <_localeconv_r>:
 800416c:	4800      	ldr	r0, [pc, #0]	@ (8004170 <_localeconv_r+0x4>)
 800416e:	4770      	bx	lr
 8004170:	20000158 	.word	0x20000158

08004174 <_close_r>:
 8004174:	b538      	push	{r3, r4, r5, lr}
 8004176:	2300      	movs	r3, #0
 8004178:	4d05      	ldr	r5, [pc, #20]	@ (8004190 <_close_r+0x1c>)
 800417a:	4604      	mov	r4, r0
 800417c:	4608      	mov	r0, r1
 800417e:	602b      	str	r3, [r5, #0]
 8004180:	f7fd fb71 	bl	8001866 <_close>
 8004184:	1c43      	adds	r3, r0, #1
 8004186:	d102      	bne.n	800418e <_close_r+0x1a>
 8004188:	682b      	ldr	r3, [r5, #0]
 800418a:	b103      	cbz	r3, 800418e <_close_r+0x1a>
 800418c:	6023      	str	r3, [r4, #0]
 800418e:	bd38      	pop	{r3, r4, r5, pc}
 8004190:	200003f8 	.word	0x200003f8

08004194 <_lseek_r>:
 8004194:	b538      	push	{r3, r4, r5, lr}
 8004196:	4604      	mov	r4, r0
 8004198:	4608      	mov	r0, r1
 800419a:	4611      	mov	r1, r2
 800419c:	2200      	movs	r2, #0
 800419e:	4d05      	ldr	r5, [pc, #20]	@ (80041b4 <_lseek_r+0x20>)
 80041a0:	602a      	str	r2, [r5, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	f7fd fb83 	bl	80018ae <_lseek>
 80041a8:	1c43      	adds	r3, r0, #1
 80041aa:	d102      	bne.n	80041b2 <_lseek_r+0x1e>
 80041ac:	682b      	ldr	r3, [r5, #0]
 80041ae:	b103      	cbz	r3, 80041b2 <_lseek_r+0x1e>
 80041b0:	6023      	str	r3, [r4, #0]
 80041b2:	bd38      	pop	{r3, r4, r5, pc}
 80041b4:	200003f8 	.word	0x200003f8

080041b8 <_read_r>:
 80041b8:	b538      	push	{r3, r4, r5, lr}
 80041ba:	4604      	mov	r4, r0
 80041bc:	4608      	mov	r0, r1
 80041be:	4611      	mov	r1, r2
 80041c0:	2200      	movs	r2, #0
 80041c2:	4d05      	ldr	r5, [pc, #20]	@ (80041d8 <_read_r+0x20>)
 80041c4:	602a      	str	r2, [r5, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	f7fd fb14 	bl	80017f4 <_read>
 80041cc:	1c43      	adds	r3, r0, #1
 80041ce:	d102      	bne.n	80041d6 <_read_r+0x1e>
 80041d0:	682b      	ldr	r3, [r5, #0]
 80041d2:	b103      	cbz	r3, 80041d6 <_read_r+0x1e>
 80041d4:	6023      	str	r3, [r4, #0]
 80041d6:	bd38      	pop	{r3, r4, r5, pc}
 80041d8:	200003f8 	.word	0x200003f8

080041dc <_write_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	4604      	mov	r4, r0
 80041e0:	4608      	mov	r0, r1
 80041e2:	4611      	mov	r1, r2
 80041e4:	2200      	movs	r2, #0
 80041e6:	4d05      	ldr	r5, [pc, #20]	@ (80041fc <_write_r+0x20>)
 80041e8:	602a      	str	r2, [r5, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	f7fd fb1f 	bl	800182e <_write>
 80041f0:	1c43      	adds	r3, r0, #1
 80041f2:	d102      	bne.n	80041fa <_write_r+0x1e>
 80041f4:	682b      	ldr	r3, [r5, #0]
 80041f6:	b103      	cbz	r3, 80041fa <_write_r+0x1e>
 80041f8:	6023      	str	r3, [r4, #0]
 80041fa:	bd38      	pop	{r3, r4, r5, pc}
 80041fc:	200003f8 	.word	0x200003f8

08004200 <__errno>:
 8004200:	4b01      	ldr	r3, [pc, #4]	@ (8004208 <__errno+0x8>)
 8004202:	6818      	ldr	r0, [r3, #0]
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	20000018 	.word	0x20000018

0800420c <__libc_init_array>:
 800420c:	b570      	push	{r4, r5, r6, lr}
 800420e:	2600      	movs	r6, #0
 8004210:	4d0c      	ldr	r5, [pc, #48]	@ (8004244 <__libc_init_array+0x38>)
 8004212:	4c0d      	ldr	r4, [pc, #52]	@ (8004248 <__libc_init_array+0x3c>)
 8004214:	1b64      	subs	r4, r4, r5
 8004216:	10a4      	asrs	r4, r4, #2
 8004218:	42a6      	cmp	r6, r4
 800421a:	d109      	bne.n	8004230 <__libc_init_array+0x24>
 800421c:	f002 f874 	bl	8006308 <_init>
 8004220:	2600      	movs	r6, #0
 8004222:	4d0a      	ldr	r5, [pc, #40]	@ (800424c <__libc_init_array+0x40>)
 8004224:	4c0a      	ldr	r4, [pc, #40]	@ (8004250 <__libc_init_array+0x44>)
 8004226:	1b64      	subs	r4, r4, r5
 8004228:	10a4      	asrs	r4, r4, #2
 800422a:	42a6      	cmp	r6, r4
 800422c:	d105      	bne.n	800423a <__libc_init_array+0x2e>
 800422e:	bd70      	pop	{r4, r5, r6, pc}
 8004230:	f855 3b04 	ldr.w	r3, [r5], #4
 8004234:	4798      	blx	r3
 8004236:	3601      	adds	r6, #1
 8004238:	e7ee      	b.n	8004218 <__libc_init_array+0xc>
 800423a:	f855 3b04 	ldr.w	r3, [r5], #4
 800423e:	4798      	blx	r3
 8004240:	3601      	adds	r6, #1
 8004242:	e7f2      	b.n	800422a <__libc_init_array+0x1e>
 8004244:	08006914 	.word	0x08006914
 8004248:	08006914 	.word	0x08006914
 800424c:	08006914 	.word	0x08006914
 8004250:	08006918 	.word	0x08006918

08004254 <__retarget_lock_init_recursive>:
 8004254:	4770      	bx	lr

08004256 <__retarget_lock_acquire_recursive>:
 8004256:	4770      	bx	lr

08004258 <__retarget_lock_release_recursive>:
 8004258:	4770      	bx	lr

0800425a <memchr>:
 800425a:	4603      	mov	r3, r0
 800425c:	b510      	push	{r4, lr}
 800425e:	b2c9      	uxtb	r1, r1
 8004260:	4402      	add	r2, r0
 8004262:	4293      	cmp	r3, r2
 8004264:	4618      	mov	r0, r3
 8004266:	d101      	bne.n	800426c <memchr+0x12>
 8004268:	2000      	movs	r0, #0
 800426a:	e003      	b.n	8004274 <memchr+0x1a>
 800426c:	7804      	ldrb	r4, [r0, #0]
 800426e:	3301      	adds	r3, #1
 8004270:	428c      	cmp	r4, r1
 8004272:	d1f6      	bne.n	8004262 <memchr+0x8>
 8004274:	bd10      	pop	{r4, pc}

08004276 <quorem>:
 8004276:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427a:	6903      	ldr	r3, [r0, #16]
 800427c:	690c      	ldr	r4, [r1, #16]
 800427e:	4607      	mov	r7, r0
 8004280:	42a3      	cmp	r3, r4
 8004282:	db7e      	blt.n	8004382 <quorem+0x10c>
 8004284:	3c01      	subs	r4, #1
 8004286:	00a3      	lsls	r3, r4, #2
 8004288:	f100 0514 	add.w	r5, r0, #20
 800428c:	f101 0814 	add.w	r8, r1, #20
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004296:	9301      	str	r3, [sp, #4]
 8004298:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800429c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80042a0:	3301      	adds	r3, #1
 80042a2:	429a      	cmp	r2, r3
 80042a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80042a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80042ac:	d32e      	bcc.n	800430c <quorem+0x96>
 80042ae:	f04f 0a00 	mov.w	sl, #0
 80042b2:	46c4      	mov	ip, r8
 80042b4:	46ae      	mov	lr, r5
 80042b6:	46d3      	mov	fp, sl
 80042b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80042bc:	b298      	uxth	r0, r3
 80042be:	fb06 a000 	mla	r0, r6, r0, sl
 80042c2:	0c1b      	lsrs	r3, r3, #16
 80042c4:	0c02      	lsrs	r2, r0, #16
 80042c6:	fb06 2303 	mla	r3, r6, r3, r2
 80042ca:	f8de 2000 	ldr.w	r2, [lr]
 80042ce:	b280      	uxth	r0, r0
 80042d0:	b292      	uxth	r2, r2
 80042d2:	1a12      	subs	r2, r2, r0
 80042d4:	445a      	add	r2, fp
 80042d6:	f8de 0000 	ldr.w	r0, [lr]
 80042da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80042de:	b29b      	uxth	r3, r3
 80042e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80042e4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80042e8:	b292      	uxth	r2, r2
 80042ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80042ee:	45e1      	cmp	r9, ip
 80042f0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80042f4:	f84e 2b04 	str.w	r2, [lr], #4
 80042f8:	d2de      	bcs.n	80042b8 <quorem+0x42>
 80042fa:	9b00      	ldr	r3, [sp, #0]
 80042fc:	58eb      	ldr	r3, [r5, r3]
 80042fe:	b92b      	cbnz	r3, 800430c <quorem+0x96>
 8004300:	9b01      	ldr	r3, [sp, #4]
 8004302:	3b04      	subs	r3, #4
 8004304:	429d      	cmp	r5, r3
 8004306:	461a      	mov	r2, r3
 8004308:	d32f      	bcc.n	800436a <quorem+0xf4>
 800430a:	613c      	str	r4, [r7, #16]
 800430c:	4638      	mov	r0, r7
 800430e:	f001 f97f 	bl	8005610 <__mcmp>
 8004312:	2800      	cmp	r0, #0
 8004314:	db25      	blt.n	8004362 <quorem+0xec>
 8004316:	4629      	mov	r1, r5
 8004318:	2000      	movs	r0, #0
 800431a:	f858 2b04 	ldr.w	r2, [r8], #4
 800431e:	f8d1 c000 	ldr.w	ip, [r1]
 8004322:	fa1f fe82 	uxth.w	lr, r2
 8004326:	fa1f f38c 	uxth.w	r3, ip
 800432a:	eba3 030e 	sub.w	r3, r3, lr
 800432e:	4403      	add	r3, r0
 8004330:	0c12      	lsrs	r2, r2, #16
 8004332:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004336:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800433a:	b29b      	uxth	r3, r3
 800433c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004340:	45c1      	cmp	r9, r8
 8004342:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004346:	f841 3b04 	str.w	r3, [r1], #4
 800434a:	d2e6      	bcs.n	800431a <quorem+0xa4>
 800434c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004350:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004354:	b922      	cbnz	r2, 8004360 <quorem+0xea>
 8004356:	3b04      	subs	r3, #4
 8004358:	429d      	cmp	r5, r3
 800435a:	461a      	mov	r2, r3
 800435c:	d30b      	bcc.n	8004376 <quorem+0x100>
 800435e:	613c      	str	r4, [r7, #16]
 8004360:	3601      	adds	r6, #1
 8004362:	4630      	mov	r0, r6
 8004364:	b003      	add	sp, #12
 8004366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800436a:	6812      	ldr	r2, [r2, #0]
 800436c:	3b04      	subs	r3, #4
 800436e:	2a00      	cmp	r2, #0
 8004370:	d1cb      	bne.n	800430a <quorem+0x94>
 8004372:	3c01      	subs	r4, #1
 8004374:	e7c6      	b.n	8004304 <quorem+0x8e>
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	3b04      	subs	r3, #4
 800437a:	2a00      	cmp	r2, #0
 800437c:	d1ef      	bne.n	800435e <quorem+0xe8>
 800437e:	3c01      	subs	r4, #1
 8004380:	e7ea      	b.n	8004358 <quorem+0xe2>
 8004382:	2000      	movs	r0, #0
 8004384:	e7ee      	b.n	8004364 <quorem+0xee>
	...

08004388 <_dtoa_r>:
 8004388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438c:	4614      	mov	r4, r2
 800438e:	461d      	mov	r5, r3
 8004390:	69c7      	ldr	r7, [r0, #28]
 8004392:	b097      	sub	sp, #92	@ 0x5c
 8004394:	4681      	mov	r9, r0
 8004396:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800439a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800439c:	b97f      	cbnz	r7, 80043be <_dtoa_r+0x36>
 800439e:	2010      	movs	r0, #16
 80043a0:	f000 fe0e 	bl	8004fc0 <malloc>
 80043a4:	4602      	mov	r2, r0
 80043a6:	f8c9 001c 	str.w	r0, [r9, #28]
 80043aa:	b920      	cbnz	r0, 80043b6 <_dtoa_r+0x2e>
 80043ac:	21ef      	movs	r1, #239	@ 0xef
 80043ae:	4bac      	ldr	r3, [pc, #688]	@ (8004660 <_dtoa_r+0x2d8>)
 80043b0:	48ac      	ldr	r0, [pc, #688]	@ (8004664 <_dtoa_r+0x2dc>)
 80043b2:	f001 fc6d 	bl	8005c90 <__assert_func>
 80043b6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80043ba:	6007      	str	r7, [r0, #0]
 80043bc:	60c7      	str	r7, [r0, #12]
 80043be:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80043c2:	6819      	ldr	r1, [r3, #0]
 80043c4:	b159      	cbz	r1, 80043de <_dtoa_r+0x56>
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	2301      	movs	r3, #1
 80043ca:	4093      	lsls	r3, r2
 80043cc:	604a      	str	r2, [r1, #4]
 80043ce:	608b      	str	r3, [r1, #8]
 80043d0:	4648      	mov	r0, r9
 80043d2:	f000 feeb 	bl	80051ac <_Bfree>
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	1e2b      	subs	r3, r5, #0
 80043e0:	bfaf      	iteee	ge
 80043e2:	2300      	movge	r3, #0
 80043e4:	2201      	movlt	r2, #1
 80043e6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80043ea:	9307      	strlt	r3, [sp, #28]
 80043ec:	bfa8      	it	ge
 80043ee:	6033      	strge	r3, [r6, #0]
 80043f0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80043f4:	4b9c      	ldr	r3, [pc, #624]	@ (8004668 <_dtoa_r+0x2e0>)
 80043f6:	bfb8      	it	lt
 80043f8:	6032      	strlt	r2, [r6, #0]
 80043fa:	ea33 0308 	bics.w	r3, r3, r8
 80043fe:	d112      	bne.n	8004426 <_dtoa_r+0x9e>
 8004400:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004404:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800440c:	4323      	orrs	r3, r4
 800440e:	f000 855e 	beq.w	8004ece <_dtoa_r+0xb46>
 8004412:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004414:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800466c <_dtoa_r+0x2e4>
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 8560 	beq.w	8004ede <_dtoa_r+0xb56>
 800441e:	f10a 0303 	add.w	r3, sl, #3
 8004422:	f000 bd5a 	b.w	8004eda <_dtoa_r+0xb52>
 8004426:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800442a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800442e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004432:	2200      	movs	r2, #0
 8004434:	2300      	movs	r3, #0
 8004436:	f7fc fab7 	bl	80009a8 <__aeabi_dcmpeq>
 800443a:	4607      	mov	r7, r0
 800443c:	b158      	cbz	r0, 8004456 <_dtoa_r+0xce>
 800443e:	2301      	movs	r3, #1
 8004440:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004446:	b113      	cbz	r3, 800444e <_dtoa_r+0xc6>
 8004448:	4b89      	ldr	r3, [pc, #548]	@ (8004670 <_dtoa_r+0x2e8>)
 800444a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8004674 <_dtoa_r+0x2ec>
 8004452:	f000 bd44 	b.w	8004ede <_dtoa_r+0xb56>
 8004456:	ab14      	add	r3, sp, #80	@ 0x50
 8004458:	9301      	str	r3, [sp, #4]
 800445a:	ab15      	add	r3, sp, #84	@ 0x54
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	4648      	mov	r0, r9
 8004460:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004464:	f001 f984 	bl	8005770 <__d2b>
 8004468:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800446c:	9003      	str	r0, [sp, #12]
 800446e:	2e00      	cmp	r6, #0
 8004470:	d078      	beq.n	8004564 <_dtoa_r+0x1dc>
 8004472:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004476:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004478:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800447c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004480:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004484:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004488:	9712      	str	r7, [sp, #72]	@ 0x48
 800448a:	4619      	mov	r1, r3
 800448c:	2200      	movs	r2, #0
 800448e:	4b7a      	ldr	r3, [pc, #488]	@ (8004678 <_dtoa_r+0x2f0>)
 8004490:	f7fb fe6a 	bl	8000168 <__aeabi_dsub>
 8004494:	a36c      	add	r3, pc, #432	@ (adr r3, 8004648 <_dtoa_r+0x2c0>)
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	f7fc f81d 	bl	80004d8 <__aeabi_dmul>
 800449e:	a36c      	add	r3, pc, #432	@ (adr r3, 8004650 <_dtoa_r+0x2c8>)
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	f7fb fe62 	bl	800016c <__adddf3>
 80044a8:	4604      	mov	r4, r0
 80044aa:	4630      	mov	r0, r6
 80044ac:	460d      	mov	r5, r1
 80044ae:	f7fb ffa9 	bl	8000404 <__aeabi_i2d>
 80044b2:	a369      	add	r3, pc, #420	@ (adr r3, 8004658 <_dtoa_r+0x2d0>)
 80044b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b8:	f7fc f80e 	bl	80004d8 <__aeabi_dmul>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4620      	mov	r0, r4
 80044c2:	4629      	mov	r1, r5
 80044c4:	f7fb fe52 	bl	800016c <__adddf3>
 80044c8:	4604      	mov	r4, r0
 80044ca:	460d      	mov	r5, r1
 80044cc:	f7fc fab4 	bl	8000a38 <__aeabi_d2iz>
 80044d0:	2200      	movs	r2, #0
 80044d2:	4607      	mov	r7, r0
 80044d4:	2300      	movs	r3, #0
 80044d6:	4620      	mov	r0, r4
 80044d8:	4629      	mov	r1, r5
 80044da:	f7fc fa6f 	bl	80009bc <__aeabi_dcmplt>
 80044de:	b140      	cbz	r0, 80044f2 <_dtoa_r+0x16a>
 80044e0:	4638      	mov	r0, r7
 80044e2:	f7fb ff8f 	bl	8000404 <__aeabi_i2d>
 80044e6:	4622      	mov	r2, r4
 80044e8:	462b      	mov	r3, r5
 80044ea:	f7fc fa5d 	bl	80009a8 <__aeabi_dcmpeq>
 80044ee:	b900      	cbnz	r0, 80044f2 <_dtoa_r+0x16a>
 80044f0:	3f01      	subs	r7, #1
 80044f2:	2f16      	cmp	r7, #22
 80044f4:	d854      	bhi.n	80045a0 <_dtoa_r+0x218>
 80044f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80044fa:	4b60      	ldr	r3, [pc, #384]	@ (800467c <_dtoa_r+0x2f4>)
 80044fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	f7fc fa5a 	bl	80009bc <__aeabi_dcmplt>
 8004508:	2800      	cmp	r0, #0
 800450a:	d04b      	beq.n	80045a4 <_dtoa_r+0x21c>
 800450c:	2300      	movs	r3, #0
 800450e:	3f01      	subs	r7, #1
 8004510:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004512:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004514:	1b9b      	subs	r3, r3, r6
 8004516:	1e5a      	subs	r2, r3, #1
 8004518:	bf49      	itett	mi
 800451a:	f1c3 0301 	rsbmi	r3, r3, #1
 800451e:	2300      	movpl	r3, #0
 8004520:	9304      	strmi	r3, [sp, #16]
 8004522:	2300      	movmi	r3, #0
 8004524:	9209      	str	r2, [sp, #36]	@ 0x24
 8004526:	bf54      	ite	pl
 8004528:	9304      	strpl	r3, [sp, #16]
 800452a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800452c:	2f00      	cmp	r7, #0
 800452e:	db3b      	blt.n	80045a8 <_dtoa_r+0x220>
 8004530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004532:	970e      	str	r7, [sp, #56]	@ 0x38
 8004534:	443b      	add	r3, r7
 8004536:	9309      	str	r3, [sp, #36]	@ 0x24
 8004538:	2300      	movs	r3, #0
 800453a:	930a      	str	r3, [sp, #40]	@ 0x28
 800453c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800453e:	2b09      	cmp	r3, #9
 8004540:	d865      	bhi.n	800460e <_dtoa_r+0x286>
 8004542:	2b05      	cmp	r3, #5
 8004544:	bfc4      	itt	gt
 8004546:	3b04      	subgt	r3, #4
 8004548:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800454a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800454c:	bfc8      	it	gt
 800454e:	2400      	movgt	r4, #0
 8004550:	f1a3 0302 	sub.w	r3, r3, #2
 8004554:	bfd8      	it	le
 8004556:	2401      	movle	r4, #1
 8004558:	2b03      	cmp	r3, #3
 800455a:	d864      	bhi.n	8004626 <_dtoa_r+0x29e>
 800455c:	e8df f003 	tbb	[pc, r3]
 8004560:	2c385553 	.word	0x2c385553
 8004564:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004568:	441e      	add	r6, r3
 800456a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800456e:	2b20      	cmp	r3, #32
 8004570:	bfc1      	itttt	gt
 8004572:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004576:	fa08 f803 	lslgt.w	r8, r8, r3
 800457a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800457e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004582:	bfd6      	itet	le
 8004584:	f1c3 0320 	rsble	r3, r3, #32
 8004588:	ea48 0003 	orrgt.w	r0, r8, r3
 800458c:	fa04 f003 	lslle.w	r0, r4, r3
 8004590:	f7fb ff28 	bl	80003e4 <__aeabi_ui2d>
 8004594:	2201      	movs	r2, #1
 8004596:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800459a:	3e01      	subs	r6, #1
 800459c:	9212      	str	r2, [sp, #72]	@ 0x48
 800459e:	e774      	b.n	800448a <_dtoa_r+0x102>
 80045a0:	2301      	movs	r3, #1
 80045a2:	e7b5      	b.n	8004510 <_dtoa_r+0x188>
 80045a4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80045a6:	e7b4      	b.n	8004512 <_dtoa_r+0x18a>
 80045a8:	9b04      	ldr	r3, [sp, #16]
 80045aa:	1bdb      	subs	r3, r3, r7
 80045ac:	9304      	str	r3, [sp, #16]
 80045ae:	427b      	negs	r3, r7
 80045b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80045b2:	2300      	movs	r3, #0
 80045b4:	930e      	str	r3, [sp, #56]	@ 0x38
 80045b6:	e7c1      	b.n	800453c <_dtoa_r+0x1b4>
 80045b8:	2301      	movs	r3, #1
 80045ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80045be:	eb07 0b03 	add.w	fp, r7, r3
 80045c2:	f10b 0301 	add.w	r3, fp, #1
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	9308      	str	r3, [sp, #32]
 80045ca:	bfb8      	it	lt
 80045cc:	2301      	movlt	r3, #1
 80045ce:	e006      	b.n	80045de <_dtoa_r+0x256>
 80045d0:	2301      	movs	r3, #1
 80045d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	dd28      	ble.n	800462c <_dtoa_r+0x2a4>
 80045da:	469b      	mov	fp, r3
 80045dc:	9308      	str	r3, [sp, #32]
 80045de:	2100      	movs	r1, #0
 80045e0:	2204      	movs	r2, #4
 80045e2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80045e6:	f102 0514 	add.w	r5, r2, #20
 80045ea:	429d      	cmp	r5, r3
 80045ec:	d926      	bls.n	800463c <_dtoa_r+0x2b4>
 80045ee:	6041      	str	r1, [r0, #4]
 80045f0:	4648      	mov	r0, r9
 80045f2:	f000 fd9b 	bl	800512c <_Balloc>
 80045f6:	4682      	mov	sl, r0
 80045f8:	2800      	cmp	r0, #0
 80045fa:	d143      	bne.n	8004684 <_dtoa_r+0x2fc>
 80045fc:	4602      	mov	r2, r0
 80045fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8004602:	4b1f      	ldr	r3, [pc, #124]	@ (8004680 <_dtoa_r+0x2f8>)
 8004604:	e6d4      	b.n	80043b0 <_dtoa_r+0x28>
 8004606:	2300      	movs	r3, #0
 8004608:	e7e3      	b.n	80045d2 <_dtoa_r+0x24a>
 800460a:	2300      	movs	r3, #0
 800460c:	e7d5      	b.n	80045ba <_dtoa_r+0x232>
 800460e:	2401      	movs	r4, #1
 8004610:	2300      	movs	r3, #0
 8004612:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004614:	9320      	str	r3, [sp, #128]	@ 0x80
 8004616:	f04f 3bff 	mov.w	fp, #4294967295
 800461a:	2200      	movs	r2, #0
 800461c:	2312      	movs	r3, #18
 800461e:	f8cd b020 	str.w	fp, [sp, #32]
 8004622:	9221      	str	r2, [sp, #132]	@ 0x84
 8004624:	e7db      	b.n	80045de <_dtoa_r+0x256>
 8004626:	2301      	movs	r3, #1
 8004628:	930b      	str	r3, [sp, #44]	@ 0x2c
 800462a:	e7f4      	b.n	8004616 <_dtoa_r+0x28e>
 800462c:	f04f 0b01 	mov.w	fp, #1
 8004630:	465b      	mov	r3, fp
 8004632:	f8cd b020 	str.w	fp, [sp, #32]
 8004636:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800463a:	e7d0      	b.n	80045de <_dtoa_r+0x256>
 800463c:	3101      	adds	r1, #1
 800463e:	0052      	lsls	r2, r2, #1
 8004640:	e7d1      	b.n	80045e6 <_dtoa_r+0x25e>
 8004642:	bf00      	nop
 8004644:	f3af 8000 	nop.w
 8004648:	636f4361 	.word	0x636f4361
 800464c:	3fd287a7 	.word	0x3fd287a7
 8004650:	8b60c8b3 	.word	0x8b60c8b3
 8004654:	3fc68a28 	.word	0x3fc68a28
 8004658:	509f79fb 	.word	0x509f79fb
 800465c:	3fd34413 	.word	0x3fd34413
 8004660:	080065db 	.word	0x080065db
 8004664:	080065f2 	.word	0x080065f2
 8004668:	7ff00000 	.word	0x7ff00000
 800466c:	080065d7 	.word	0x080065d7
 8004670:	080065ab 	.word	0x080065ab
 8004674:	080065aa 	.word	0x080065aa
 8004678:	3ff80000 	.word	0x3ff80000
 800467c:	08006740 	.word	0x08006740
 8004680:	0800664a 	.word	0x0800664a
 8004684:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004688:	6018      	str	r0, [r3, #0]
 800468a:	9b08      	ldr	r3, [sp, #32]
 800468c:	2b0e      	cmp	r3, #14
 800468e:	f200 80a1 	bhi.w	80047d4 <_dtoa_r+0x44c>
 8004692:	2c00      	cmp	r4, #0
 8004694:	f000 809e 	beq.w	80047d4 <_dtoa_r+0x44c>
 8004698:	2f00      	cmp	r7, #0
 800469a:	dd33      	ble.n	8004704 <_dtoa_r+0x37c>
 800469c:	4b9c      	ldr	r3, [pc, #624]	@ (8004910 <_dtoa_r+0x588>)
 800469e:	f007 020f 	and.w	r2, r7, #15
 80046a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046a6:	05f8      	lsls	r0, r7, #23
 80046a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046ac:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80046b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80046b4:	d516      	bpl.n	80046e4 <_dtoa_r+0x35c>
 80046b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046ba:	4b96      	ldr	r3, [pc, #600]	@ (8004914 <_dtoa_r+0x58c>)
 80046bc:	2603      	movs	r6, #3
 80046be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80046c2:	f7fc f833 	bl	800072c <__aeabi_ddiv>
 80046c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80046ca:	f004 040f 	and.w	r4, r4, #15
 80046ce:	4d91      	ldr	r5, [pc, #580]	@ (8004914 <_dtoa_r+0x58c>)
 80046d0:	b954      	cbnz	r4, 80046e8 <_dtoa_r+0x360>
 80046d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80046d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046da:	f7fc f827 	bl	800072c <__aeabi_ddiv>
 80046de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80046e2:	e028      	b.n	8004736 <_dtoa_r+0x3ae>
 80046e4:	2602      	movs	r6, #2
 80046e6:	e7f2      	b.n	80046ce <_dtoa_r+0x346>
 80046e8:	07e1      	lsls	r1, r4, #31
 80046ea:	d508      	bpl.n	80046fe <_dtoa_r+0x376>
 80046ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80046f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80046f4:	f7fb fef0 	bl	80004d8 <__aeabi_dmul>
 80046f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80046fc:	3601      	adds	r6, #1
 80046fe:	1064      	asrs	r4, r4, #1
 8004700:	3508      	adds	r5, #8
 8004702:	e7e5      	b.n	80046d0 <_dtoa_r+0x348>
 8004704:	f000 80af 	beq.w	8004866 <_dtoa_r+0x4de>
 8004708:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800470c:	427c      	negs	r4, r7
 800470e:	4b80      	ldr	r3, [pc, #512]	@ (8004910 <_dtoa_r+0x588>)
 8004710:	f004 020f 	and.w	r2, r4, #15
 8004714:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	f7fb fedc 	bl	80004d8 <__aeabi_dmul>
 8004720:	2602      	movs	r6, #2
 8004722:	2300      	movs	r3, #0
 8004724:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004728:	4d7a      	ldr	r5, [pc, #488]	@ (8004914 <_dtoa_r+0x58c>)
 800472a:	1124      	asrs	r4, r4, #4
 800472c:	2c00      	cmp	r4, #0
 800472e:	f040 808f 	bne.w	8004850 <_dtoa_r+0x4c8>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1d3      	bne.n	80046de <_dtoa_r+0x356>
 8004736:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800473a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8094 	beq.w	800486a <_dtoa_r+0x4e2>
 8004742:	2200      	movs	r2, #0
 8004744:	4620      	mov	r0, r4
 8004746:	4629      	mov	r1, r5
 8004748:	4b73      	ldr	r3, [pc, #460]	@ (8004918 <_dtoa_r+0x590>)
 800474a:	f7fc f937 	bl	80009bc <__aeabi_dcmplt>
 800474e:	2800      	cmp	r0, #0
 8004750:	f000 808b 	beq.w	800486a <_dtoa_r+0x4e2>
 8004754:	9b08      	ldr	r3, [sp, #32]
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 8087 	beq.w	800486a <_dtoa_r+0x4e2>
 800475c:	f1bb 0f00 	cmp.w	fp, #0
 8004760:	dd34      	ble.n	80047cc <_dtoa_r+0x444>
 8004762:	4620      	mov	r0, r4
 8004764:	2200      	movs	r2, #0
 8004766:	4629      	mov	r1, r5
 8004768:	4b6c      	ldr	r3, [pc, #432]	@ (800491c <_dtoa_r+0x594>)
 800476a:	f7fb feb5 	bl	80004d8 <__aeabi_dmul>
 800476e:	465c      	mov	r4, fp
 8004770:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004774:	f107 38ff 	add.w	r8, r7, #4294967295
 8004778:	3601      	adds	r6, #1
 800477a:	4630      	mov	r0, r6
 800477c:	f7fb fe42 	bl	8000404 <__aeabi_i2d>
 8004780:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004784:	f7fb fea8 	bl	80004d8 <__aeabi_dmul>
 8004788:	2200      	movs	r2, #0
 800478a:	4b65      	ldr	r3, [pc, #404]	@ (8004920 <_dtoa_r+0x598>)
 800478c:	f7fb fcee 	bl	800016c <__adddf3>
 8004790:	4605      	mov	r5, r0
 8004792:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004796:	2c00      	cmp	r4, #0
 8004798:	d16a      	bne.n	8004870 <_dtoa_r+0x4e8>
 800479a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800479e:	2200      	movs	r2, #0
 80047a0:	4b60      	ldr	r3, [pc, #384]	@ (8004924 <_dtoa_r+0x59c>)
 80047a2:	f7fb fce1 	bl	8000168 <__aeabi_dsub>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80047ae:	462a      	mov	r2, r5
 80047b0:	4633      	mov	r3, r6
 80047b2:	f7fc f921 	bl	80009f8 <__aeabi_dcmpgt>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	f040 8298 	bne.w	8004cec <_dtoa_r+0x964>
 80047bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047c0:	462a      	mov	r2, r5
 80047c2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80047c6:	f7fc f8f9 	bl	80009bc <__aeabi_dcmplt>
 80047ca:	bb38      	cbnz	r0, 800481c <_dtoa_r+0x494>
 80047cc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80047d0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80047d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f2c0 8157 	blt.w	8004a8a <_dtoa_r+0x702>
 80047dc:	2f0e      	cmp	r7, #14
 80047de:	f300 8154 	bgt.w	8004a8a <_dtoa_r+0x702>
 80047e2:	4b4b      	ldr	r3, [pc, #300]	@ (8004910 <_dtoa_r+0x588>)
 80047e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80047e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80047f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f280 80e5 	bge.w	80049c2 <_dtoa_r+0x63a>
 80047f8:	9b08      	ldr	r3, [sp, #32]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f300 80e1 	bgt.w	80049c2 <_dtoa_r+0x63a>
 8004800:	d10c      	bne.n	800481c <_dtoa_r+0x494>
 8004802:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004806:	2200      	movs	r2, #0
 8004808:	4b46      	ldr	r3, [pc, #280]	@ (8004924 <_dtoa_r+0x59c>)
 800480a:	f7fb fe65 	bl	80004d8 <__aeabi_dmul>
 800480e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004812:	f7fc f8e7 	bl	80009e4 <__aeabi_dcmpge>
 8004816:	2800      	cmp	r0, #0
 8004818:	f000 8266 	beq.w	8004ce8 <_dtoa_r+0x960>
 800481c:	2400      	movs	r4, #0
 800481e:	4625      	mov	r5, r4
 8004820:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004822:	4656      	mov	r6, sl
 8004824:	ea6f 0803 	mvn.w	r8, r3
 8004828:	2700      	movs	r7, #0
 800482a:	4621      	mov	r1, r4
 800482c:	4648      	mov	r0, r9
 800482e:	f000 fcbd 	bl	80051ac <_Bfree>
 8004832:	2d00      	cmp	r5, #0
 8004834:	f000 80bd 	beq.w	80049b2 <_dtoa_r+0x62a>
 8004838:	b12f      	cbz	r7, 8004846 <_dtoa_r+0x4be>
 800483a:	42af      	cmp	r7, r5
 800483c:	d003      	beq.n	8004846 <_dtoa_r+0x4be>
 800483e:	4639      	mov	r1, r7
 8004840:	4648      	mov	r0, r9
 8004842:	f000 fcb3 	bl	80051ac <_Bfree>
 8004846:	4629      	mov	r1, r5
 8004848:	4648      	mov	r0, r9
 800484a:	f000 fcaf 	bl	80051ac <_Bfree>
 800484e:	e0b0      	b.n	80049b2 <_dtoa_r+0x62a>
 8004850:	07e2      	lsls	r2, r4, #31
 8004852:	d505      	bpl.n	8004860 <_dtoa_r+0x4d8>
 8004854:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004858:	f7fb fe3e 	bl	80004d8 <__aeabi_dmul>
 800485c:	2301      	movs	r3, #1
 800485e:	3601      	adds	r6, #1
 8004860:	1064      	asrs	r4, r4, #1
 8004862:	3508      	adds	r5, #8
 8004864:	e762      	b.n	800472c <_dtoa_r+0x3a4>
 8004866:	2602      	movs	r6, #2
 8004868:	e765      	b.n	8004736 <_dtoa_r+0x3ae>
 800486a:	46b8      	mov	r8, r7
 800486c:	9c08      	ldr	r4, [sp, #32]
 800486e:	e784      	b.n	800477a <_dtoa_r+0x3f2>
 8004870:	4b27      	ldr	r3, [pc, #156]	@ (8004910 <_dtoa_r+0x588>)
 8004872:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004874:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004878:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800487c:	4454      	add	r4, sl
 800487e:	2900      	cmp	r1, #0
 8004880:	d054      	beq.n	800492c <_dtoa_r+0x5a4>
 8004882:	2000      	movs	r0, #0
 8004884:	4928      	ldr	r1, [pc, #160]	@ (8004928 <_dtoa_r+0x5a0>)
 8004886:	f7fb ff51 	bl	800072c <__aeabi_ddiv>
 800488a:	4633      	mov	r3, r6
 800488c:	462a      	mov	r2, r5
 800488e:	f7fb fc6b 	bl	8000168 <__aeabi_dsub>
 8004892:	4656      	mov	r6, sl
 8004894:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004898:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800489c:	f7fc f8cc 	bl	8000a38 <__aeabi_d2iz>
 80048a0:	4605      	mov	r5, r0
 80048a2:	f7fb fdaf 	bl	8000404 <__aeabi_i2d>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048ae:	f7fb fc5b 	bl	8000168 <__aeabi_dsub>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	3530      	adds	r5, #48	@ 0x30
 80048b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80048bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80048c0:	f806 5b01 	strb.w	r5, [r6], #1
 80048c4:	f7fc f87a 	bl	80009bc <__aeabi_dcmplt>
 80048c8:	2800      	cmp	r0, #0
 80048ca:	d172      	bne.n	80049b2 <_dtoa_r+0x62a>
 80048cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048d0:	2000      	movs	r0, #0
 80048d2:	4911      	ldr	r1, [pc, #68]	@ (8004918 <_dtoa_r+0x590>)
 80048d4:	f7fb fc48 	bl	8000168 <__aeabi_dsub>
 80048d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80048dc:	f7fc f86e 	bl	80009bc <__aeabi_dcmplt>
 80048e0:	2800      	cmp	r0, #0
 80048e2:	f040 80b4 	bne.w	8004a4e <_dtoa_r+0x6c6>
 80048e6:	42a6      	cmp	r6, r4
 80048e8:	f43f af70 	beq.w	80047cc <_dtoa_r+0x444>
 80048ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80048f0:	2200      	movs	r2, #0
 80048f2:	4b0a      	ldr	r3, [pc, #40]	@ (800491c <_dtoa_r+0x594>)
 80048f4:	f7fb fdf0 	bl	80004d8 <__aeabi_dmul>
 80048f8:	2200      	movs	r2, #0
 80048fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80048fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004902:	4b06      	ldr	r3, [pc, #24]	@ (800491c <_dtoa_r+0x594>)
 8004904:	f7fb fde8 	bl	80004d8 <__aeabi_dmul>
 8004908:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800490c:	e7c4      	b.n	8004898 <_dtoa_r+0x510>
 800490e:	bf00      	nop
 8004910:	08006740 	.word	0x08006740
 8004914:	08006718 	.word	0x08006718
 8004918:	3ff00000 	.word	0x3ff00000
 800491c:	40240000 	.word	0x40240000
 8004920:	401c0000 	.word	0x401c0000
 8004924:	40140000 	.word	0x40140000
 8004928:	3fe00000 	.word	0x3fe00000
 800492c:	4631      	mov	r1, r6
 800492e:	4628      	mov	r0, r5
 8004930:	f7fb fdd2 	bl	80004d8 <__aeabi_dmul>
 8004934:	4656      	mov	r6, sl
 8004936:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800493a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800493c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004940:	f7fc f87a 	bl	8000a38 <__aeabi_d2iz>
 8004944:	4605      	mov	r5, r0
 8004946:	f7fb fd5d 	bl	8000404 <__aeabi_i2d>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004952:	f7fb fc09 	bl	8000168 <__aeabi_dsub>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	3530      	adds	r5, #48	@ 0x30
 800495c:	f806 5b01 	strb.w	r5, [r6], #1
 8004960:	42a6      	cmp	r6, r4
 8004962:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	d124      	bne.n	80049b6 <_dtoa_r+0x62e>
 800496c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004970:	4bae      	ldr	r3, [pc, #696]	@ (8004c2c <_dtoa_r+0x8a4>)
 8004972:	f7fb fbfb 	bl	800016c <__adddf3>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800497e:	f7fc f83b 	bl	80009f8 <__aeabi_dcmpgt>
 8004982:	2800      	cmp	r0, #0
 8004984:	d163      	bne.n	8004a4e <_dtoa_r+0x6c6>
 8004986:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800498a:	2000      	movs	r0, #0
 800498c:	49a7      	ldr	r1, [pc, #668]	@ (8004c2c <_dtoa_r+0x8a4>)
 800498e:	f7fb fbeb 	bl	8000168 <__aeabi_dsub>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800499a:	f7fc f80f 	bl	80009bc <__aeabi_dcmplt>
 800499e:	2800      	cmp	r0, #0
 80049a0:	f43f af14 	beq.w	80047cc <_dtoa_r+0x444>
 80049a4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80049a6:	1e73      	subs	r3, r6, #1
 80049a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80049aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80049ae:	2b30      	cmp	r3, #48	@ 0x30
 80049b0:	d0f8      	beq.n	80049a4 <_dtoa_r+0x61c>
 80049b2:	4647      	mov	r7, r8
 80049b4:	e03b      	b.n	8004a2e <_dtoa_r+0x6a6>
 80049b6:	4b9e      	ldr	r3, [pc, #632]	@ (8004c30 <_dtoa_r+0x8a8>)
 80049b8:	f7fb fd8e 	bl	80004d8 <__aeabi_dmul>
 80049bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80049c0:	e7bc      	b.n	800493c <_dtoa_r+0x5b4>
 80049c2:	4656      	mov	r6, sl
 80049c4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80049c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049cc:	4620      	mov	r0, r4
 80049ce:	4629      	mov	r1, r5
 80049d0:	f7fb feac 	bl	800072c <__aeabi_ddiv>
 80049d4:	f7fc f830 	bl	8000a38 <__aeabi_d2iz>
 80049d8:	4680      	mov	r8, r0
 80049da:	f7fb fd13 	bl	8000404 <__aeabi_i2d>
 80049de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049e2:	f7fb fd79 	bl	80004d8 <__aeabi_dmul>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4620      	mov	r0, r4
 80049ec:	4629      	mov	r1, r5
 80049ee:	f7fb fbbb 	bl	8000168 <__aeabi_dsub>
 80049f2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80049f6:	9d08      	ldr	r5, [sp, #32]
 80049f8:	f806 4b01 	strb.w	r4, [r6], #1
 80049fc:	eba6 040a 	sub.w	r4, r6, sl
 8004a00:	42a5      	cmp	r5, r4
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	d133      	bne.n	8004a70 <_dtoa_r+0x6e8>
 8004a08:	f7fb fbb0 	bl	800016c <__adddf3>
 8004a0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a10:	4604      	mov	r4, r0
 8004a12:	460d      	mov	r5, r1
 8004a14:	f7fb fff0 	bl	80009f8 <__aeabi_dcmpgt>
 8004a18:	b9c0      	cbnz	r0, 8004a4c <_dtoa_r+0x6c4>
 8004a1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a1e:	4620      	mov	r0, r4
 8004a20:	4629      	mov	r1, r5
 8004a22:	f7fb ffc1 	bl	80009a8 <__aeabi_dcmpeq>
 8004a26:	b110      	cbz	r0, 8004a2e <_dtoa_r+0x6a6>
 8004a28:	f018 0f01 	tst.w	r8, #1
 8004a2c:	d10e      	bne.n	8004a4c <_dtoa_r+0x6c4>
 8004a2e:	4648      	mov	r0, r9
 8004a30:	9903      	ldr	r1, [sp, #12]
 8004a32:	f000 fbbb 	bl	80051ac <_Bfree>
 8004a36:	2300      	movs	r3, #0
 8004a38:	7033      	strb	r3, [r6, #0]
 8004a3a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004a3c:	3701      	adds	r7, #1
 8004a3e:	601f      	str	r7, [r3, #0]
 8004a40:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 824b 	beq.w	8004ede <_dtoa_r+0xb56>
 8004a48:	601e      	str	r6, [r3, #0]
 8004a4a:	e248      	b.n	8004ede <_dtoa_r+0xb56>
 8004a4c:	46b8      	mov	r8, r7
 8004a4e:	4633      	mov	r3, r6
 8004a50:	461e      	mov	r6, r3
 8004a52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a56:	2a39      	cmp	r2, #57	@ 0x39
 8004a58:	d106      	bne.n	8004a68 <_dtoa_r+0x6e0>
 8004a5a:	459a      	cmp	sl, r3
 8004a5c:	d1f8      	bne.n	8004a50 <_dtoa_r+0x6c8>
 8004a5e:	2230      	movs	r2, #48	@ 0x30
 8004a60:	f108 0801 	add.w	r8, r8, #1
 8004a64:	f88a 2000 	strb.w	r2, [sl]
 8004a68:	781a      	ldrb	r2, [r3, #0]
 8004a6a:	3201      	adds	r2, #1
 8004a6c:	701a      	strb	r2, [r3, #0]
 8004a6e:	e7a0      	b.n	80049b2 <_dtoa_r+0x62a>
 8004a70:	2200      	movs	r2, #0
 8004a72:	4b6f      	ldr	r3, [pc, #444]	@ (8004c30 <_dtoa_r+0x8a8>)
 8004a74:	f7fb fd30 	bl	80004d8 <__aeabi_dmul>
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	460d      	mov	r5, r1
 8004a80:	f7fb ff92 	bl	80009a8 <__aeabi_dcmpeq>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d09f      	beq.n	80049c8 <_dtoa_r+0x640>
 8004a88:	e7d1      	b.n	8004a2e <_dtoa_r+0x6a6>
 8004a8a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004a8c:	2a00      	cmp	r2, #0
 8004a8e:	f000 80ea 	beq.w	8004c66 <_dtoa_r+0x8de>
 8004a92:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004a94:	2a01      	cmp	r2, #1
 8004a96:	f300 80cd 	bgt.w	8004c34 <_dtoa_r+0x8ac>
 8004a9a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004a9c:	2a00      	cmp	r2, #0
 8004a9e:	f000 80c1 	beq.w	8004c24 <_dtoa_r+0x89c>
 8004aa2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004aa6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004aa8:	9e04      	ldr	r6, [sp, #16]
 8004aaa:	9a04      	ldr	r2, [sp, #16]
 8004aac:	2101      	movs	r1, #1
 8004aae:	441a      	add	r2, r3
 8004ab0:	9204      	str	r2, [sp, #16]
 8004ab2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ab4:	4648      	mov	r0, r9
 8004ab6:	441a      	add	r2, r3
 8004ab8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004aba:	f000 fc2b 	bl	8005314 <__i2b>
 8004abe:	4605      	mov	r5, r0
 8004ac0:	b166      	cbz	r6, 8004adc <_dtoa_r+0x754>
 8004ac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	dd09      	ble.n	8004adc <_dtoa_r+0x754>
 8004ac8:	42b3      	cmp	r3, r6
 8004aca:	bfa8      	it	ge
 8004acc:	4633      	movge	r3, r6
 8004ace:	9a04      	ldr	r2, [sp, #16]
 8004ad0:	1af6      	subs	r6, r6, r3
 8004ad2:	1ad2      	subs	r2, r2, r3
 8004ad4:	9204      	str	r2, [sp, #16]
 8004ad6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	9309      	str	r3, [sp, #36]	@ 0x24
 8004adc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ade:	b30b      	cbz	r3, 8004b24 <_dtoa_r+0x79c>
 8004ae0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 80c6 	beq.w	8004c74 <_dtoa_r+0x8ec>
 8004ae8:	2c00      	cmp	r4, #0
 8004aea:	f000 80c0 	beq.w	8004c6e <_dtoa_r+0x8e6>
 8004aee:	4629      	mov	r1, r5
 8004af0:	4622      	mov	r2, r4
 8004af2:	4648      	mov	r0, r9
 8004af4:	f000 fcc6 	bl	8005484 <__pow5mult>
 8004af8:	9a03      	ldr	r2, [sp, #12]
 8004afa:	4601      	mov	r1, r0
 8004afc:	4605      	mov	r5, r0
 8004afe:	4648      	mov	r0, r9
 8004b00:	f000 fc1e 	bl	8005340 <__multiply>
 8004b04:	9903      	ldr	r1, [sp, #12]
 8004b06:	4680      	mov	r8, r0
 8004b08:	4648      	mov	r0, r9
 8004b0a:	f000 fb4f 	bl	80051ac <_Bfree>
 8004b0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b10:	1b1b      	subs	r3, r3, r4
 8004b12:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b14:	f000 80b1 	beq.w	8004c7a <_dtoa_r+0x8f2>
 8004b18:	4641      	mov	r1, r8
 8004b1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004b1c:	4648      	mov	r0, r9
 8004b1e:	f000 fcb1 	bl	8005484 <__pow5mult>
 8004b22:	9003      	str	r0, [sp, #12]
 8004b24:	2101      	movs	r1, #1
 8004b26:	4648      	mov	r0, r9
 8004b28:	f000 fbf4 	bl	8005314 <__i2b>
 8004b2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b2e:	4604      	mov	r4, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 81d8 	beq.w	8004ee6 <_dtoa_r+0xb5e>
 8004b36:	461a      	mov	r2, r3
 8004b38:	4601      	mov	r1, r0
 8004b3a:	4648      	mov	r0, r9
 8004b3c:	f000 fca2 	bl	8005484 <__pow5mult>
 8004b40:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b42:	4604      	mov	r4, r0
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	f300 809f 	bgt.w	8004c88 <_dtoa_r+0x900>
 8004b4a:	9b06      	ldr	r3, [sp, #24]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f040 8097 	bne.w	8004c80 <_dtoa_r+0x8f8>
 8004b52:	9b07      	ldr	r3, [sp, #28]
 8004b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f040 8093 	bne.w	8004c84 <_dtoa_r+0x8fc>
 8004b5e:	9b07      	ldr	r3, [sp, #28]
 8004b60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b64:	0d1b      	lsrs	r3, r3, #20
 8004b66:	051b      	lsls	r3, r3, #20
 8004b68:	b133      	cbz	r3, 8004b78 <_dtoa_r+0x7f0>
 8004b6a:	9b04      	ldr	r3, [sp, #16]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	9304      	str	r3, [sp, #16]
 8004b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b72:	3301      	adds	r3, #1
 8004b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b76:	2301      	movs	r3, #1
 8004b78:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 81b8 	beq.w	8004ef2 <_dtoa_r+0xb6a>
 8004b82:	6923      	ldr	r3, [r4, #16]
 8004b84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004b88:	6918      	ldr	r0, [r3, #16]
 8004b8a:	f000 fb77 	bl	800527c <__hi0bits>
 8004b8e:	f1c0 0020 	rsb	r0, r0, #32
 8004b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b94:	4418      	add	r0, r3
 8004b96:	f010 001f 	ands.w	r0, r0, #31
 8004b9a:	f000 8082 	beq.w	8004ca2 <_dtoa_r+0x91a>
 8004b9e:	f1c0 0320 	rsb	r3, r0, #32
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	dd73      	ble.n	8004c8e <_dtoa_r+0x906>
 8004ba6:	9b04      	ldr	r3, [sp, #16]
 8004ba8:	f1c0 001c 	rsb	r0, r0, #28
 8004bac:	4403      	add	r3, r0
 8004bae:	9304      	str	r3, [sp, #16]
 8004bb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bb2:	4406      	add	r6, r0
 8004bb4:	4403      	add	r3, r0
 8004bb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bb8:	9b04      	ldr	r3, [sp, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	dd05      	ble.n	8004bca <_dtoa_r+0x842>
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	4648      	mov	r0, r9
 8004bc2:	9903      	ldr	r1, [sp, #12]
 8004bc4:	f000 fcb8 	bl	8005538 <__lshift>
 8004bc8:	9003      	str	r0, [sp, #12]
 8004bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	dd05      	ble.n	8004bdc <_dtoa_r+0x854>
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	4648      	mov	r0, r9
 8004bd6:	f000 fcaf 	bl	8005538 <__lshift>
 8004bda:	4604      	mov	r4, r0
 8004bdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d061      	beq.n	8004ca6 <_dtoa_r+0x91e>
 8004be2:	4621      	mov	r1, r4
 8004be4:	9803      	ldr	r0, [sp, #12]
 8004be6:	f000 fd13 	bl	8005610 <__mcmp>
 8004bea:	2800      	cmp	r0, #0
 8004bec:	da5b      	bge.n	8004ca6 <_dtoa_r+0x91e>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	220a      	movs	r2, #10
 8004bf2:	4648      	mov	r0, r9
 8004bf4:	9903      	ldr	r1, [sp, #12]
 8004bf6:	f000 fafb 	bl	80051f0 <__multadd>
 8004bfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004bfc:	f107 38ff 	add.w	r8, r7, #4294967295
 8004c00:	9003      	str	r0, [sp, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 8177 	beq.w	8004ef6 <_dtoa_r+0xb6e>
 8004c08:	4629      	mov	r1, r5
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	220a      	movs	r2, #10
 8004c0e:	4648      	mov	r0, r9
 8004c10:	f000 faee 	bl	80051f0 <__multadd>
 8004c14:	f1bb 0f00 	cmp.w	fp, #0
 8004c18:	4605      	mov	r5, r0
 8004c1a:	dc6f      	bgt.n	8004cfc <_dtoa_r+0x974>
 8004c1c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	dc49      	bgt.n	8004cb6 <_dtoa_r+0x92e>
 8004c22:	e06b      	b.n	8004cfc <_dtoa_r+0x974>
 8004c24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004c26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004c2a:	e73c      	b.n	8004aa6 <_dtoa_r+0x71e>
 8004c2c:	3fe00000 	.word	0x3fe00000
 8004c30:	40240000 	.word	0x40240000
 8004c34:	9b08      	ldr	r3, [sp, #32]
 8004c36:	1e5c      	subs	r4, r3, #1
 8004c38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c3a:	42a3      	cmp	r3, r4
 8004c3c:	db09      	blt.n	8004c52 <_dtoa_r+0x8ca>
 8004c3e:	1b1c      	subs	r4, r3, r4
 8004c40:	9b08      	ldr	r3, [sp, #32]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f6bf af30 	bge.w	8004aa8 <_dtoa_r+0x720>
 8004c48:	9b04      	ldr	r3, [sp, #16]
 8004c4a:	9a08      	ldr	r2, [sp, #32]
 8004c4c:	1a9e      	subs	r6, r3, r2
 8004c4e:	2300      	movs	r3, #0
 8004c50:	e72b      	b.n	8004aaa <_dtoa_r+0x722>
 8004c52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c56:	1ae3      	subs	r3, r4, r3
 8004c58:	441a      	add	r2, r3
 8004c5a:	940a      	str	r4, [sp, #40]	@ 0x28
 8004c5c:	9e04      	ldr	r6, [sp, #16]
 8004c5e:	2400      	movs	r4, #0
 8004c60:	9b08      	ldr	r3, [sp, #32]
 8004c62:	920e      	str	r2, [sp, #56]	@ 0x38
 8004c64:	e721      	b.n	8004aaa <_dtoa_r+0x722>
 8004c66:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004c68:	9e04      	ldr	r6, [sp, #16]
 8004c6a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004c6c:	e728      	b.n	8004ac0 <_dtoa_r+0x738>
 8004c6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004c72:	e751      	b.n	8004b18 <_dtoa_r+0x790>
 8004c74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c76:	9903      	ldr	r1, [sp, #12]
 8004c78:	e750      	b.n	8004b1c <_dtoa_r+0x794>
 8004c7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c7e:	e751      	b.n	8004b24 <_dtoa_r+0x79c>
 8004c80:	2300      	movs	r3, #0
 8004c82:	e779      	b.n	8004b78 <_dtoa_r+0x7f0>
 8004c84:	9b06      	ldr	r3, [sp, #24]
 8004c86:	e777      	b.n	8004b78 <_dtoa_r+0x7f0>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c8c:	e779      	b.n	8004b82 <_dtoa_r+0x7fa>
 8004c8e:	d093      	beq.n	8004bb8 <_dtoa_r+0x830>
 8004c90:	9a04      	ldr	r2, [sp, #16]
 8004c92:	331c      	adds	r3, #28
 8004c94:	441a      	add	r2, r3
 8004c96:	9204      	str	r2, [sp, #16]
 8004c98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c9a:	441e      	add	r6, r3
 8004c9c:	441a      	add	r2, r3
 8004c9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ca0:	e78a      	b.n	8004bb8 <_dtoa_r+0x830>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	e7f4      	b.n	8004c90 <_dtoa_r+0x908>
 8004ca6:	9b08      	ldr	r3, [sp, #32]
 8004ca8:	46b8      	mov	r8, r7
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	dc20      	bgt.n	8004cf0 <_dtoa_r+0x968>
 8004cae:	469b      	mov	fp, r3
 8004cb0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	dd1e      	ble.n	8004cf4 <_dtoa_r+0x96c>
 8004cb6:	f1bb 0f00 	cmp.w	fp, #0
 8004cba:	f47f adb1 	bne.w	8004820 <_dtoa_r+0x498>
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	465b      	mov	r3, fp
 8004cc2:	2205      	movs	r2, #5
 8004cc4:	4648      	mov	r0, r9
 8004cc6:	f000 fa93 	bl	80051f0 <__multadd>
 8004cca:	4601      	mov	r1, r0
 8004ccc:	4604      	mov	r4, r0
 8004cce:	9803      	ldr	r0, [sp, #12]
 8004cd0:	f000 fc9e 	bl	8005610 <__mcmp>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	f77f ada3 	ble.w	8004820 <_dtoa_r+0x498>
 8004cda:	4656      	mov	r6, sl
 8004cdc:	2331      	movs	r3, #49	@ 0x31
 8004cde:	f108 0801 	add.w	r8, r8, #1
 8004ce2:	f806 3b01 	strb.w	r3, [r6], #1
 8004ce6:	e59f      	b.n	8004828 <_dtoa_r+0x4a0>
 8004ce8:	46b8      	mov	r8, r7
 8004cea:	9c08      	ldr	r4, [sp, #32]
 8004cec:	4625      	mov	r5, r4
 8004cee:	e7f4      	b.n	8004cda <_dtoa_r+0x952>
 8004cf0:	f8dd b020 	ldr.w	fp, [sp, #32]
 8004cf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 8101 	beq.w	8004efe <_dtoa_r+0xb76>
 8004cfc:	2e00      	cmp	r6, #0
 8004cfe:	dd05      	ble.n	8004d0c <_dtoa_r+0x984>
 8004d00:	4629      	mov	r1, r5
 8004d02:	4632      	mov	r2, r6
 8004d04:	4648      	mov	r0, r9
 8004d06:	f000 fc17 	bl	8005538 <__lshift>
 8004d0a:	4605      	mov	r5, r0
 8004d0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d05c      	beq.n	8004dcc <_dtoa_r+0xa44>
 8004d12:	4648      	mov	r0, r9
 8004d14:	6869      	ldr	r1, [r5, #4]
 8004d16:	f000 fa09 	bl	800512c <_Balloc>
 8004d1a:	4606      	mov	r6, r0
 8004d1c:	b928      	cbnz	r0, 8004d2a <_dtoa_r+0x9a2>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004d24:	4b80      	ldr	r3, [pc, #512]	@ (8004f28 <_dtoa_r+0xba0>)
 8004d26:	f7ff bb43 	b.w	80043b0 <_dtoa_r+0x28>
 8004d2a:	692a      	ldr	r2, [r5, #16]
 8004d2c:	f105 010c 	add.w	r1, r5, #12
 8004d30:	3202      	adds	r2, #2
 8004d32:	0092      	lsls	r2, r2, #2
 8004d34:	300c      	adds	r0, #12
 8004d36:	f000 ff9d 	bl	8005c74 <memcpy>
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	4631      	mov	r1, r6
 8004d3e:	4648      	mov	r0, r9
 8004d40:	f000 fbfa 	bl	8005538 <__lshift>
 8004d44:	462f      	mov	r7, r5
 8004d46:	4605      	mov	r5, r0
 8004d48:	f10a 0301 	add.w	r3, sl, #1
 8004d4c:	9304      	str	r3, [sp, #16]
 8004d4e:	eb0a 030b 	add.w	r3, sl, fp
 8004d52:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d54:	9b06      	ldr	r3, [sp, #24]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d5c:	9b04      	ldr	r3, [sp, #16]
 8004d5e:	4621      	mov	r1, r4
 8004d60:	9803      	ldr	r0, [sp, #12]
 8004d62:	f103 3bff 	add.w	fp, r3, #4294967295
 8004d66:	f7ff fa86 	bl	8004276 <quorem>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	4639      	mov	r1, r7
 8004d6e:	3330      	adds	r3, #48	@ 0x30
 8004d70:	9006      	str	r0, [sp, #24]
 8004d72:	9803      	ldr	r0, [sp, #12]
 8004d74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d76:	f000 fc4b 	bl	8005610 <__mcmp>
 8004d7a:	462a      	mov	r2, r5
 8004d7c:	9008      	str	r0, [sp, #32]
 8004d7e:	4621      	mov	r1, r4
 8004d80:	4648      	mov	r0, r9
 8004d82:	f000 fc61 	bl	8005648 <__mdiff>
 8004d86:	68c2      	ldr	r2, [r0, #12]
 8004d88:	4606      	mov	r6, r0
 8004d8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d8c:	bb02      	cbnz	r2, 8004dd0 <_dtoa_r+0xa48>
 8004d8e:	4601      	mov	r1, r0
 8004d90:	9803      	ldr	r0, [sp, #12]
 8004d92:	f000 fc3d 	bl	8005610 <__mcmp>
 8004d96:	4602      	mov	r2, r0
 8004d98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	4648      	mov	r0, r9
 8004d9e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8004da2:	f000 fa03 	bl	80051ac <_Bfree>
 8004da6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004da8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004daa:	9e04      	ldr	r6, [sp, #16]
 8004dac:	ea42 0103 	orr.w	r1, r2, r3
 8004db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004db2:	4319      	orrs	r1, r3
 8004db4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004db6:	d10d      	bne.n	8004dd4 <_dtoa_r+0xa4c>
 8004db8:	2b39      	cmp	r3, #57	@ 0x39
 8004dba:	d027      	beq.n	8004e0c <_dtoa_r+0xa84>
 8004dbc:	9a08      	ldr	r2, [sp, #32]
 8004dbe:	2a00      	cmp	r2, #0
 8004dc0:	dd01      	ble.n	8004dc6 <_dtoa_r+0xa3e>
 8004dc2:	9b06      	ldr	r3, [sp, #24]
 8004dc4:	3331      	adds	r3, #49	@ 0x31
 8004dc6:	f88b 3000 	strb.w	r3, [fp]
 8004dca:	e52e      	b.n	800482a <_dtoa_r+0x4a2>
 8004dcc:	4628      	mov	r0, r5
 8004dce:	e7b9      	b.n	8004d44 <_dtoa_r+0x9bc>
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	e7e2      	b.n	8004d9a <_dtoa_r+0xa12>
 8004dd4:	9908      	ldr	r1, [sp, #32]
 8004dd6:	2900      	cmp	r1, #0
 8004dd8:	db04      	blt.n	8004de4 <_dtoa_r+0xa5c>
 8004dda:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8004ddc:	4301      	orrs	r1, r0
 8004dde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004de0:	4301      	orrs	r1, r0
 8004de2:	d120      	bne.n	8004e26 <_dtoa_r+0xa9e>
 8004de4:	2a00      	cmp	r2, #0
 8004de6:	ddee      	ble.n	8004dc6 <_dtoa_r+0xa3e>
 8004de8:	2201      	movs	r2, #1
 8004dea:	9903      	ldr	r1, [sp, #12]
 8004dec:	4648      	mov	r0, r9
 8004dee:	9304      	str	r3, [sp, #16]
 8004df0:	f000 fba2 	bl	8005538 <__lshift>
 8004df4:	4621      	mov	r1, r4
 8004df6:	9003      	str	r0, [sp, #12]
 8004df8:	f000 fc0a 	bl	8005610 <__mcmp>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	9b04      	ldr	r3, [sp, #16]
 8004e00:	dc02      	bgt.n	8004e08 <_dtoa_r+0xa80>
 8004e02:	d1e0      	bne.n	8004dc6 <_dtoa_r+0xa3e>
 8004e04:	07da      	lsls	r2, r3, #31
 8004e06:	d5de      	bpl.n	8004dc6 <_dtoa_r+0xa3e>
 8004e08:	2b39      	cmp	r3, #57	@ 0x39
 8004e0a:	d1da      	bne.n	8004dc2 <_dtoa_r+0xa3a>
 8004e0c:	2339      	movs	r3, #57	@ 0x39
 8004e0e:	f88b 3000 	strb.w	r3, [fp]
 8004e12:	4633      	mov	r3, r6
 8004e14:	461e      	mov	r6, r3
 8004e16:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	2a39      	cmp	r2, #57	@ 0x39
 8004e1e:	d04e      	beq.n	8004ebe <_dtoa_r+0xb36>
 8004e20:	3201      	adds	r2, #1
 8004e22:	701a      	strb	r2, [r3, #0]
 8004e24:	e501      	b.n	800482a <_dtoa_r+0x4a2>
 8004e26:	2a00      	cmp	r2, #0
 8004e28:	dd03      	ble.n	8004e32 <_dtoa_r+0xaaa>
 8004e2a:	2b39      	cmp	r3, #57	@ 0x39
 8004e2c:	d0ee      	beq.n	8004e0c <_dtoa_r+0xa84>
 8004e2e:	3301      	adds	r3, #1
 8004e30:	e7c9      	b.n	8004dc6 <_dtoa_r+0xa3e>
 8004e32:	9a04      	ldr	r2, [sp, #16]
 8004e34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004e36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004e3a:	428a      	cmp	r2, r1
 8004e3c:	d028      	beq.n	8004e90 <_dtoa_r+0xb08>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	220a      	movs	r2, #10
 8004e42:	9903      	ldr	r1, [sp, #12]
 8004e44:	4648      	mov	r0, r9
 8004e46:	f000 f9d3 	bl	80051f0 <__multadd>
 8004e4a:	42af      	cmp	r7, r5
 8004e4c:	9003      	str	r0, [sp, #12]
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	f04f 020a 	mov.w	r2, #10
 8004e56:	4639      	mov	r1, r7
 8004e58:	4648      	mov	r0, r9
 8004e5a:	d107      	bne.n	8004e6c <_dtoa_r+0xae4>
 8004e5c:	f000 f9c8 	bl	80051f0 <__multadd>
 8004e60:	4607      	mov	r7, r0
 8004e62:	4605      	mov	r5, r0
 8004e64:	9b04      	ldr	r3, [sp, #16]
 8004e66:	3301      	adds	r3, #1
 8004e68:	9304      	str	r3, [sp, #16]
 8004e6a:	e777      	b.n	8004d5c <_dtoa_r+0x9d4>
 8004e6c:	f000 f9c0 	bl	80051f0 <__multadd>
 8004e70:	4629      	mov	r1, r5
 8004e72:	4607      	mov	r7, r0
 8004e74:	2300      	movs	r3, #0
 8004e76:	220a      	movs	r2, #10
 8004e78:	4648      	mov	r0, r9
 8004e7a:	f000 f9b9 	bl	80051f0 <__multadd>
 8004e7e:	4605      	mov	r5, r0
 8004e80:	e7f0      	b.n	8004e64 <_dtoa_r+0xadc>
 8004e82:	f1bb 0f00 	cmp.w	fp, #0
 8004e86:	bfcc      	ite	gt
 8004e88:	465e      	movgt	r6, fp
 8004e8a:	2601      	movle	r6, #1
 8004e8c:	2700      	movs	r7, #0
 8004e8e:	4456      	add	r6, sl
 8004e90:	2201      	movs	r2, #1
 8004e92:	9903      	ldr	r1, [sp, #12]
 8004e94:	4648      	mov	r0, r9
 8004e96:	9304      	str	r3, [sp, #16]
 8004e98:	f000 fb4e 	bl	8005538 <__lshift>
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	9003      	str	r0, [sp, #12]
 8004ea0:	f000 fbb6 	bl	8005610 <__mcmp>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	dcb4      	bgt.n	8004e12 <_dtoa_r+0xa8a>
 8004ea8:	d102      	bne.n	8004eb0 <_dtoa_r+0xb28>
 8004eaa:	9b04      	ldr	r3, [sp, #16]
 8004eac:	07db      	lsls	r3, r3, #31
 8004eae:	d4b0      	bmi.n	8004e12 <_dtoa_r+0xa8a>
 8004eb0:	4633      	mov	r3, r6
 8004eb2:	461e      	mov	r6, r3
 8004eb4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004eb8:	2a30      	cmp	r2, #48	@ 0x30
 8004eba:	d0fa      	beq.n	8004eb2 <_dtoa_r+0xb2a>
 8004ebc:	e4b5      	b.n	800482a <_dtoa_r+0x4a2>
 8004ebe:	459a      	cmp	sl, r3
 8004ec0:	d1a8      	bne.n	8004e14 <_dtoa_r+0xa8c>
 8004ec2:	2331      	movs	r3, #49	@ 0x31
 8004ec4:	f108 0801 	add.w	r8, r8, #1
 8004ec8:	f88a 3000 	strb.w	r3, [sl]
 8004ecc:	e4ad      	b.n	800482a <_dtoa_r+0x4a2>
 8004ece:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004ed0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004f2c <_dtoa_r+0xba4>
 8004ed4:	b11b      	cbz	r3, 8004ede <_dtoa_r+0xb56>
 8004ed6:	f10a 0308 	add.w	r3, sl, #8
 8004eda:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	4650      	mov	r0, sl
 8004ee0:	b017      	add	sp, #92	@ 0x5c
 8004ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	f77f ae2e 	ble.w	8004b4a <_dtoa_r+0x7c2>
 8004eee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ef0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	e64d      	b.n	8004b92 <_dtoa_r+0x80a>
 8004ef6:	f1bb 0f00 	cmp.w	fp, #0
 8004efa:	f77f aed9 	ble.w	8004cb0 <_dtoa_r+0x928>
 8004efe:	4656      	mov	r6, sl
 8004f00:	4621      	mov	r1, r4
 8004f02:	9803      	ldr	r0, [sp, #12]
 8004f04:	f7ff f9b7 	bl	8004276 <quorem>
 8004f08:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004f0c:	f806 3b01 	strb.w	r3, [r6], #1
 8004f10:	eba6 020a 	sub.w	r2, r6, sl
 8004f14:	4593      	cmp	fp, r2
 8004f16:	ddb4      	ble.n	8004e82 <_dtoa_r+0xafa>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	220a      	movs	r2, #10
 8004f1c:	4648      	mov	r0, r9
 8004f1e:	9903      	ldr	r1, [sp, #12]
 8004f20:	f000 f966 	bl	80051f0 <__multadd>
 8004f24:	9003      	str	r0, [sp, #12]
 8004f26:	e7eb      	b.n	8004f00 <_dtoa_r+0xb78>
 8004f28:	0800664a 	.word	0x0800664a
 8004f2c:	080065ce 	.word	0x080065ce

08004f30 <_free_r>:
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	4605      	mov	r5, r0
 8004f34:	2900      	cmp	r1, #0
 8004f36:	d040      	beq.n	8004fba <_free_r+0x8a>
 8004f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f3c:	1f0c      	subs	r4, r1, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	bfb8      	it	lt
 8004f42:	18e4      	addlt	r4, r4, r3
 8004f44:	f000 f8e6 	bl	8005114 <__malloc_lock>
 8004f48:	4a1c      	ldr	r2, [pc, #112]	@ (8004fbc <_free_r+0x8c>)
 8004f4a:	6813      	ldr	r3, [r2, #0]
 8004f4c:	b933      	cbnz	r3, 8004f5c <_free_r+0x2c>
 8004f4e:	6063      	str	r3, [r4, #4]
 8004f50:	6014      	str	r4, [r2, #0]
 8004f52:	4628      	mov	r0, r5
 8004f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f58:	f000 b8e2 	b.w	8005120 <__malloc_unlock>
 8004f5c:	42a3      	cmp	r3, r4
 8004f5e:	d908      	bls.n	8004f72 <_free_r+0x42>
 8004f60:	6820      	ldr	r0, [r4, #0]
 8004f62:	1821      	adds	r1, r4, r0
 8004f64:	428b      	cmp	r3, r1
 8004f66:	bf01      	itttt	eq
 8004f68:	6819      	ldreq	r1, [r3, #0]
 8004f6a:	685b      	ldreq	r3, [r3, #4]
 8004f6c:	1809      	addeq	r1, r1, r0
 8004f6e:	6021      	streq	r1, [r4, #0]
 8004f70:	e7ed      	b.n	8004f4e <_free_r+0x1e>
 8004f72:	461a      	mov	r2, r3
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	b10b      	cbz	r3, 8004f7c <_free_r+0x4c>
 8004f78:	42a3      	cmp	r3, r4
 8004f7a:	d9fa      	bls.n	8004f72 <_free_r+0x42>
 8004f7c:	6811      	ldr	r1, [r2, #0]
 8004f7e:	1850      	adds	r0, r2, r1
 8004f80:	42a0      	cmp	r0, r4
 8004f82:	d10b      	bne.n	8004f9c <_free_r+0x6c>
 8004f84:	6820      	ldr	r0, [r4, #0]
 8004f86:	4401      	add	r1, r0
 8004f88:	1850      	adds	r0, r2, r1
 8004f8a:	4283      	cmp	r3, r0
 8004f8c:	6011      	str	r1, [r2, #0]
 8004f8e:	d1e0      	bne.n	8004f52 <_free_r+0x22>
 8004f90:	6818      	ldr	r0, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	4408      	add	r0, r1
 8004f96:	6010      	str	r0, [r2, #0]
 8004f98:	6053      	str	r3, [r2, #4]
 8004f9a:	e7da      	b.n	8004f52 <_free_r+0x22>
 8004f9c:	d902      	bls.n	8004fa4 <_free_r+0x74>
 8004f9e:	230c      	movs	r3, #12
 8004fa0:	602b      	str	r3, [r5, #0]
 8004fa2:	e7d6      	b.n	8004f52 <_free_r+0x22>
 8004fa4:	6820      	ldr	r0, [r4, #0]
 8004fa6:	1821      	adds	r1, r4, r0
 8004fa8:	428b      	cmp	r3, r1
 8004faa:	bf01      	itttt	eq
 8004fac:	6819      	ldreq	r1, [r3, #0]
 8004fae:	685b      	ldreq	r3, [r3, #4]
 8004fb0:	1809      	addeq	r1, r1, r0
 8004fb2:	6021      	streq	r1, [r4, #0]
 8004fb4:	6063      	str	r3, [r4, #4]
 8004fb6:	6054      	str	r4, [r2, #4]
 8004fb8:	e7cb      	b.n	8004f52 <_free_r+0x22>
 8004fba:	bd38      	pop	{r3, r4, r5, pc}
 8004fbc:	20000404 	.word	0x20000404

08004fc0 <malloc>:
 8004fc0:	4b02      	ldr	r3, [pc, #8]	@ (8004fcc <malloc+0xc>)
 8004fc2:	4601      	mov	r1, r0
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	f000 b825 	b.w	8005014 <_malloc_r>
 8004fca:	bf00      	nop
 8004fcc:	20000018 	.word	0x20000018

08004fd0 <sbrk_aligned>:
 8004fd0:	b570      	push	{r4, r5, r6, lr}
 8004fd2:	4e0f      	ldr	r6, [pc, #60]	@ (8005010 <sbrk_aligned+0x40>)
 8004fd4:	460c      	mov	r4, r1
 8004fd6:	6831      	ldr	r1, [r6, #0]
 8004fd8:	4605      	mov	r5, r0
 8004fda:	b911      	cbnz	r1, 8004fe2 <sbrk_aligned+0x12>
 8004fdc:	f000 fe3a 	bl	8005c54 <_sbrk_r>
 8004fe0:	6030      	str	r0, [r6, #0]
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	f000 fe35 	bl	8005c54 <_sbrk_r>
 8004fea:	1c43      	adds	r3, r0, #1
 8004fec:	d103      	bne.n	8004ff6 <sbrk_aligned+0x26>
 8004fee:	f04f 34ff 	mov.w	r4, #4294967295
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	bd70      	pop	{r4, r5, r6, pc}
 8004ff6:	1cc4      	adds	r4, r0, #3
 8004ff8:	f024 0403 	bic.w	r4, r4, #3
 8004ffc:	42a0      	cmp	r0, r4
 8004ffe:	d0f8      	beq.n	8004ff2 <sbrk_aligned+0x22>
 8005000:	1a21      	subs	r1, r4, r0
 8005002:	4628      	mov	r0, r5
 8005004:	f000 fe26 	bl	8005c54 <_sbrk_r>
 8005008:	3001      	adds	r0, #1
 800500a:	d1f2      	bne.n	8004ff2 <sbrk_aligned+0x22>
 800500c:	e7ef      	b.n	8004fee <sbrk_aligned+0x1e>
 800500e:	bf00      	nop
 8005010:	20000400 	.word	0x20000400

08005014 <_malloc_r>:
 8005014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005018:	1ccd      	adds	r5, r1, #3
 800501a:	f025 0503 	bic.w	r5, r5, #3
 800501e:	3508      	adds	r5, #8
 8005020:	2d0c      	cmp	r5, #12
 8005022:	bf38      	it	cc
 8005024:	250c      	movcc	r5, #12
 8005026:	2d00      	cmp	r5, #0
 8005028:	4606      	mov	r6, r0
 800502a:	db01      	blt.n	8005030 <_malloc_r+0x1c>
 800502c:	42a9      	cmp	r1, r5
 800502e:	d904      	bls.n	800503a <_malloc_r+0x26>
 8005030:	230c      	movs	r3, #12
 8005032:	6033      	str	r3, [r6, #0]
 8005034:	2000      	movs	r0, #0
 8005036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800503a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005110 <_malloc_r+0xfc>
 800503e:	f000 f869 	bl	8005114 <__malloc_lock>
 8005042:	f8d8 3000 	ldr.w	r3, [r8]
 8005046:	461c      	mov	r4, r3
 8005048:	bb44      	cbnz	r4, 800509c <_malloc_r+0x88>
 800504a:	4629      	mov	r1, r5
 800504c:	4630      	mov	r0, r6
 800504e:	f7ff ffbf 	bl	8004fd0 <sbrk_aligned>
 8005052:	1c43      	adds	r3, r0, #1
 8005054:	4604      	mov	r4, r0
 8005056:	d158      	bne.n	800510a <_malloc_r+0xf6>
 8005058:	f8d8 4000 	ldr.w	r4, [r8]
 800505c:	4627      	mov	r7, r4
 800505e:	2f00      	cmp	r7, #0
 8005060:	d143      	bne.n	80050ea <_malloc_r+0xd6>
 8005062:	2c00      	cmp	r4, #0
 8005064:	d04b      	beq.n	80050fe <_malloc_r+0xea>
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	4639      	mov	r1, r7
 800506a:	4630      	mov	r0, r6
 800506c:	eb04 0903 	add.w	r9, r4, r3
 8005070:	f000 fdf0 	bl	8005c54 <_sbrk_r>
 8005074:	4581      	cmp	r9, r0
 8005076:	d142      	bne.n	80050fe <_malloc_r+0xea>
 8005078:	6821      	ldr	r1, [r4, #0]
 800507a:	4630      	mov	r0, r6
 800507c:	1a6d      	subs	r5, r5, r1
 800507e:	4629      	mov	r1, r5
 8005080:	f7ff ffa6 	bl	8004fd0 <sbrk_aligned>
 8005084:	3001      	adds	r0, #1
 8005086:	d03a      	beq.n	80050fe <_malloc_r+0xea>
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	442b      	add	r3, r5
 800508c:	6023      	str	r3, [r4, #0]
 800508e:	f8d8 3000 	ldr.w	r3, [r8]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	bb62      	cbnz	r2, 80050f0 <_malloc_r+0xdc>
 8005096:	f8c8 7000 	str.w	r7, [r8]
 800509a:	e00f      	b.n	80050bc <_malloc_r+0xa8>
 800509c:	6822      	ldr	r2, [r4, #0]
 800509e:	1b52      	subs	r2, r2, r5
 80050a0:	d420      	bmi.n	80050e4 <_malloc_r+0xd0>
 80050a2:	2a0b      	cmp	r2, #11
 80050a4:	d917      	bls.n	80050d6 <_malloc_r+0xc2>
 80050a6:	1961      	adds	r1, r4, r5
 80050a8:	42a3      	cmp	r3, r4
 80050aa:	6025      	str	r5, [r4, #0]
 80050ac:	bf18      	it	ne
 80050ae:	6059      	strne	r1, [r3, #4]
 80050b0:	6863      	ldr	r3, [r4, #4]
 80050b2:	bf08      	it	eq
 80050b4:	f8c8 1000 	streq.w	r1, [r8]
 80050b8:	5162      	str	r2, [r4, r5]
 80050ba:	604b      	str	r3, [r1, #4]
 80050bc:	4630      	mov	r0, r6
 80050be:	f000 f82f 	bl	8005120 <__malloc_unlock>
 80050c2:	f104 000b 	add.w	r0, r4, #11
 80050c6:	1d23      	adds	r3, r4, #4
 80050c8:	f020 0007 	bic.w	r0, r0, #7
 80050cc:	1ac2      	subs	r2, r0, r3
 80050ce:	bf1c      	itt	ne
 80050d0:	1a1b      	subne	r3, r3, r0
 80050d2:	50a3      	strne	r3, [r4, r2]
 80050d4:	e7af      	b.n	8005036 <_malloc_r+0x22>
 80050d6:	6862      	ldr	r2, [r4, #4]
 80050d8:	42a3      	cmp	r3, r4
 80050da:	bf0c      	ite	eq
 80050dc:	f8c8 2000 	streq.w	r2, [r8]
 80050e0:	605a      	strne	r2, [r3, #4]
 80050e2:	e7eb      	b.n	80050bc <_malloc_r+0xa8>
 80050e4:	4623      	mov	r3, r4
 80050e6:	6864      	ldr	r4, [r4, #4]
 80050e8:	e7ae      	b.n	8005048 <_malloc_r+0x34>
 80050ea:	463c      	mov	r4, r7
 80050ec:	687f      	ldr	r7, [r7, #4]
 80050ee:	e7b6      	b.n	800505e <_malloc_r+0x4a>
 80050f0:	461a      	mov	r2, r3
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	42a3      	cmp	r3, r4
 80050f6:	d1fb      	bne.n	80050f0 <_malloc_r+0xdc>
 80050f8:	2300      	movs	r3, #0
 80050fa:	6053      	str	r3, [r2, #4]
 80050fc:	e7de      	b.n	80050bc <_malloc_r+0xa8>
 80050fe:	230c      	movs	r3, #12
 8005100:	4630      	mov	r0, r6
 8005102:	6033      	str	r3, [r6, #0]
 8005104:	f000 f80c 	bl	8005120 <__malloc_unlock>
 8005108:	e794      	b.n	8005034 <_malloc_r+0x20>
 800510a:	6005      	str	r5, [r0, #0]
 800510c:	e7d6      	b.n	80050bc <_malloc_r+0xa8>
 800510e:	bf00      	nop
 8005110:	20000404 	.word	0x20000404

08005114 <__malloc_lock>:
 8005114:	4801      	ldr	r0, [pc, #4]	@ (800511c <__malloc_lock+0x8>)
 8005116:	f7ff b89e 	b.w	8004256 <__retarget_lock_acquire_recursive>
 800511a:	bf00      	nop
 800511c:	200003fc 	.word	0x200003fc

08005120 <__malloc_unlock>:
 8005120:	4801      	ldr	r0, [pc, #4]	@ (8005128 <__malloc_unlock+0x8>)
 8005122:	f7ff b899 	b.w	8004258 <__retarget_lock_release_recursive>
 8005126:	bf00      	nop
 8005128:	200003fc 	.word	0x200003fc

0800512c <_Balloc>:
 800512c:	b570      	push	{r4, r5, r6, lr}
 800512e:	69c6      	ldr	r6, [r0, #28]
 8005130:	4604      	mov	r4, r0
 8005132:	460d      	mov	r5, r1
 8005134:	b976      	cbnz	r6, 8005154 <_Balloc+0x28>
 8005136:	2010      	movs	r0, #16
 8005138:	f7ff ff42 	bl	8004fc0 <malloc>
 800513c:	4602      	mov	r2, r0
 800513e:	61e0      	str	r0, [r4, #28]
 8005140:	b920      	cbnz	r0, 800514c <_Balloc+0x20>
 8005142:	216b      	movs	r1, #107	@ 0x6b
 8005144:	4b17      	ldr	r3, [pc, #92]	@ (80051a4 <_Balloc+0x78>)
 8005146:	4818      	ldr	r0, [pc, #96]	@ (80051a8 <_Balloc+0x7c>)
 8005148:	f000 fda2 	bl	8005c90 <__assert_func>
 800514c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005150:	6006      	str	r6, [r0, #0]
 8005152:	60c6      	str	r6, [r0, #12]
 8005154:	69e6      	ldr	r6, [r4, #28]
 8005156:	68f3      	ldr	r3, [r6, #12]
 8005158:	b183      	cbz	r3, 800517c <_Balloc+0x50>
 800515a:	69e3      	ldr	r3, [r4, #28]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005162:	b9b8      	cbnz	r0, 8005194 <_Balloc+0x68>
 8005164:	2101      	movs	r1, #1
 8005166:	fa01 f605 	lsl.w	r6, r1, r5
 800516a:	1d72      	adds	r2, r6, #5
 800516c:	4620      	mov	r0, r4
 800516e:	0092      	lsls	r2, r2, #2
 8005170:	f000 fdac 	bl	8005ccc <_calloc_r>
 8005174:	b160      	cbz	r0, 8005190 <_Balloc+0x64>
 8005176:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800517a:	e00e      	b.n	800519a <_Balloc+0x6e>
 800517c:	2221      	movs	r2, #33	@ 0x21
 800517e:	2104      	movs	r1, #4
 8005180:	4620      	mov	r0, r4
 8005182:	f000 fda3 	bl	8005ccc <_calloc_r>
 8005186:	69e3      	ldr	r3, [r4, #28]
 8005188:	60f0      	str	r0, [r6, #12]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1e4      	bne.n	800515a <_Balloc+0x2e>
 8005190:	2000      	movs	r0, #0
 8005192:	bd70      	pop	{r4, r5, r6, pc}
 8005194:	6802      	ldr	r2, [r0, #0]
 8005196:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800519a:	2300      	movs	r3, #0
 800519c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80051a0:	e7f7      	b.n	8005192 <_Balloc+0x66>
 80051a2:	bf00      	nop
 80051a4:	080065db 	.word	0x080065db
 80051a8:	0800665b 	.word	0x0800665b

080051ac <_Bfree>:
 80051ac:	b570      	push	{r4, r5, r6, lr}
 80051ae:	69c6      	ldr	r6, [r0, #28]
 80051b0:	4605      	mov	r5, r0
 80051b2:	460c      	mov	r4, r1
 80051b4:	b976      	cbnz	r6, 80051d4 <_Bfree+0x28>
 80051b6:	2010      	movs	r0, #16
 80051b8:	f7ff ff02 	bl	8004fc0 <malloc>
 80051bc:	4602      	mov	r2, r0
 80051be:	61e8      	str	r0, [r5, #28]
 80051c0:	b920      	cbnz	r0, 80051cc <_Bfree+0x20>
 80051c2:	218f      	movs	r1, #143	@ 0x8f
 80051c4:	4b08      	ldr	r3, [pc, #32]	@ (80051e8 <_Bfree+0x3c>)
 80051c6:	4809      	ldr	r0, [pc, #36]	@ (80051ec <_Bfree+0x40>)
 80051c8:	f000 fd62 	bl	8005c90 <__assert_func>
 80051cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051d0:	6006      	str	r6, [r0, #0]
 80051d2:	60c6      	str	r6, [r0, #12]
 80051d4:	b13c      	cbz	r4, 80051e6 <_Bfree+0x3a>
 80051d6:	69eb      	ldr	r3, [r5, #28]
 80051d8:	6862      	ldr	r2, [r4, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051e0:	6021      	str	r1, [r4, #0]
 80051e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80051e6:	bd70      	pop	{r4, r5, r6, pc}
 80051e8:	080065db 	.word	0x080065db
 80051ec:	0800665b 	.word	0x0800665b

080051f0 <__multadd>:
 80051f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051f4:	4607      	mov	r7, r0
 80051f6:	460c      	mov	r4, r1
 80051f8:	461e      	mov	r6, r3
 80051fa:	2000      	movs	r0, #0
 80051fc:	690d      	ldr	r5, [r1, #16]
 80051fe:	f101 0c14 	add.w	ip, r1, #20
 8005202:	f8dc 3000 	ldr.w	r3, [ip]
 8005206:	3001      	adds	r0, #1
 8005208:	b299      	uxth	r1, r3
 800520a:	fb02 6101 	mla	r1, r2, r1, r6
 800520e:	0c1e      	lsrs	r6, r3, #16
 8005210:	0c0b      	lsrs	r3, r1, #16
 8005212:	fb02 3306 	mla	r3, r2, r6, r3
 8005216:	b289      	uxth	r1, r1
 8005218:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800521c:	4285      	cmp	r5, r0
 800521e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005222:	f84c 1b04 	str.w	r1, [ip], #4
 8005226:	dcec      	bgt.n	8005202 <__multadd+0x12>
 8005228:	b30e      	cbz	r6, 800526e <__multadd+0x7e>
 800522a:	68a3      	ldr	r3, [r4, #8]
 800522c:	42ab      	cmp	r3, r5
 800522e:	dc19      	bgt.n	8005264 <__multadd+0x74>
 8005230:	6861      	ldr	r1, [r4, #4]
 8005232:	4638      	mov	r0, r7
 8005234:	3101      	adds	r1, #1
 8005236:	f7ff ff79 	bl	800512c <_Balloc>
 800523a:	4680      	mov	r8, r0
 800523c:	b928      	cbnz	r0, 800524a <__multadd+0x5a>
 800523e:	4602      	mov	r2, r0
 8005240:	21ba      	movs	r1, #186	@ 0xba
 8005242:	4b0c      	ldr	r3, [pc, #48]	@ (8005274 <__multadd+0x84>)
 8005244:	480c      	ldr	r0, [pc, #48]	@ (8005278 <__multadd+0x88>)
 8005246:	f000 fd23 	bl	8005c90 <__assert_func>
 800524a:	6922      	ldr	r2, [r4, #16]
 800524c:	f104 010c 	add.w	r1, r4, #12
 8005250:	3202      	adds	r2, #2
 8005252:	0092      	lsls	r2, r2, #2
 8005254:	300c      	adds	r0, #12
 8005256:	f000 fd0d 	bl	8005c74 <memcpy>
 800525a:	4621      	mov	r1, r4
 800525c:	4638      	mov	r0, r7
 800525e:	f7ff ffa5 	bl	80051ac <_Bfree>
 8005262:	4644      	mov	r4, r8
 8005264:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005268:	3501      	adds	r5, #1
 800526a:	615e      	str	r6, [r3, #20]
 800526c:	6125      	str	r5, [r4, #16]
 800526e:	4620      	mov	r0, r4
 8005270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005274:	0800664a 	.word	0x0800664a
 8005278:	0800665b 	.word	0x0800665b

0800527c <__hi0bits>:
 800527c:	4603      	mov	r3, r0
 800527e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005282:	bf3a      	itte	cc
 8005284:	0403      	lslcc	r3, r0, #16
 8005286:	2010      	movcc	r0, #16
 8005288:	2000      	movcs	r0, #0
 800528a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800528e:	bf3c      	itt	cc
 8005290:	021b      	lslcc	r3, r3, #8
 8005292:	3008      	addcc	r0, #8
 8005294:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005298:	bf3c      	itt	cc
 800529a:	011b      	lslcc	r3, r3, #4
 800529c:	3004      	addcc	r0, #4
 800529e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052a2:	bf3c      	itt	cc
 80052a4:	009b      	lslcc	r3, r3, #2
 80052a6:	3002      	addcc	r0, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	db05      	blt.n	80052b8 <__hi0bits+0x3c>
 80052ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80052b0:	f100 0001 	add.w	r0, r0, #1
 80052b4:	bf08      	it	eq
 80052b6:	2020      	moveq	r0, #32
 80052b8:	4770      	bx	lr

080052ba <__lo0bits>:
 80052ba:	6803      	ldr	r3, [r0, #0]
 80052bc:	4602      	mov	r2, r0
 80052be:	f013 0007 	ands.w	r0, r3, #7
 80052c2:	d00b      	beq.n	80052dc <__lo0bits+0x22>
 80052c4:	07d9      	lsls	r1, r3, #31
 80052c6:	d421      	bmi.n	800530c <__lo0bits+0x52>
 80052c8:	0798      	lsls	r0, r3, #30
 80052ca:	bf49      	itett	mi
 80052cc:	085b      	lsrmi	r3, r3, #1
 80052ce:	089b      	lsrpl	r3, r3, #2
 80052d0:	2001      	movmi	r0, #1
 80052d2:	6013      	strmi	r3, [r2, #0]
 80052d4:	bf5c      	itt	pl
 80052d6:	2002      	movpl	r0, #2
 80052d8:	6013      	strpl	r3, [r2, #0]
 80052da:	4770      	bx	lr
 80052dc:	b299      	uxth	r1, r3
 80052de:	b909      	cbnz	r1, 80052e4 <__lo0bits+0x2a>
 80052e0:	2010      	movs	r0, #16
 80052e2:	0c1b      	lsrs	r3, r3, #16
 80052e4:	b2d9      	uxtb	r1, r3
 80052e6:	b909      	cbnz	r1, 80052ec <__lo0bits+0x32>
 80052e8:	3008      	adds	r0, #8
 80052ea:	0a1b      	lsrs	r3, r3, #8
 80052ec:	0719      	lsls	r1, r3, #28
 80052ee:	bf04      	itt	eq
 80052f0:	091b      	lsreq	r3, r3, #4
 80052f2:	3004      	addeq	r0, #4
 80052f4:	0799      	lsls	r1, r3, #30
 80052f6:	bf04      	itt	eq
 80052f8:	089b      	lsreq	r3, r3, #2
 80052fa:	3002      	addeq	r0, #2
 80052fc:	07d9      	lsls	r1, r3, #31
 80052fe:	d403      	bmi.n	8005308 <__lo0bits+0x4e>
 8005300:	085b      	lsrs	r3, r3, #1
 8005302:	f100 0001 	add.w	r0, r0, #1
 8005306:	d003      	beq.n	8005310 <__lo0bits+0x56>
 8005308:	6013      	str	r3, [r2, #0]
 800530a:	4770      	bx	lr
 800530c:	2000      	movs	r0, #0
 800530e:	4770      	bx	lr
 8005310:	2020      	movs	r0, #32
 8005312:	4770      	bx	lr

08005314 <__i2b>:
 8005314:	b510      	push	{r4, lr}
 8005316:	460c      	mov	r4, r1
 8005318:	2101      	movs	r1, #1
 800531a:	f7ff ff07 	bl	800512c <_Balloc>
 800531e:	4602      	mov	r2, r0
 8005320:	b928      	cbnz	r0, 800532e <__i2b+0x1a>
 8005322:	f240 1145 	movw	r1, #325	@ 0x145
 8005326:	4b04      	ldr	r3, [pc, #16]	@ (8005338 <__i2b+0x24>)
 8005328:	4804      	ldr	r0, [pc, #16]	@ (800533c <__i2b+0x28>)
 800532a:	f000 fcb1 	bl	8005c90 <__assert_func>
 800532e:	2301      	movs	r3, #1
 8005330:	6144      	str	r4, [r0, #20]
 8005332:	6103      	str	r3, [r0, #16]
 8005334:	bd10      	pop	{r4, pc}
 8005336:	bf00      	nop
 8005338:	0800664a 	.word	0x0800664a
 800533c:	0800665b 	.word	0x0800665b

08005340 <__multiply>:
 8005340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005344:	4617      	mov	r7, r2
 8005346:	690a      	ldr	r2, [r1, #16]
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	4689      	mov	r9, r1
 800534c:	429a      	cmp	r2, r3
 800534e:	bfa2      	ittt	ge
 8005350:	463b      	movge	r3, r7
 8005352:	460f      	movge	r7, r1
 8005354:	4699      	movge	r9, r3
 8005356:	693d      	ldr	r5, [r7, #16]
 8005358:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	eb05 060a 	add.w	r6, r5, sl
 8005364:	42b3      	cmp	r3, r6
 8005366:	b085      	sub	sp, #20
 8005368:	bfb8      	it	lt
 800536a:	3101      	addlt	r1, #1
 800536c:	f7ff fede 	bl	800512c <_Balloc>
 8005370:	b930      	cbnz	r0, 8005380 <__multiply+0x40>
 8005372:	4602      	mov	r2, r0
 8005374:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005378:	4b40      	ldr	r3, [pc, #256]	@ (800547c <__multiply+0x13c>)
 800537a:	4841      	ldr	r0, [pc, #260]	@ (8005480 <__multiply+0x140>)
 800537c:	f000 fc88 	bl	8005c90 <__assert_func>
 8005380:	f100 0414 	add.w	r4, r0, #20
 8005384:	4623      	mov	r3, r4
 8005386:	2200      	movs	r2, #0
 8005388:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800538c:	4573      	cmp	r3, lr
 800538e:	d320      	bcc.n	80053d2 <__multiply+0x92>
 8005390:	f107 0814 	add.w	r8, r7, #20
 8005394:	f109 0114 	add.w	r1, r9, #20
 8005398:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800539c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80053a0:	9302      	str	r3, [sp, #8]
 80053a2:	1beb      	subs	r3, r5, r7
 80053a4:	3b15      	subs	r3, #21
 80053a6:	f023 0303 	bic.w	r3, r3, #3
 80053aa:	3304      	adds	r3, #4
 80053ac:	3715      	adds	r7, #21
 80053ae:	42bd      	cmp	r5, r7
 80053b0:	bf38      	it	cc
 80053b2:	2304      	movcc	r3, #4
 80053b4:	9301      	str	r3, [sp, #4]
 80053b6:	9b02      	ldr	r3, [sp, #8]
 80053b8:	9103      	str	r1, [sp, #12]
 80053ba:	428b      	cmp	r3, r1
 80053bc:	d80c      	bhi.n	80053d8 <__multiply+0x98>
 80053be:	2e00      	cmp	r6, #0
 80053c0:	dd03      	ble.n	80053ca <__multiply+0x8a>
 80053c2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d055      	beq.n	8005476 <__multiply+0x136>
 80053ca:	6106      	str	r6, [r0, #16]
 80053cc:	b005      	add	sp, #20
 80053ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d2:	f843 2b04 	str.w	r2, [r3], #4
 80053d6:	e7d9      	b.n	800538c <__multiply+0x4c>
 80053d8:	f8b1 a000 	ldrh.w	sl, [r1]
 80053dc:	f1ba 0f00 	cmp.w	sl, #0
 80053e0:	d01f      	beq.n	8005422 <__multiply+0xe2>
 80053e2:	46c4      	mov	ip, r8
 80053e4:	46a1      	mov	r9, r4
 80053e6:	2700      	movs	r7, #0
 80053e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80053ec:	f8d9 3000 	ldr.w	r3, [r9]
 80053f0:	fa1f fb82 	uxth.w	fp, r2
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	fb0a 330b 	mla	r3, sl, fp, r3
 80053fa:	443b      	add	r3, r7
 80053fc:	f8d9 7000 	ldr.w	r7, [r9]
 8005400:	0c12      	lsrs	r2, r2, #16
 8005402:	0c3f      	lsrs	r7, r7, #16
 8005404:	fb0a 7202 	mla	r2, sl, r2, r7
 8005408:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800540c:	b29b      	uxth	r3, r3
 800540e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005412:	4565      	cmp	r5, ip
 8005414:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005418:	f849 3b04 	str.w	r3, [r9], #4
 800541c:	d8e4      	bhi.n	80053e8 <__multiply+0xa8>
 800541e:	9b01      	ldr	r3, [sp, #4]
 8005420:	50e7      	str	r7, [r4, r3]
 8005422:	9b03      	ldr	r3, [sp, #12]
 8005424:	3104      	adds	r1, #4
 8005426:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800542a:	f1b9 0f00 	cmp.w	r9, #0
 800542e:	d020      	beq.n	8005472 <__multiply+0x132>
 8005430:	4647      	mov	r7, r8
 8005432:	46a4      	mov	ip, r4
 8005434:	f04f 0a00 	mov.w	sl, #0
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	f8b7 b000 	ldrh.w	fp, [r7]
 800543e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005442:	b29b      	uxth	r3, r3
 8005444:	fb09 220b 	mla	r2, r9, fp, r2
 8005448:	4452      	add	r2, sl
 800544a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800544e:	f84c 3b04 	str.w	r3, [ip], #4
 8005452:	f857 3b04 	ldr.w	r3, [r7], #4
 8005456:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800545a:	f8bc 3000 	ldrh.w	r3, [ip]
 800545e:	42bd      	cmp	r5, r7
 8005460:	fb09 330a 	mla	r3, r9, sl, r3
 8005464:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005468:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800546c:	d8e5      	bhi.n	800543a <__multiply+0xfa>
 800546e:	9a01      	ldr	r2, [sp, #4]
 8005470:	50a3      	str	r3, [r4, r2]
 8005472:	3404      	adds	r4, #4
 8005474:	e79f      	b.n	80053b6 <__multiply+0x76>
 8005476:	3e01      	subs	r6, #1
 8005478:	e7a1      	b.n	80053be <__multiply+0x7e>
 800547a:	bf00      	nop
 800547c:	0800664a 	.word	0x0800664a
 8005480:	0800665b 	.word	0x0800665b

08005484 <__pow5mult>:
 8005484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005488:	4615      	mov	r5, r2
 800548a:	f012 0203 	ands.w	r2, r2, #3
 800548e:	4607      	mov	r7, r0
 8005490:	460e      	mov	r6, r1
 8005492:	d007      	beq.n	80054a4 <__pow5mult+0x20>
 8005494:	4c25      	ldr	r4, [pc, #148]	@ (800552c <__pow5mult+0xa8>)
 8005496:	3a01      	subs	r2, #1
 8005498:	2300      	movs	r3, #0
 800549a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800549e:	f7ff fea7 	bl	80051f0 <__multadd>
 80054a2:	4606      	mov	r6, r0
 80054a4:	10ad      	asrs	r5, r5, #2
 80054a6:	d03d      	beq.n	8005524 <__pow5mult+0xa0>
 80054a8:	69fc      	ldr	r4, [r7, #28]
 80054aa:	b97c      	cbnz	r4, 80054cc <__pow5mult+0x48>
 80054ac:	2010      	movs	r0, #16
 80054ae:	f7ff fd87 	bl	8004fc0 <malloc>
 80054b2:	4602      	mov	r2, r0
 80054b4:	61f8      	str	r0, [r7, #28]
 80054b6:	b928      	cbnz	r0, 80054c4 <__pow5mult+0x40>
 80054b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80054bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005530 <__pow5mult+0xac>)
 80054be:	481d      	ldr	r0, [pc, #116]	@ (8005534 <__pow5mult+0xb0>)
 80054c0:	f000 fbe6 	bl	8005c90 <__assert_func>
 80054c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80054c8:	6004      	str	r4, [r0, #0]
 80054ca:	60c4      	str	r4, [r0, #12]
 80054cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80054d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80054d4:	b94c      	cbnz	r4, 80054ea <__pow5mult+0x66>
 80054d6:	f240 2171 	movw	r1, #625	@ 0x271
 80054da:	4638      	mov	r0, r7
 80054dc:	f7ff ff1a 	bl	8005314 <__i2b>
 80054e0:	2300      	movs	r3, #0
 80054e2:	4604      	mov	r4, r0
 80054e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80054e8:	6003      	str	r3, [r0, #0]
 80054ea:	f04f 0900 	mov.w	r9, #0
 80054ee:	07eb      	lsls	r3, r5, #31
 80054f0:	d50a      	bpl.n	8005508 <__pow5mult+0x84>
 80054f2:	4631      	mov	r1, r6
 80054f4:	4622      	mov	r2, r4
 80054f6:	4638      	mov	r0, r7
 80054f8:	f7ff ff22 	bl	8005340 <__multiply>
 80054fc:	4680      	mov	r8, r0
 80054fe:	4631      	mov	r1, r6
 8005500:	4638      	mov	r0, r7
 8005502:	f7ff fe53 	bl	80051ac <_Bfree>
 8005506:	4646      	mov	r6, r8
 8005508:	106d      	asrs	r5, r5, #1
 800550a:	d00b      	beq.n	8005524 <__pow5mult+0xa0>
 800550c:	6820      	ldr	r0, [r4, #0]
 800550e:	b938      	cbnz	r0, 8005520 <__pow5mult+0x9c>
 8005510:	4622      	mov	r2, r4
 8005512:	4621      	mov	r1, r4
 8005514:	4638      	mov	r0, r7
 8005516:	f7ff ff13 	bl	8005340 <__multiply>
 800551a:	6020      	str	r0, [r4, #0]
 800551c:	f8c0 9000 	str.w	r9, [r0]
 8005520:	4604      	mov	r4, r0
 8005522:	e7e4      	b.n	80054ee <__pow5mult+0x6a>
 8005524:	4630      	mov	r0, r6
 8005526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800552a:	bf00      	nop
 800552c:	0800670c 	.word	0x0800670c
 8005530:	080065db 	.word	0x080065db
 8005534:	0800665b 	.word	0x0800665b

08005538 <__lshift>:
 8005538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800553c:	460c      	mov	r4, r1
 800553e:	4607      	mov	r7, r0
 8005540:	4691      	mov	r9, r2
 8005542:	6923      	ldr	r3, [r4, #16]
 8005544:	6849      	ldr	r1, [r1, #4]
 8005546:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800554a:	68a3      	ldr	r3, [r4, #8]
 800554c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005550:	f108 0601 	add.w	r6, r8, #1
 8005554:	42b3      	cmp	r3, r6
 8005556:	db0b      	blt.n	8005570 <__lshift+0x38>
 8005558:	4638      	mov	r0, r7
 800555a:	f7ff fde7 	bl	800512c <_Balloc>
 800555e:	4605      	mov	r5, r0
 8005560:	b948      	cbnz	r0, 8005576 <__lshift+0x3e>
 8005562:	4602      	mov	r2, r0
 8005564:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005568:	4b27      	ldr	r3, [pc, #156]	@ (8005608 <__lshift+0xd0>)
 800556a:	4828      	ldr	r0, [pc, #160]	@ (800560c <__lshift+0xd4>)
 800556c:	f000 fb90 	bl	8005c90 <__assert_func>
 8005570:	3101      	adds	r1, #1
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	e7ee      	b.n	8005554 <__lshift+0x1c>
 8005576:	2300      	movs	r3, #0
 8005578:	f100 0114 	add.w	r1, r0, #20
 800557c:	f100 0210 	add.w	r2, r0, #16
 8005580:	4618      	mov	r0, r3
 8005582:	4553      	cmp	r3, sl
 8005584:	db33      	blt.n	80055ee <__lshift+0xb6>
 8005586:	6920      	ldr	r0, [r4, #16]
 8005588:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800558c:	f104 0314 	add.w	r3, r4, #20
 8005590:	f019 091f 	ands.w	r9, r9, #31
 8005594:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005598:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800559c:	d02b      	beq.n	80055f6 <__lshift+0xbe>
 800559e:	468a      	mov	sl, r1
 80055a0:	2200      	movs	r2, #0
 80055a2:	f1c9 0e20 	rsb	lr, r9, #32
 80055a6:	6818      	ldr	r0, [r3, #0]
 80055a8:	fa00 f009 	lsl.w	r0, r0, r9
 80055ac:	4310      	orrs	r0, r2
 80055ae:	f84a 0b04 	str.w	r0, [sl], #4
 80055b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80055b6:	459c      	cmp	ip, r3
 80055b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80055bc:	d8f3      	bhi.n	80055a6 <__lshift+0x6e>
 80055be:	ebac 0304 	sub.w	r3, ip, r4
 80055c2:	3b15      	subs	r3, #21
 80055c4:	f023 0303 	bic.w	r3, r3, #3
 80055c8:	3304      	adds	r3, #4
 80055ca:	f104 0015 	add.w	r0, r4, #21
 80055ce:	4560      	cmp	r0, ip
 80055d0:	bf88      	it	hi
 80055d2:	2304      	movhi	r3, #4
 80055d4:	50ca      	str	r2, [r1, r3]
 80055d6:	b10a      	cbz	r2, 80055dc <__lshift+0xa4>
 80055d8:	f108 0602 	add.w	r6, r8, #2
 80055dc:	3e01      	subs	r6, #1
 80055de:	4638      	mov	r0, r7
 80055e0:	4621      	mov	r1, r4
 80055e2:	612e      	str	r6, [r5, #16]
 80055e4:	f7ff fde2 	bl	80051ac <_Bfree>
 80055e8:	4628      	mov	r0, r5
 80055ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80055f2:	3301      	adds	r3, #1
 80055f4:	e7c5      	b.n	8005582 <__lshift+0x4a>
 80055f6:	3904      	subs	r1, #4
 80055f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80055fc:	459c      	cmp	ip, r3
 80055fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8005602:	d8f9      	bhi.n	80055f8 <__lshift+0xc0>
 8005604:	e7ea      	b.n	80055dc <__lshift+0xa4>
 8005606:	bf00      	nop
 8005608:	0800664a 	.word	0x0800664a
 800560c:	0800665b 	.word	0x0800665b

08005610 <__mcmp>:
 8005610:	4603      	mov	r3, r0
 8005612:	690a      	ldr	r2, [r1, #16]
 8005614:	6900      	ldr	r0, [r0, #16]
 8005616:	b530      	push	{r4, r5, lr}
 8005618:	1a80      	subs	r0, r0, r2
 800561a:	d10e      	bne.n	800563a <__mcmp+0x2a>
 800561c:	3314      	adds	r3, #20
 800561e:	3114      	adds	r1, #20
 8005620:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005624:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005628:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800562c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005630:	4295      	cmp	r5, r2
 8005632:	d003      	beq.n	800563c <__mcmp+0x2c>
 8005634:	d205      	bcs.n	8005642 <__mcmp+0x32>
 8005636:	f04f 30ff 	mov.w	r0, #4294967295
 800563a:	bd30      	pop	{r4, r5, pc}
 800563c:	42a3      	cmp	r3, r4
 800563e:	d3f3      	bcc.n	8005628 <__mcmp+0x18>
 8005640:	e7fb      	b.n	800563a <__mcmp+0x2a>
 8005642:	2001      	movs	r0, #1
 8005644:	e7f9      	b.n	800563a <__mcmp+0x2a>
	...

08005648 <__mdiff>:
 8005648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564c:	4689      	mov	r9, r1
 800564e:	4606      	mov	r6, r0
 8005650:	4611      	mov	r1, r2
 8005652:	4648      	mov	r0, r9
 8005654:	4614      	mov	r4, r2
 8005656:	f7ff ffdb 	bl	8005610 <__mcmp>
 800565a:	1e05      	subs	r5, r0, #0
 800565c:	d112      	bne.n	8005684 <__mdiff+0x3c>
 800565e:	4629      	mov	r1, r5
 8005660:	4630      	mov	r0, r6
 8005662:	f7ff fd63 	bl	800512c <_Balloc>
 8005666:	4602      	mov	r2, r0
 8005668:	b928      	cbnz	r0, 8005676 <__mdiff+0x2e>
 800566a:	f240 2137 	movw	r1, #567	@ 0x237
 800566e:	4b3e      	ldr	r3, [pc, #248]	@ (8005768 <__mdiff+0x120>)
 8005670:	483e      	ldr	r0, [pc, #248]	@ (800576c <__mdiff+0x124>)
 8005672:	f000 fb0d 	bl	8005c90 <__assert_func>
 8005676:	2301      	movs	r3, #1
 8005678:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800567c:	4610      	mov	r0, r2
 800567e:	b003      	add	sp, #12
 8005680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005684:	bfbc      	itt	lt
 8005686:	464b      	movlt	r3, r9
 8005688:	46a1      	movlt	r9, r4
 800568a:	4630      	mov	r0, r6
 800568c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005690:	bfba      	itte	lt
 8005692:	461c      	movlt	r4, r3
 8005694:	2501      	movlt	r5, #1
 8005696:	2500      	movge	r5, #0
 8005698:	f7ff fd48 	bl	800512c <_Balloc>
 800569c:	4602      	mov	r2, r0
 800569e:	b918      	cbnz	r0, 80056a8 <__mdiff+0x60>
 80056a0:	f240 2145 	movw	r1, #581	@ 0x245
 80056a4:	4b30      	ldr	r3, [pc, #192]	@ (8005768 <__mdiff+0x120>)
 80056a6:	e7e3      	b.n	8005670 <__mdiff+0x28>
 80056a8:	f100 0b14 	add.w	fp, r0, #20
 80056ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80056b0:	f109 0310 	add.w	r3, r9, #16
 80056b4:	60c5      	str	r5, [r0, #12]
 80056b6:	f04f 0c00 	mov.w	ip, #0
 80056ba:	f109 0514 	add.w	r5, r9, #20
 80056be:	46d9      	mov	r9, fp
 80056c0:	6926      	ldr	r6, [r4, #16]
 80056c2:	f104 0e14 	add.w	lr, r4, #20
 80056c6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80056ca:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	9b01      	ldr	r3, [sp, #4]
 80056d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80056d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80056da:	b281      	uxth	r1, r0
 80056dc:	9301      	str	r3, [sp, #4]
 80056de:	fa1f f38a 	uxth.w	r3, sl
 80056e2:	1a5b      	subs	r3, r3, r1
 80056e4:	0c00      	lsrs	r0, r0, #16
 80056e6:	4463      	add	r3, ip
 80056e8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80056ec:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80056f6:	4576      	cmp	r6, lr
 80056f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80056fc:	f849 3b04 	str.w	r3, [r9], #4
 8005700:	d8e6      	bhi.n	80056d0 <__mdiff+0x88>
 8005702:	1b33      	subs	r3, r6, r4
 8005704:	3b15      	subs	r3, #21
 8005706:	f023 0303 	bic.w	r3, r3, #3
 800570a:	3415      	adds	r4, #21
 800570c:	3304      	adds	r3, #4
 800570e:	42a6      	cmp	r6, r4
 8005710:	bf38      	it	cc
 8005712:	2304      	movcc	r3, #4
 8005714:	441d      	add	r5, r3
 8005716:	445b      	add	r3, fp
 8005718:	461e      	mov	r6, r3
 800571a:	462c      	mov	r4, r5
 800571c:	4544      	cmp	r4, r8
 800571e:	d30e      	bcc.n	800573e <__mdiff+0xf6>
 8005720:	f108 0103 	add.w	r1, r8, #3
 8005724:	1b49      	subs	r1, r1, r5
 8005726:	f021 0103 	bic.w	r1, r1, #3
 800572a:	3d03      	subs	r5, #3
 800572c:	45a8      	cmp	r8, r5
 800572e:	bf38      	it	cc
 8005730:	2100      	movcc	r1, #0
 8005732:	440b      	add	r3, r1
 8005734:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005738:	b199      	cbz	r1, 8005762 <__mdiff+0x11a>
 800573a:	6117      	str	r7, [r2, #16]
 800573c:	e79e      	b.n	800567c <__mdiff+0x34>
 800573e:	46e6      	mov	lr, ip
 8005740:	f854 1b04 	ldr.w	r1, [r4], #4
 8005744:	fa1f fc81 	uxth.w	ip, r1
 8005748:	44f4      	add	ip, lr
 800574a:	0c08      	lsrs	r0, r1, #16
 800574c:	4471      	add	r1, lr
 800574e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005752:	b289      	uxth	r1, r1
 8005754:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005758:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800575c:	f846 1b04 	str.w	r1, [r6], #4
 8005760:	e7dc      	b.n	800571c <__mdiff+0xd4>
 8005762:	3f01      	subs	r7, #1
 8005764:	e7e6      	b.n	8005734 <__mdiff+0xec>
 8005766:	bf00      	nop
 8005768:	0800664a 	.word	0x0800664a
 800576c:	0800665b 	.word	0x0800665b

08005770 <__d2b>:
 8005770:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005774:	2101      	movs	r1, #1
 8005776:	4690      	mov	r8, r2
 8005778:	4699      	mov	r9, r3
 800577a:	9e08      	ldr	r6, [sp, #32]
 800577c:	f7ff fcd6 	bl	800512c <_Balloc>
 8005780:	4604      	mov	r4, r0
 8005782:	b930      	cbnz	r0, 8005792 <__d2b+0x22>
 8005784:	4602      	mov	r2, r0
 8005786:	f240 310f 	movw	r1, #783	@ 0x30f
 800578a:	4b23      	ldr	r3, [pc, #140]	@ (8005818 <__d2b+0xa8>)
 800578c:	4823      	ldr	r0, [pc, #140]	@ (800581c <__d2b+0xac>)
 800578e:	f000 fa7f 	bl	8005c90 <__assert_func>
 8005792:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005796:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800579a:	b10d      	cbz	r5, 80057a0 <__d2b+0x30>
 800579c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057a0:	9301      	str	r3, [sp, #4]
 80057a2:	f1b8 0300 	subs.w	r3, r8, #0
 80057a6:	d024      	beq.n	80057f2 <__d2b+0x82>
 80057a8:	4668      	mov	r0, sp
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	f7ff fd85 	bl	80052ba <__lo0bits>
 80057b0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80057b4:	b1d8      	cbz	r0, 80057ee <__d2b+0x7e>
 80057b6:	f1c0 0320 	rsb	r3, r0, #32
 80057ba:	fa02 f303 	lsl.w	r3, r2, r3
 80057be:	430b      	orrs	r3, r1
 80057c0:	40c2      	lsrs	r2, r0
 80057c2:	6163      	str	r3, [r4, #20]
 80057c4:	9201      	str	r2, [sp, #4]
 80057c6:	9b01      	ldr	r3, [sp, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	bf0c      	ite	eq
 80057cc:	2201      	moveq	r2, #1
 80057ce:	2202      	movne	r2, #2
 80057d0:	61a3      	str	r3, [r4, #24]
 80057d2:	6122      	str	r2, [r4, #16]
 80057d4:	b1ad      	cbz	r5, 8005802 <__d2b+0x92>
 80057d6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80057da:	4405      	add	r5, r0
 80057dc:	6035      	str	r5, [r6, #0]
 80057de:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80057e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057e4:	6018      	str	r0, [r3, #0]
 80057e6:	4620      	mov	r0, r4
 80057e8:	b002      	add	sp, #8
 80057ea:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80057ee:	6161      	str	r1, [r4, #20]
 80057f0:	e7e9      	b.n	80057c6 <__d2b+0x56>
 80057f2:	a801      	add	r0, sp, #4
 80057f4:	f7ff fd61 	bl	80052ba <__lo0bits>
 80057f8:	9b01      	ldr	r3, [sp, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	6163      	str	r3, [r4, #20]
 80057fe:	3020      	adds	r0, #32
 8005800:	e7e7      	b.n	80057d2 <__d2b+0x62>
 8005802:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005806:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800580a:	6030      	str	r0, [r6, #0]
 800580c:	6918      	ldr	r0, [r3, #16]
 800580e:	f7ff fd35 	bl	800527c <__hi0bits>
 8005812:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005816:	e7e4      	b.n	80057e2 <__d2b+0x72>
 8005818:	0800664a 	.word	0x0800664a
 800581c:	0800665b 	.word	0x0800665b

08005820 <__ssputs_r>:
 8005820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005824:	461f      	mov	r7, r3
 8005826:	688e      	ldr	r6, [r1, #8]
 8005828:	4682      	mov	sl, r0
 800582a:	42be      	cmp	r6, r7
 800582c:	460c      	mov	r4, r1
 800582e:	4690      	mov	r8, r2
 8005830:	680b      	ldr	r3, [r1, #0]
 8005832:	d82d      	bhi.n	8005890 <__ssputs_r+0x70>
 8005834:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005838:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800583c:	d026      	beq.n	800588c <__ssputs_r+0x6c>
 800583e:	6965      	ldr	r5, [r4, #20]
 8005840:	6909      	ldr	r1, [r1, #16]
 8005842:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005846:	eba3 0901 	sub.w	r9, r3, r1
 800584a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800584e:	1c7b      	adds	r3, r7, #1
 8005850:	444b      	add	r3, r9
 8005852:	106d      	asrs	r5, r5, #1
 8005854:	429d      	cmp	r5, r3
 8005856:	bf38      	it	cc
 8005858:	461d      	movcc	r5, r3
 800585a:	0553      	lsls	r3, r2, #21
 800585c:	d527      	bpl.n	80058ae <__ssputs_r+0x8e>
 800585e:	4629      	mov	r1, r5
 8005860:	f7ff fbd8 	bl	8005014 <_malloc_r>
 8005864:	4606      	mov	r6, r0
 8005866:	b360      	cbz	r0, 80058c2 <__ssputs_r+0xa2>
 8005868:	464a      	mov	r2, r9
 800586a:	6921      	ldr	r1, [r4, #16]
 800586c:	f000 fa02 	bl	8005c74 <memcpy>
 8005870:	89a3      	ldrh	r3, [r4, #12]
 8005872:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800587a:	81a3      	strh	r3, [r4, #12]
 800587c:	6126      	str	r6, [r4, #16]
 800587e:	444e      	add	r6, r9
 8005880:	6026      	str	r6, [r4, #0]
 8005882:	463e      	mov	r6, r7
 8005884:	6165      	str	r5, [r4, #20]
 8005886:	eba5 0509 	sub.w	r5, r5, r9
 800588a:	60a5      	str	r5, [r4, #8]
 800588c:	42be      	cmp	r6, r7
 800588e:	d900      	bls.n	8005892 <__ssputs_r+0x72>
 8005890:	463e      	mov	r6, r7
 8005892:	4632      	mov	r2, r6
 8005894:	4641      	mov	r1, r8
 8005896:	6820      	ldr	r0, [r4, #0]
 8005898:	f000 f9c2 	bl	8005c20 <memmove>
 800589c:	2000      	movs	r0, #0
 800589e:	68a3      	ldr	r3, [r4, #8]
 80058a0:	1b9b      	subs	r3, r3, r6
 80058a2:	60a3      	str	r3, [r4, #8]
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	4433      	add	r3, r6
 80058a8:	6023      	str	r3, [r4, #0]
 80058aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ae:	462a      	mov	r2, r5
 80058b0:	f000 fa32 	bl	8005d18 <_realloc_r>
 80058b4:	4606      	mov	r6, r0
 80058b6:	2800      	cmp	r0, #0
 80058b8:	d1e0      	bne.n	800587c <__ssputs_r+0x5c>
 80058ba:	4650      	mov	r0, sl
 80058bc:	6921      	ldr	r1, [r4, #16]
 80058be:	f7ff fb37 	bl	8004f30 <_free_r>
 80058c2:	230c      	movs	r3, #12
 80058c4:	f8ca 3000 	str.w	r3, [sl]
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	f04f 30ff 	mov.w	r0, #4294967295
 80058ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058d2:	81a3      	strh	r3, [r4, #12]
 80058d4:	e7e9      	b.n	80058aa <__ssputs_r+0x8a>
	...

080058d8 <_svfiprintf_r>:
 80058d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	4698      	mov	r8, r3
 80058de:	898b      	ldrh	r3, [r1, #12]
 80058e0:	4607      	mov	r7, r0
 80058e2:	061b      	lsls	r3, r3, #24
 80058e4:	460d      	mov	r5, r1
 80058e6:	4614      	mov	r4, r2
 80058e8:	b09d      	sub	sp, #116	@ 0x74
 80058ea:	d510      	bpl.n	800590e <_svfiprintf_r+0x36>
 80058ec:	690b      	ldr	r3, [r1, #16]
 80058ee:	b973      	cbnz	r3, 800590e <_svfiprintf_r+0x36>
 80058f0:	2140      	movs	r1, #64	@ 0x40
 80058f2:	f7ff fb8f 	bl	8005014 <_malloc_r>
 80058f6:	6028      	str	r0, [r5, #0]
 80058f8:	6128      	str	r0, [r5, #16]
 80058fa:	b930      	cbnz	r0, 800590a <_svfiprintf_r+0x32>
 80058fc:	230c      	movs	r3, #12
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	f04f 30ff 	mov.w	r0, #4294967295
 8005904:	b01d      	add	sp, #116	@ 0x74
 8005906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590a:	2340      	movs	r3, #64	@ 0x40
 800590c:	616b      	str	r3, [r5, #20]
 800590e:	2300      	movs	r3, #0
 8005910:	9309      	str	r3, [sp, #36]	@ 0x24
 8005912:	2320      	movs	r3, #32
 8005914:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005918:	2330      	movs	r3, #48	@ 0x30
 800591a:	f04f 0901 	mov.w	r9, #1
 800591e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005922:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005abc <_svfiprintf_r+0x1e4>
 8005926:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800592a:	4623      	mov	r3, r4
 800592c:	469a      	mov	sl, r3
 800592e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005932:	b10a      	cbz	r2, 8005938 <_svfiprintf_r+0x60>
 8005934:	2a25      	cmp	r2, #37	@ 0x25
 8005936:	d1f9      	bne.n	800592c <_svfiprintf_r+0x54>
 8005938:	ebba 0b04 	subs.w	fp, sl, r4
 800593c:	d00b      	beq.n	8005956 <_svfiprintf_r+0x7e>
 800593e:	465b      	mov	r3, fp
 8005940:	4622      	mov	r2, r4
 8005942:	4629      	mov	r1, r5
 8005944:	4638      	mov	r0, r7
 8005946:	f7ff ff6b 	bl	8005820 <__ssputs_r>
 800594a:	3001      	adds	r0, #1
 800594c:	f000 80a7 	beq.w	8005a9e <_svfiprintf_r+0x1c6>
 8005950:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005952:	445a      	add	r2, fp
 8005954:	9209      	str	r2, [sp, #36]	@ 0x24
 8005956:	f89a 3000 	ldrb.w	r3, [sl]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 809f 	beq.w	8005a9e <_svfiprintf_r+0x1c6>
 8005960:	2300      	movs	r3, #0
 8005962:	f04f 32ff 	mov.w	r2, #4294967295
 8005966:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800596a:	f10a 0a01 	add.w	sl, sl, #1
 800596e:	9304      	str	r3, [sp, #16]
 8005970:	9307      	str	r3, [sp, #28]
 8005972:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005976:	931a      	str	r3, [sp, #104]	@ 0x68
 8005978:	4654      	mov	r4, sl
 800597a:	2205      	movs	r2, #5
 800597c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005980:	484e      	ldr	r0, [pc, #312]	@ (8005abc <_svfiprintf_r+0x1e4>)
 8005982:	f7fe fc6a 	bl	800425a <memchr>
 8005986:	9a04      	ldr	r2, [sp, #16]
 8005988:	b9d8      	cbnz	r0, 80059c2 <_svfiprintf_r+0xea>
 800598a:	06d0      	lsls	r0, r2, #27
 800598c:	bf44      	itt	mi
 800598e:	2320      	movmi	r3, #32
 8005990:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005994:	0711      	lsls	r1, r2, #28
 8005996:	bf44      	itt	mi
 8005998:	232b      	movmi	r3, #43	@ 0x2b
 800599a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800599e:	f89a 3000 	ldrb.w	r3, [sl]
 80059a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80059a4:	d015      	beq.n	80059d2 <_svfiprintf_r+0xfa>
 80059a6:	4654      	mov	r4, sl
 80059a8:	2000      	movs	r0, #0
 80059aa:	f04f 0c0a 	mov.w	ip, #10
 80059ae:	9a07      	ldr	r2, [sp, #28]
 80059b0:	4621      	mov	r1, r4
 80059b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059b6:	3b30      	subs	r3, #48	@ 0x30
 80059b8:	2b09      	cmp	r3, #9
 80059ba:	d94b      	bls.n	8005a54 <_svfiprintf_r+0x17c>
 80059bc:	b1b0      	cbz	r0, 80059ec <_svfiprintf_r+0x114>
 80059be:	9207      	str	r2, [sp, #28]
 80059c0:	e014      	b.n	80059ec <_svfiprintf_r+0x114>
 80059c2:	eba0 0308 	sub.w	r3, r0, r8
 80059c6:	fa09 f303 	lsl.w	r3, r9, r3
 80059ca:	4313      	orrs	r3, r2
 80059cc:	46a2      	mov	sl, r4
 80059ce:	9304      	str	r3, [sp, #16]
 80059d0:	e7d2      	b.n	8005978 <_svfiprintf_r+0xa0>
 80059d2:	9b03      	ldr	r3, [sp, #12]
 80059d4:	1d19      	adds	r1, r3, #4
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	9103      	str	r1, [sp, #12]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	bfbb      	ittet	lt
 80059de:	425b      	neglt	r3, r3
 80059e0:	f042 0202 	orrlt.w	r2, r2, #2
 80059e4:	9307      	strge	r3, [sp, #28]
 80059e6:	9307      	strlt	r3, [sp, #28]
 80059e8:	bfb8      	it	lt
 80059ea:	9204      	strlt	r2, [sp, #16]
 80059ec:	7823      	ldrb	r3, [r4, #0]
 80059ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80059f0:	d10a      	bne.n	8005a08 <_svfiprintf_r+0x130>
 80059f2:	7863      	ldrb	r3, [r4, #1]
 80059f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80059f6:	d132      	bne.n	8005a5e <_svfiprintf_r+0x186>
 80059f8:	9b03      	ldr	r3, [sp, #12]
 80059fa:	3402      	adds	r4, #2
 80059fc:	1d1a      	adds	r2, r3, #4
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	9203      	str	r2, [sp, #12]
 8005a02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a06:	9305      	str	r3, [sp, #20]
 8005a08:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005ac0 <_svfiprintf_r+0x1e8>
 8005a0c:	2203      	movs	r2, #3
 8005a0e:	4650      	mov	r0, sl
 8005a10:	7821      	ldrb	r1, [r4, #0]
 8005a12:	f7fe fc22 	bl	800425a <memchr>
 8005a16:	b138      	cbz	r0, 8005a28 <_svfiprintf_r+0x150>
 8005a18:	2240      	movs	r2, #64	@ 0x40
 8005a1a:	9b04      	ldr	r3, [sp, #16]
 8005a1c:	eba0 000a 	sub.w	r0, r0, sl
 8005a20:	4082      	lsls	r2, r0
 8005a22:	4313      	orrs	r3, r2
 8005a24:	3401      	adds	r4, #1
 8005a26:	9304      	str	r3, [sp, #16]
 8005a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a2c:	2206      	movs	r2, #6
 8005a2e:	4825      	ldr	r0, [pc, #148]	@ (8005ac4 <_svfiprintf_r+0x1ec>)
 8005a30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a34:	f7fe fc11 	bl	800425a <memchr>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d036      	beq.n	8005aaa <_svfiprintf_r+0x1d2>
 8005a3c:	4b22      	ldr	r3, [pc, #136]	@ (8005ac8 <_svfiprintf_r+0x1f0>)
 8005a3e:	bb1b      	cbnz	r3, 8005a88 <_svfiprintf_r+0x1b0>
 8005a40:	9b03      	ldr	r3, [sp, #12]
 8005a42:	3307      	adds	r3, #7
 8005a44:	f023 0307 	bic.w	r3, r3, #7
 8005a48:	3308      	adds	r3, #8
 8005a4a:	9303      	str	r3, [sp, #12]
 8005a4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a4e:	4433      	add	r3, r6
 8005a50:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a52:	e76a      	b.n	800592a <_svfiprintf_r+0x52>
 8005a54:	460c      	mov	r4, r1
 8005a56:	2001      	movs	r0, #1
 8005a58:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a5c:	e7a8      	b.n	80059b0 <_svfiprintf_r+0xd8>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f04f 0c0a 	mov.w	ip, #10
 8005a64:	4619      	mov	r1, r3
 8005a66:	3401      	adds	r4, #1
 8005a68:	9305      	str	r3, [sp, #20]
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a70:	3a30      	subs	r2, #48	@ 0x30
 8005a72:	2a09      	cmp	r2, #9
 8005a74:	d903      	bls.n	8005a7e <_svfiprintf_r+0x1a6>
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0c6      	beq.n	8005a08 <_svfiprintf_r+0x130>
 8005a7a:	9105      	str	r1, [sp, #20]
 8005a7c:	e7c4      	b.n	8005a08 <_svfiprintf_r+0x130>
 8005a7e:	4604      	mov	r4, r0
 8005a80:	2301      	movs	r3, #1
 8005a82:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a86:	e7f0      	b.n	8005a6a <_svfiprintf_r+0x192>
 8005a88:	ab03      	add	r3, sp, #12
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	462a      	mov	r2, r5
 8005a8e:	4638      	mov	r0, r7
 8005a90:	4b0e      	ldr	r3, [pc, #56]	@ (8005acc <_svfiprintf_r+0x1f4>)
 8005a92:	a904      	add	r1, sp, #16
 8005a94:	f7fd fe7e 	bl	8003794 <_printf_float>
 8005a98:	1c42      	adds	r2, r0, #1
 8005a9a:	4606      	mov	r6, r0
 8005a9c:	d1d6      	bne.n	8005a4c <_svfiprintf_r+0x174>
 8005a9e:	89ab      	ldrh	r3, [r5, #12]
 8005aa0:	065b      	lsls	r3, r3, #25
 8005aa2:	f53f af2d 	bmi.w	8005900 <_svfiprintf_r+0x28>
 8005aa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005aa8:	e72c      	b.n	8005904 <_svfiprintf_r+0x2c>
 8005aaa:	ab03      	add	r3, sp, #12
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	462a      	mov	r2, r5
 8005ab0:	4638      	mov	r0, r7
 8005ab2:	4b06      	ldr	r3, [pc, #24]	@ (8005acc <_svfiprintf_r+0x1f4>)
 8005ab4:	a904      	add	r1, sp, #16
 8005ab6:	f7fe f90b 	bl	8003cd0 <_printf_i>
 8005aba:	e7ed      	b.n	8005a98 <_svfiprintf_r+0x1c0>
 8005abc:	080066b4 	.word	0x080066b4
 8005ac0:	080066ba 	.word	0x080066ba
 8005ac4:	080066be 	.word	0x080066be
 8005ac8:	08003795 	.word	0x08003795
 8005acc:	08005821 	.word	0x08005821

08005ad0 <__sflush_r>:
 8005ad0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad6:	0716      	lsls	r6, r2, #28
 8005ad8:	4605      	mov	r5, r0
 8005ada:	460c      	mov	r4, r1
 8005adc:	d454      	bmi.n	8005b88 <__sflush_r+0xb8>
 8005ade:	684b      	ldr	r3, [r1, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	dc02      	bgt.n	8005aea <__sflush_r+0x1a>
 8005ae4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	dd48      	ble.n	8005b7c <__sflush_r+0xac>
 8005aea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005aec:	2e00      	cmp	r6, #0
 8005aee:	d045      	beq.n	8005b7c <__sflush_r+0xac>
 8005af0:	2300      	movs	r3, #0
 8005af2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005af6:	682f      	ldr	r7, [r5, #0]
 8005af8:	6a21      	ldr	r1, [r4, #32]
 8005afa:	602b      	str	r3, [r5, #0]
 8005afc:	d030      	beq.n	8005b60 <__sflush_r+0x90>
 8005afe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005b00:	89a3      	ldrh	r3, [r4, #12]
 8005b02:	0759      	lsls	r1, r3, #29
 8005b04:	d505      	bpl.n	8005b12 <__sflush_r+0x42>
 8005b06:	6863      	ldr	r3, [r4, #4]
 8005b08:	1ad2      	subs	r2, r2, r3
 8005b0a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005b0c:	b10b      	cbz	r3, 8005b12 <__sflush_r+0x42>
 8005b0e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b10:	1ad2      	subs	r2, r2, r3
 8005b12:	2300      	movs	r3, #0
 8005b14:	4628      	mov	r0, r5
 8005b16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b18:	6a21      	ldr	r1, [r4, #32]
 8005b1a:	47b0      	blx	r6
 8005b1c:	1c43      	adds	r3, r0, #1
 8005b1e:	89a3      	ldrh	r3, [r4, #12]
 8005b20:	d106      	bne.n	8005b30 <__sflush_r+0x60>
 8005b22:	6829      	ldr	r1, [r5, #0]
 8005b24:	291d      	cmp	r1, #29
 8005b26:	d82b      	bhi.n	8005b80 <__sflush_r+0xb0>
 8005b28:	4a28      	ldr	r2, [pc, #160]	@ (8005bcc <__sflush_r+0xfc>)
 8005b2a:	40ca      	lsrs	r2, r1
 8005b2c:	07d6      	lsls	r6, r2, #31
 8005b2e:	d527      	bpl.n	8005b80 <__sflush_r+0xb0>
 8005b30:	2200      	movs	r2, #0
 8005b32:	6062      	str	r2, [r4, #4]
 8005b34:	6922      	ldr	r2, [r4, #16]
 8005b36:	04d9      	lsls	r1, r3, #19
 8005b38:	6022      	str	r2, [r4, #0]
 8005b3a:	d504      	bpl.n	8005b46 <__sflush_r+0x76>
 8005b3c:	1c42      	adds	r2, r0, #1
 8005b3e:	d101      	bne.n	8005b44 <__sflush_r+0x74>
 8005b40:	682b      	ldr	r3, [r5, #0]
 8005b42:	b903      	cbnz	r3, 8005b46 <__sflush_r+0x76>
 8005b44:	6560      	str	r0, [r4, #84]	@ 0x54
 8005b46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b48:	602f      	str	r7, [r5, #0]
 8005b4a:	b1b9      	cbz	r1, 8005b7c <__sflush_r+0xac>
 8005b4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b50:	4299      	cmp	r1, r3
 8005b52:	d002      	beq.n	8005b5a <__sflush_r+0x8a>
 8005b54:	4628      	mov	r0, r5
 8005b56:	f7ff f9eb 	bl	8004f30 <_free_r>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b5e:	e00d      	b.n	8005b7c <__sflush_r+0xac>
 8005b60:	2301      	movs	r3, #1
 8005b62:	4628      	mov	r0, r5
 8005b64:	47b0      	blx	r6
 8005b66:	4602      	mov	r2, r0
 8005b68:	1c50      	adds	r0, r2, #1
 8005b6a:	d1c9      	bne.n	8005b00 <__sflush_r+0x30>
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d0c6      	beq.n	8005b00 <__sflush_r+0x30>
 8005b72:	2b1d      	cmp	r3, #29
 8005b74:	d001      	beq.n	8005b7a <__sflush_r+0xaa>
 8005b76:	2b16      	cmp	r3, #22
 8005b78:	d11d      	bne.n	8005bb6 <__sflush_r+0xe6>
 8005b7a:	602f      	str	r7, [r5, #0]
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	e021      	b.n	8005bc4 <__sflush_r+0xf4>
 8005b80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b84:	b21b      	sxth	r3, r3
 8005b86:	e01a      	b.n	8005bbe <__sflush_r+0xee>
 8005b88:	690f      	ldr	r7, [r1, #16]
 8005b8a:	2f00      	cmp	r7, #0
 8005b8c:	d0f6      	beq.n	8005b7c <__sflush_r+0xac>
 8005b8e:	0793      	lsls	r3, r2, #30
 8005b90:	bf18      	it	ne
 8005b92:	2300      	movne	r3, #0
 8005b94:	680e      	ldr	r6, [r1, #0]
 8005b96:	bf08      	it	eq
 8005b98:	694b      	ldreq	r3, [r1, #20]
 8005b9a:	1bf6      	subs	r6, r6, r7
 8005b9c:	600f      	str	r7, [r1, #0]
 8005b9e:	608b      	str	r3, [r1, #8]
 8005ba0:	2e00      	cmp	r6, #0
 8005ba2:	ddeb      	ble.n	8005b7c <__sflush_r+0xac>
 8005ba4:	4633      	mov	r3, r6
 8005ba6:	463a      	mov	r2, r7
 8005ba8:	4628      	mov	r0, r5
 8005baa:	6a21      	ldr	r1, [r4, #32]
 8005bac:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005bb0:	47e0      	blx	ip
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	dc07      	bgt.n	8005bc6 <__sflush_r+0xf6>
 8005bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc2:	81a3      	strh	r3, [r4, #12]
 8005bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bc6:	4407      	add	r7, r0
 8005bc8:	1a36      	subs	r6, r6, r0
 8005bca:	e7e9      	b.n	8005ba0 <__sflush_r+0xd0>
 8005bcc:	20400001 	.word	0x20400001

08005bd0 <_fflush_r>:
 8005bd0:	b538      	push	{r3, r4, r5, lr}
 8005bd2:	690b      	ldr	r3, [r1, #16]
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	b913      	cbnz	r3, 8005be0 <_fflush_r+0x10>
 8005bda:	2500      	movs	r5, #0
 8005bdc:	4628      	mov	r0, r5
 8005bde:	bd38      	pop	{r3, r4, r5, pc}
 8005be0:	b118      	cbz	r0, 8005bea <_fflush_r+0x1a>
 8005be2:	6a03      	ldr	r3, [r0, #32]
 8005be4:	b90b      	cbnz	r3, 8005bea <_fflush_r+0x1a>
 8005be6:	f7fe fa1d 	bl	8004024 <__sinit>
 8005bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0f3      	beq.n	8005bda <_fflush_r+0xa>
 8005bf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005bf4:	07d0      	lsls	r0, r2, #31
 8005bf6:	d404      	bmi.n	8005c02 <_fflush_r+0x32>
 8005bf8:	0599      	lsls	r1, r3, #22
 8005bfa:	d402      	bmi.n	8005c02 <_fflush_r+0x32>
 8005bfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bfe:	f7fe fb2a 	bl	8004256 <__retarget_lock_acquire_recursive>
 8005c02:	4628      	mov	r0, r5
 8005c04:	4621      	mov	r1, r4
 8005c06:	f7ff ff63 	bl	8005ad0 <__sflush_r>
 8005c0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c0c:	4605      	mov	r5, r0
 8005c0e:	07da      	lsls	r2, r3, #31
 8005c10:	d4e4      	bmi.n	8005bdc <_fflush_r+0xc>
 8005c12:	89a3      	ldrh	r3, [r4, #12]
 8005c14:	059b      	lsls	r3, r3, #22
 8005c16:	d4e1      	bmi.n	8005bdc <_fflush_r+0xc>
 8005c18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c1a:	f7fe fb1d 	bl	8004258 <__retarget_lock_release_recursive>
 8005c1e:	e7dd      	b.n	8005bdc <_fflush_r+0xc>

08005c20 <memmove>:
 8005c20:	4288      	cmp	r0, r1
 8005c22:	b510      	push	{r4, lr}
 8005c24:	eb01 0402 	add.w	r4, r1, r2
 8005c28:	d902      	bls.n	8005c30 <memmove+0x10>
 8005c2a:	4284      	cmp	r4, r0
 8005c2c:	4623      	mov	r3, r4
 8005c2e:	d807      	bhi.n	8005c40 <memmove+0x20>
 8005c30:	1e43      	subs	r3, r0, #1
 8005c32:	42a1      	cmp	r1, r4
 8005c34:	d008      	beq.n	8005c48 <memmove+0x28>
 8005c36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c3e:	e7f8      	b.n	8005c32 <memmove+0x12>
 8005c40:	4601      	mov	r1, r0
 8005c42:	4402      	add	r2, r0
 8005c44:	428a      	cmp	r2, r1
 8005c46:	d100      	bne.n	8005c4a <memmove+0x2a>
 8005c48:	bd10      	pop	{r4, pc}
 8005c4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c52:	e7f7      	b.n	8005c44 <memmove+0x24>

08005c54 <_sbrk_r>:
 8005c54:	b538      	push	{r3, r4, r5, lr}
 8005c56:	2300      	movs	r3, #0
 8005c58:	4d05      	ldr	r5, [pc, #20]	@ (8005c70 <_sbrk_r+0x1c>)
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	4608      	mov	r0, r1
 8005c5e:	602b      	str	r3, [r5, #0]
 8005c60:	f7fb fe32 	bl	80018c8 <_sbrk>
 8005c64:	1c43      	adds	r3, r0, #1
 8005c66:	d102      	bne.n	8005c6e <_sbrk_r+0x1a>
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	b103      	cbz	r3, 8005c6e <_sbrk_r+0x1a>
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	bd38      	pop	{r3, r4, r5, pc}
 8005c70:	200003f8 	.word	0x200003f8

08005c74 <memcpy>:
 8005c74:	440a      	add	r2, r1
 8005c76:	4291      	cmp	r1, r2
 8005c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c7c:	d100      	bne.n	8005c80 <memcpy+0xc>
 8005c7e:	4770      	bx	lr
 8005c80:	b510      	push	{r4, lr}
 8005c82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c86:	4291      	cmp	r1, r2
 8005c88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c8c:	d1f9      	bne.n	8005c82 <memcpy+0xe>
 8005c8e:	bd10      	pop	{r4, pc}

08005c90 <__assert_func>:
 8005c90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c92:	4614      	mov	r4, r2
 8005c94:	461a      	mov	r2, r3
 8005c96:	4b09      	ldr	r3, [pc, #36]	@ (8005cbc <__assert_func+0x2c>)
 8005c98:	4605      	mov	r5, r0
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68d8      	ldr	r0, [r3, #12]
 8005c9e:	b14c      	cbz	r4, 8005cb4 <__assert_func+0x24>
 8005ca0:	4b07      	ldr	r3, [pc, #28]	@ (8005cc0 <__assert_func+0x30>)
 8005ca2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ca6:	9100      	str	r1, [sp, #0]
 8005ca8:	462b      	mov	r3, r5
 8005caa:	4906      	ldr	r1, [pc, #24]	@ (8005cc4 <__assert_func+0x34>)
 8005cac:	f000 f870 	bl	8005d90 <fiprintf>
 8005cb0:	f000 f880 	bl	8005db4 <abort>
 8005cb4:	4b04      	ldr	r3, [pc, #16]	@ (8005cc8 <__assert_func+0x38>)
 8005cb6:	461c      	mov	r4, r3
 8005cb8:	e7f3      	b.n	8005ca2 <__assert_func+0x12>
 8005cba:	bf00      	nop
 8005cbc:	20000018 	.word	0x20000018
 8005cc0:	080066cf 	.word	0x080066cf
 8005cc4:	080066dc 	.word	0x080066dc
 8005cc8:	0800670a 	.word	0x0800670a

08005ccc <_calloc_r>:
 8005ccc:	b570      	push	{r4, r5, r6, lr}
 8005cce:	fba1 5402 	umull	r5, r4, r1, r2
 8005cd2:	b934      	cbnz	r4, 8005ce2 <_calloc_r+0x16>
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	f7ff f99d 	bl	8005014 <_malloc_r>
 8005cda:	4606      	mov	r6, r0
 8005cdc:	b928      	cbnz	r0, 8005cea <_calloc_r+0x1e>
 8005cde:	4630      	mov	r0, r6
 8005ce0:	bd70      	pop	{r4, r5, r6, pc}
 8005ce2:	220c      	movs	r2, #12
 8005ce4:	2600      	movs	r6, #0
 8005ce6:	6002      	str	r2, [r0, #0]
 8005ce8:	e7f9      	b.n	8005cde <_calloc_r+0x12>
 8005cea:	462a      	mov	r2, r5
 8005cec:	4621      	mov	r1, r4
 8005cee:	f7fe fa34 	bl	800415a <memset>
 8005cf2:	e7f4      	b.n	8005cde <_calloc_r+0x12>

08005cf4 <__ascii_mbtowc>:
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	b901      	cbnz	r1, 8005cfa <__ascii_mbtowc+0x6>
 8005cf8:	a901      	add	r1, sp, #4
 8005cfa:	b142      	cbz	r2, 8005d0e <__ascii_mbtowc+0x1a>
 8005cfc:	b14b      	cbz	r3, 8005d12 <__ascii_mbtowc+0x1e>
 8005cfe:	7813      	ldrb	r3, [r2, #0]
 8005d00:	600b      	str	r3, [r1, #0]
 8005d02:	7812      	ldrb	r2, [r2, #0]
 8005d04:	1e10      	subs	r0, r2, #0
 8005d06:	bf18      	it	ne
 8005d08:	2001      	movne	r0, #1
 8005d0a:	b002      	add	sp, #8
 8005d0c:	4770      	bx	lr
 8005d0e:	4610      	mov	r0, r2
 8005d10:	e7fb      	b.n	8005d0a <__ascii_mbtowc+0x16>
 8005d12:	f06f 0001 	mvn.w	r0, #1
 8005d16:	e7f8      	b.n	8005d0a <__ascii_mbtowc+0x16>

08005d18 <_realloc_r>:
 8005d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d1c:	4607      	mov	r7, r0
 8005d1e:	4614      	mov	r4, r2
 8005d20:	460d      	mov	r5, r1
 8005d22:	b921      	cbnz	r1, 8005d2e <_realloc_r+0x16>
 8005d24:	4611      	mov	r1, r2
 8005d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d2a:	f7ff b973 	b.w	8005014 <_malloc_r>
 8005d2e:	b92a      	cbnz	r2, 8005d3c <_realloc_r+0x24>
 8005d30:	f7ff f8fe 	bl	8004f30 <_free_r>
 8005d34:	4625      	mov	r5, r4
 8005d36:	4628      	mov	r0, r5
 8005d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d3c:	f000 f841 	bl	8005dc2 <_malloc_usable_size_r>
 8005d40:	4284      	cmp	r4, r0
 8005d42:	4606      	mov	r6, r0
 8005d44:	d802      	bhi.n	8005d4c <_realloc_r+0x34>
 8005d46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d4a:	d8f4      	bhi.n	8005d36 <_realloc_r+0x1e>
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	4638      	mov	r0, r7
 8005d50:	f7ff f960 	bl	8005014 <_malloc_r>
 8005d54:	4680      	mov	r8, r0
 8005d56:	b908      	cbnz	r0, 8005d5c <_realloc_r+0x44>
 8005d58:	4645      	mov	r5, r8
 8005d5a:	e7ec      	b.n	8005d36 <_realloc_r+0x1e>
 8005d5c:	42b4      	cmp	r4, r6
 8005d5e:	4622      	mov	r2, r4
 8005d60:	4629      	mov	r1, r5
 8005d62:	bf28      	it	cs
 8005d64:	4632      	movcs	r2, r6
 8005d66:	f7ff ff85 	bl	8005c74 <memcpy>
 8005d6a:	4629      	mov	r1, r5
 8005d6c:	4638      	mov	r0, r7
 8005d6e:	f7ff f8df 	bl	8004f30 <_free_r>
 8005d72:	e7f1      	b.n	8005d58 <_realloc_r+0x40>

08005d74 <__ascii_wctomb>:
 8005d74:	4603      	mov	r3, r0
 8005d76:	4608      	mov	r0, r1
 8005d78:	b141      	cbz	r1, 8005d8c <__ascii_wctomb+0x18>
 8005d7a:	2aff      	cmp	r2, #255	@ 0xff
 8005d7c:	d904      	bls.n	8005d88 <__ascii_wctomb+0x14>
 8005d7e:	228a      	movs	r2, #138	@ 0x8a
 8005d80:	f04f 30ff 	mov.w	r0, #4294967295
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	4770      	bx	lr
 8005d88:	2001      	movs	r0, #1
 8005d8a:	700a      	strb	r2, [r1, #0]
 8005d8c:	4770      	bx	lr
	...

08005d90 <fiprintf>:
 8005d90:	b40e      	push	{r1, r2, r3}
 8005d92:	b503      	push	{r0, r1, lr}
 8005d94:	4601      	mov	r1, r0
 8005d96:	ab03      	add	r3, sp, #12
 8005d98:	4805      	ldr	r0, [pc, #20]	@ (8005db0 <fiprintf+0x20>)
 8005d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d9e:	6800      	ldr	r0, [r0, #0]
 8005da0:	9301      	str	r3, [sp, #4]
 8005da2:	f000 f83d 	bl	8005e20 <_vfiprintf_r>
 8005da6:	b002      	add	sp, #8
 8005da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dac:	b003      	add	sp, #12
 8005dae:	4770      	bx	lr
 8005db0:	20000018 	.word	0x20000018

08005db4 <abort>:
 8005db4:	2006      	movs	r0, #6
 8005db6:	b508      	push	{r3, lr}
 8005db8:	f000 fa06 	bl	80061c8 <raise>
 8005dbc:	2001      	movs	r0, #1
 8005dbe:	f7fb fd0e 	bl	80017de <_exit>

08005dc2 <_malloc_usable_size_r>:
 8005dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dc6:	1f18      	subs	r0, r3, #4
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	bfbc      	itt	lt
 8005dcc:	580b      	ldrlt	r3, [r1, r0]
 8005dce:	18c0      	addlt	r0, r0, r3
 8005dd0:	4770      	bx	lr

08005dd2 <__sfputc_r>:
 8005dd2:	6893      	ldr	r3, [r2, #8]
 8005dd4:	b410      	push	{r4}
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	6093      	str	r3, [r2, #8]
 8005ddc:	da07      	bge.n	8005dee <__sfputc_r+0x1c>
 8005dde:	6994      	ldr	r4, [r2, #24]
 8005de0:	42a3      	cmp	r3, r4
 8005de2:	db01      	blt.n	8005de8 <__sfputc_r+0x16>
 8005de4:	290a      	cmp	r1, #10
 8005de6:	d102      	bne.n	8005dee <__sfputc_r+0x1c>
 8005de8:	bc10      	pop	{r4}
 8005dea:	f000 b931 	b.w	8006050 <__swbuf_r>
 8005dee:	6813      	ldr	r3, [r2, #0]
 8005df0:	1c58      	adds	r0, r3, #1
 8005df2:	6010      	str	r0, [r2, #0]
 8005df4:	7019      	strb	r1, [r3, #0]
 8005df6:	4608      	mov	r0, r1
 8005df8:	bc10      	pop	{r4}
 8005dfa:	4770      	bx	lr

08005dfc <__sfputs_r>:
 8005dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfe:	4606      	mov	r6, r0
 8005e00:	460f      	mov	r7, r1
 8005e02:	4614      	mov	r4, r2
 8005e04:	18d5      	adds	r5, r2, r3
 8005e06:	42ac      	cmp	r4, r5
 8005e08:	d101      	bne.n	8005e0e <__sfputs_r+0x12>
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	e007      	b.n	8005e1e <__sfputs_r+0x22>
 8005e0e:	463a      	mov	r2, r7
 8005e10:	4630      	mov	r0, r6
 8005e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e16:	f7ff ffdc 	bl	8005dd2 <__sfputc_r>
 8005e1a:	1c43      	adds	r3, r0, #1
 8005e1c:	d1f3      	bne.n	8005e06 <__sfputs_r+0xa>
 8005e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005e20 <_vfiprintf_r>:
 8005e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e24:	460d      	mov	r5, r1
 8005e26:	4614      	mov	r4, r2
 8005e28:	4698      	mov	r8, r3
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	b09d      	sub	sp, #116	@ 0x74
 8005e2e:	b118      	cbz	r0, 8005e38 <_vfiprintf_r+0x18>
 8005e30:	6a03      	ldr	r3, [r0, #32]
 8005e32:	b90b      	cbnz	r3, 8005e38 <_vfiprintf_r+0x18>
 8005e34:	f7fe f8f6 	bl	8004024 <__sinit>
 8005e38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e3a:	07d9      	lsls	r1, r3, #31
 8005e3c:	d405      	bmi.n	8005e4a <_vfiprintf_r+0x2a>
 8005e3e:	89ab      	ldrh	r3, [r5, #12]
 8005e40:	059a      	lsls	r2, r3, #22
 8005e42:	d402      	bmi.n	8005e4a <_vfiprintf_r+0x2a>
 8005e44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e46:	f7fe fa06 	bl	8004256 <__retarget_lock_acquire_recursive>
 8005e4a:	89ab      	ldrh	r3, [r5, #12]
 8005e4c:	071b      	lsls	r3, r3, #28
 8005e4e:	d501      	bpl.n	8005e54 <_vfiprintf_r+0x34>
 8005e50:	692b      	ldr	r3, [r5, #16]
 8005e52:	b99b      	cbnz	r3, 8005e7c <_vfiprintf_r+0x5c>
 8005e54:	4629      	mov	r1, r5
 8005e56:	4630      	mov	r0, r6
 8005e58:	f000 f938 	bl	80060cc <__swsetup_r>
 8005e5c:	b170      	cbz	r0, 8005e7c <_vfiprintf_r+0x5c>
 8005e5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e60:	07dc      	lsls	r4, r3, #31
 8005e62:	d504      	bpl.n	8005e6e <_vfiprintf_r+0x4e>
 8005e64:	f04f 30ff 	mov.w	r0, #4294967295
 8005e68:	b01d      	add	sp, #116	@ 0x74
 8005e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e6e:	89ab      	ldrh	r3, [r5, #12]
 8005e70:	0598      	lsls	r0, r3, #22
 8005e72:	d4f7      	bmi.n	8005e64 <_vfiprintf_r+0x44>
 8005e74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e76:	f7fe f9ef 	bl	8004258 <__retarget_lock_release_recursive>
 8005e7a:	e7f3      	b.n	8005e64 <_vfiprintf_r+0x44>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e80:	2320      	movs	r3, #32
 8005e82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e86:	2330      	movs	r3, #48	@ 0x30
 8005e88:	f04f 0901 	mov.w	r9, #1
 8005e8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e90:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800603c <_vfiprintf_r+0x21c>
 8005e94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e98:	4623      	mov	r3, r4
 8005e9a:	469a      	mov	sl, r3
 8005e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ea0:	b10a      	cbz	r2, 8005ea6 <_vfiprintf_r+0x86>
 8005ea2:	2a25      	cmp	r2, #37	@ 0x25
 8005ea4:	d1f9      	bne.n	8005e9a <_vfiprintf_r+0x7a>
 8005ea6:	ebba 0b04 	subs.w	fp, sl, r4
 8005eaa:	d00b      	beq.n	8005ec4 <_vfiprintf_r+0xa4>
 8005eac:	465b      	mov	r3, fp
 8005eae:	4622      	mov	r2, r4
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	f7ff ffa2 	bl	8005dfc <__sfputs_r>
 8005eb8:	3001      	adds	r0, #1
 8005eba:	f000 80a7 	beq.w	800600c <_vfiprintf_r+0x1ec>
 8005ebe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ec0:	445a      	add	r2, fp
 8005ec2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 809f 	beq.w	800600c <_vfiprintf_r+0x1ec>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ed8:	f10a 0a01 	add.w	sl, sl, #1
 8005edc:	9304      	str	r3, [sp, #16]
 8005ede:	9307      	str	r3, [sp, #28]
 8005ee0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ee4:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ee6:	4654      	mov	r4, sl
 8005ee8:	2205      	movs	r2, #5
 8005eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eee:	4853      	ldr	r0, [pc, #332]	@ (800603c <_vfiprintf_r+0x21c>)
 8005ef0:	f7fe f9b3 	bl	800425a <memchr>
 8005ef4:	9a04      	ldr	r2, [sp, #16]
 8005ef6:	b9d8      	cbnz	r0, 8005f30 <_vfiprintf_r+0x110>
 8005ef8:	06d1      	lsls	r1, r2, #27
 8005efa:	bf44      	itt	mi
 8005efc:	2320      	movmi	r3, #32
 8005efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f02:	0713      	lsls	r3, r2, #28
 8005f04:	bf44      	itt	mi
 8005f06:	232b      	movmi	r3, #43	@ 0x2b
 8005f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8005f10:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f12:	d015      	beq.n	8005f40 <_vfiprintf_r+0x120>
 8005f14:	4654      	mov	r4, sl
 8005f16:	2000      	movs	r0, #0
 8005f18:	f04f 0c0a 	mov.w	ip, #10
 8005f1c:	9a07      	ldr	r2, [sp, #28]
 8005f1e:	4621      	mov	r1, r4
 8005f20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f24:	3b30      	subs	r3, #48	@ 0x30
 8005f26:	2b09      	cmp	r3, #9
 8005f28:	d94b      	bls.n	8005fc2 <_vfiprintf_r+0x1a2>
 8005f2a:	b1b0      	cbz	r0, 8005f5a <_vfiprintf_r+0x13a>
 8005f2c:	9207      	str	r2, [sp, #28]
 8005f2e:	e014      	b.n	8005f5a <_vfiprintf_r+0x13a>
 8005f30:	eba0 0308 	sub.w	r3, r0, r8
 8005f34:	fa09 f303 	lsl.w	r3, r9, r3
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	46a2      	mov	sl, r4
 8005f3c:	9304      	str	r3, [sp, #16]
 8005f3e:	e7d2      	b.n	8005ee6 <_vfiprintf_r+0xc6>
 8005f40:	9b03      	ldr	r3, [sp, #12]
 8005f42:	1d19      	adds	r1, r3, #4
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	9103      	str	r1, [sp, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bfbb      	ittet	lt
 8005f4c:	425b      	neglt	r3, r3
 8005f4e:	f042 0202 	orrlt.w	r2, r2, #2
 8005f52:	9307      	strge	r3, [sp, #28]
 8005f54:	9307      	strlt	r3, [sp, #28]
 8005f56:	bfb8      	it	lt
 8005f58:	9204      	strlt	r2, [sp, #16]
 8005f5a:	7823      	ldrb	r3, [r4, #0]
 8005f5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f5e:	d10a      	bne.n	8005f76 <_vfiprintf_r+0x156>
 8005f60:	7863      	ldrb	r3, [r4, #1]
 8005f62:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f64:	d132      	bne.n	8005fcc <_vfiprintf_r+0x1ac>
 8005f66:	9b03      	ldr	r3, [sp, #12]
 8005f68:	3402      	adds	r4, #2
 8005f6a:	1d1a      	adds	r2, r3, #4
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	9203      	str	r2, [sp, #12]
 8005f70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f74:	9305      	str	r3, [sp, #20]
 8005f76:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006040 <_vfiprintf_r+0x220>
 8005f7a:	2203      	movs	r2, #3
 8005f7c:	4650      	mov	r0, sl
 8005f7e:	7821      	ldrb	r1, [r4, #0]
 8005f80:	f7fe f96b 	bl	800425a <memchr>
 8005f84:	b138      	cbz	r0, 8005f96 <_vfiprintf_r+0x176>
 8005f86:	2240      	movs	r2, #64	@ 0x40
 8005f88:	9b04      	ldr	r3, [sp, #16]
 8005f8a:	eba0 000a 	sub.w	r0, r0, sl
 8005f8e:	4082      	lsls	r2, r0
 8005f90:	4313      	orrs	r3, r2
 8005f92:	3401      	adds	r4, #1
 8005f94:	9304      	str	r3, [sp, #16]
 8005f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f9a:	2206      	movs	r2, #6
 8005f9c:	4829      	ldr	r0, [pc, #164]	@ (8006044 <_vfiprintf_r+0x224>)
 8005f9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005fa2:	f7fe f95a 	bl	800425a <memchr>
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	d03f      	beq.n	800602a <_vfiprintf_r+0x20a>
 8005faa:	4b27      	ldr	r3, [pc, #156]	@ (8006048 <_vfiprintf_r+0x228>)
 8005fac:	bb1b      	cbnz	r3, 8005ff6 <_vfiprintf_r+0x1d6>
 8005fae:	9b03      	ldr	r3, [sp, #12]
 8005fb0:	3307      	adds	r3, #7
 8005fb2:	f023 0307 	bic.w	r3, r3, #7
 8005fb6:	3308      	adds	r3, #8
 8005fb8:	9303      	str	r3, [sp, #12]
 8005fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fbc:	443b      	add	r3, r7
 8005fbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fc0:	e76a      	b.n	8005e98 <_vfiprintf_r+0x78>
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	2001      	movs	r0, #1
 8005fc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fca:	e7a8      	b.n	8005f1e <_vfiprintf_r+0xfe>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f04f 0c0a 	mov.w	ip, #10
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	3401      	adds	r4, #1
 8005fd6:	9305      	str	r3, [sp, #20]
 8005fd8:	4620      	mov	r0, r4
 8005fda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fde:	3a30      	subs	r2, #48	@ 0x30
 8005fe0:	2a09      	cmp	r2, #9
 8005fe2:	d903      	bls.n	8005fec <_vfiprintf_r+0x1cc>
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d0c6      	beq.n	8005f76 <_vfiprintf_r+0x156>
 8005fe8:	9105      	str	r1, [sp, #20]
 8005fea:	e7c4      	b.n	8005f76 <_vfiprintf_r+0x156>
 8005fec:	4604      	mov	r4, r0
 8005fee:	2301      	movs	r3, #1
 8005ff0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ff4:	e7f0      	b.n	8005fd8 <_vfiprintf_r+0x1b8>
 8005ff6:	ab03      	add	r3, sp, #12
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	462a      	mov	r2, r5
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	4b13      	ldr	r3, [pc, #76]	@ (800604c <_vfiprintf_r+0x22c>)
 8006000:	a904      	add	r1, sp, #16
 8006002:	f7fd fbc7 	bl	8003794 <_printf_float>
 8006006:	4607      	mov	r7, r0
 8006008:	1c78      	adds	r0, r7, #1
 800600a:	d1d6      	bne.n	8005fba <_vfiprintf_r+0x19a>
 800600c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800600e:	07d9      	lsls	r1, r3, #31
 8006010:	d405      	bmi.n	800601e <_vfiprintf_r+0x1fe>
 8006012:	89ab      	ldrh	r3, [r5, #12]
 8006014:	059a      	lsls	r2, r3, #22
 8006016:	d402      	bmi.n	800601e <_vfiprintf_r+0x1fe>
 8006018:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800601a:	f7fe f91d 	bl	8004258 <__retarget_lock_release_recursive>
 800601e:	89ab      	ldrh	r3, [r5, #12]
 8006020:	065b      	lsls	r3, r3, #25
 8006022:	f53f af1f 	bmi.w	8005e64 <_vfiprintf_r+0x44>
 8006026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006028:	e71e      	b.n	8005e68 <_vfiprintf_r+0x48>
 800602a:	ab03      	add	r3, sp, #12
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	462a      	mov	r2, r5
 8006030:	4630      	mov	r0, r6
 8006032:	4b06      	ldr	r3, [pc, #24]	@ (800604c <_vfiprintf_r+0x22c>)
 8006034:	a904      	add	r1, sp, #16
 8006036:	f7fd fe4b 	bl	8003cd0 <_printf_i>
 800603a:	e7e4      	b.n	8006006 <_vfiprintf_r+0x1e6>
 800603c:	080066b4 	.word	0x080066b4
 8006040:	080066ba 	.word	0x080066ba
 8006044:	080066be 	.word	0x080066be
 8006048:	08003795 	.word	0x08003795
 800604c:	08005dfd 	.word	0x08005dfd

08006050 <__swbuf_r>:
 8006050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006052:	460e      	mov	r6, r1
 8006054:	4614      	mov	r4, r2
 8006056:	4605      	mov	r5, r0
 8006058:	b118      	cbz	r0, 8006062 <__swbuf_r+0x12>
 800605a:	6a03      	ldr	r3, [r0, #32]
 800605c:	b90b      	cbnz	r3, 8006062 <__swbuf_r+0x12>
 800605e:	f7fd ffe1 	bl	8004024 <__sinit>
 8006062:	69a3      	ldr	r3, [r4, #24]
 8006064:	60a3      	str	r3, [r4, #8]
 8006066:	89a3      	ldrh	r3, [r4, #12]
 8006068:	071a      	lsls	r2, r3, #28
 800606a:	d501      	bpl.n	8006070 <__swbuf_r+0x20>
 800606c:	6923      	ldr	r3, [r4, #16]
 800606e:	b943      	cbnz	r3, 8006082 <__swbuf_r+0x32>
 8006070:	4621      	mov	r1, r4
 8006072:	4628      	mov	r0, r5
 8006074:	f000 f82a 	bl	80060cc <__swsetup_r>
 8006078:	b118      	cbz	r0, 8006082 <__swbuf_r+0x32>
 800607a:	f04f 37ff 	mov.w	r7, #4294967295
 800607e:	4638      	mov	r0, r7
 8006080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	6922      	ldr	r2, [r4, #16]
 8006086:	b2f6      	uxtb	r6, r6
 8006088:	1a98      	subs	r0, r3, r2
 800608a:	6963      	ldr	r3, [r4, #20]
 800608c:	4637      	mov	r7, r6
 800608e:	4283      	cmp	r3, r0
 8006090:	dc05      	bgt.n	800609e <__swbuf_r+0x4e>
 8006092:	4621      	mov	r1, r4
 8006094:	4628      	mov	r0, r5
 8006096:	f7ff fd9b 	bl	8005bd0 <_fflush_r>
 800609a:	2800      	cmp	r0, #0
 800609c:	d1ed      	bne.n	800607a <__swbuf_r+0x2a>
 800609e:	68a3      	ldr	r3, [r4, #8]
 80060a0:	3b01      	subs	r3, #1
 80060a2:	60a3      	str	r3, [r4, #8]
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	6022      	str	r2, [r4, #0]
 80060aa:	701e      	strb	r6, [r3, #0]
 80060ac:	6962      	ldr	r2, [r4, #20]
 80060ae:	1c43      	adds	r3, r0, #1
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d004      	beq.n	80060be <__swbuf_r+0x6e>
 80060b4:	89a3      	ldrh	r3, [r4, #12]
 80060b6:	07db      	lsls	r3, r3, #31
 80060b8:	d5e1      	bpl.n	800607e <__swbuf_r+0x2e>
 80060ba:	2e0a      	cmp	r6, #10
 80060bc:	d1df      	bne.n	800607e <__swbuf_r+0x2e>
 80060be:	4621      	mov	r1, r4
 80060c0:	4628      	mov	r0, r5
 80060c2:	f7ff fd85 	bl	8005bd0 <_fflush_r>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d0d9      	beq.n	800607e <__swbuf_r+0x2e>
 80060ca:	e7d6      	b.n	800607a <__swbuf_r+0x2a>

080060cc <__swsetup_r>:
 80060cc:	b538      	push	{r3, r4, r5, lr}
 80060ce:	4b29      	ldr	r3, [pc, #164]	@ (8006174 <__swsetup_r+0xa8>)
 80060d0:	4605      	mov	r5, r0
 80060d2:	6818      	ldr	r0, [r3, #0]
 80060d4:	460c      	mov	r4, r1
 80060d6:	b118      	cbz	r0, 80060e0 <__swsetup_r+0x14>
 80060d8:	6a03      	ldr	r3, [r0, #32]
 80060da:	b90b      	cbnz	r3, 80060e0 <__swsetup_r+0x14>
 80060dc:	f7fd ffa2 	bl	8004024 <__sinit>
 80060e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060e4:	0719      	lsls	r1, r3, #28
 80060e6:	d422      	bmi.n	800612e <__swsetup_r+0x62>
 80060e8:	06da      	lsls	r2, r3, #27
 80060ea:	d407      	bmi.n	80060fc <__swsetup_r+0x30>
 80060ec:	2209      	movs	r2, #9
 80060ee:	602a      	str	r2, [r5, #0]
 80060f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060f4:	f04f 30ff 	mov.w	r0, #4294967295
 80060f8:	81a3      	strh	r3, [r4, #12]
 80060fa:	e033      	b.n	8006164 <__swsetup_r+0x98>
 80060fc:	0758      	lsls	r0, r3, #29
 80060fe:	d512      	bpl.n	8006126 <__swsetup_r+0x5a>
 8006100:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006102:	b141      	cbz	r1, 8006116 <__swsetup_r+0x4a>
 8006104:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006108:	4299      	cmp	r1, r3
 800610a:	d002      	beq.n	8006112 <__swsetup_r+0x46>
 800610c:	4628      	mov	r0, r5
 800610e:	f7fe ff0f 	bl	8004f30 <_free_r>
 8006112:	2300      	movs	r3, #0
 8006114:	6363      	str	r3, [r4, #52]	@ 0x34
 8006116:	89a3      	ldrh	r3, [r4, #12]
 8006118:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800611c:	81a3      	strh	r3, [r4, #12]
 800611e:	2300      	movs	r3, #0
 8006120:	6063      	str	r3, [r4, #4]
 8006122:	6923      	ldr	r3, [r4, #16]
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	89a3      	ldrh	r3, [r4, #12]
 8006128:	f043 0308 	orr.w	r3, r3, #8
 800612c:	81a3      	strh	r3, [r4, #12]
 800612e:	6923      	ldr	r3, [r4, #16]
 8006130:	b94b      	cbnz	r3, 8006146 <__swsetup_r+0x7a>
 8006132:	89a3      	ldrh	r3, [r4, #12]
 8006134:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800613c:	d003      	beq.n	8006146 <__swsetup_r+0x7a>
 800613e:	4621      	mov	r1, r4
 8006140:	4628      	mov	r0, r5
 8006142:	f000 f882 	bl	800624a <__smakebuf_r>
 8006146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800614a:	f013 0201 	ands.w	r2, r3, #1
 800614e:	d00a      	beq.n	8006166 <__swsetup_r+0x9a>
 8006150:	2200      	movs	r2, #0
 8006152:	60a2      	str	r2, [r4, #8]
 8006154:	6962      	ldr	r2, [r4, #20]
 8006156:	4252      	negs	r2, r2
 8006158:	61a2      	str	r2, [r4, #24]
 800615a:	6922      	ldr	r2, [r4, #16]
 800615c:	b942      	cbnz	r2, 8006170 <__swsetup_r+0xa4>
 800615e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006162:	d1c5      	bne.n	80060f0 <__swsetup_r+0x24>
 8006164:	bd38      	pop	{r3, r4, r5, pc}
 8006166:	0799      	lsls	r1, r3, #30
 8006168:	bf58      	it	pl
 800616a:	6962      	ldrpl	r2, [r4, #20]
 800616c:	60a2      	str	r2, [r4, #8]
 800616e:	e7f4      	b.n	800615a <__swsetup_r+0x8e>
 8006170:	2000      	movs	r0, #0
 8006172:	e7f7      	b.n	8006164 <__swsetup_r+0x98>
 8006174:	20000018 	.word	0x20000018

08006178 <_raise_r>:
 8006178:	291f      	cmp	r1, #31
 800617a:	b538      	push	{r3, r4, r5, lr}
 800617c:	4605      	mov	r5, r0
 800617e:	460c      	mov	r4, r1
 8006180:	d904      	bls.n	800618c <_raise_r+0x14>
 8006182:	2316      	movs	r3, #22
 8006184:	6003      	str	r3, [r0, #0]
 8006186:	f04f 30ff 	mov.w	r0, #4294967295
 800618a:	bd38      	pop	{r3, r4, r5, pc}
 800618c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800618e:	b112      	cbz	r2, 8006196 <_raise_r+0x1e>
 8006190:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006194:	b94b      	cbnz	r3, 80061aa <_raise_r+0x32>
 8006196:	4628      	mov	r0, r5
 8006198:	f000 f830 	bl	80061fc <_getpid_r>
 800619c:	4622      	mov	r2, r4
 800619e:	4601      	mov	r1, r0
 80061a0:	4628      	mov	r0, r5
 80061a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061a6:	f000 b817 	b.w	80061d8 <_kill_r>
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d00a      	beq.n	80061c4 <_raise_r+0x4c>
 80061ae:	1c59      	adds	r1, r3, #1
 80061b0:	d103      	bne.n	80061ba <_raise_r+0x42>
 80061b2:	2316      	movs	r3, #22
 80061b4:	6003      	str	r3, [r0, #0]
 80061b6:	2001      	movs	r0, #1
 80061b8:	e7e7      	b.n	800618a <_raise_r+0x12>
 80061ba:	2100      	movs	r1, #0
 80061bc:	4620      	mov	r0, r4
 80061be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80061c2:	4798      	blx	r3
 80061c4:	2000      	movs	r0, #0
 80061c6:	e7e0      	b.n	800618a <_raise_r+0x12>

080061c8 <raise>:
 80061c8:	4b02      	ldr	r3, [pc, #8]	@ (80061d4 <raise+0xc>)
 80061ca:	4601      	mov	r1, r0
 80061cc:	6818      	ldr	r0, [r3, #0]
 80061ce:	f7ff bfd3 	b.w	8006178 <_raise_r>
 80061d2:	bf00      	nop
 80061d4:	20000018 	.word	0x20000018

080061d8 <_kill_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	2300      	movs	r3, #0
 80061dc:	4d06      	ldr	r5, [pc, #24]	@ (80061f8 <_kill_r+0x20>)
 80061de:	4604      	mov	r4, r0
 80061e0:	4608      	mov	r0, r1
 80061e2:	4611      	mov	r1, r2
 80061e4:	602b      	str	r3, [r5, #0]
 80061e6:	f7fb faea 	bl	80017be <_kill>
 80061ea:	1c43      	adds	r3, r0, #1
 80061ec:	d102      	bne.n	80061f4 <_kill_r+0x1c>
 80061ee:	682b      	ldr	r3, [r5, #0]
 80061f0:	b103      	cbz	r3, 80061f4 <_kill_r+0x1c>
 80061f2:	6023      	str	r3, [r4, #0]
 80061f4:	bd38      	pop	{r3, r4, r5, pc}
 80061f6:	bf00      	nop
 80061f8:	200003f8 	.word	0x200003f8

080061fc <_getpid_r>:
 80061fc:	f7fb bad8 	b.w	80017b0 <_getpid>

08006200 <__swhatbuf_r>:
 8006200:	b570      	push	{r4, r5, r6, lr}
 8006202:	460c      	mov	r4, r1
 8006204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006208:	4615      	mov	r5, r2
 800620a:	2900      	cmp	r1, #0
 800620c:	461e      	mov	r6, r3
 800620e:	b096      	sub	sp, #88	@ 0x58
 8006210:	da0c      	bge.n	800622c <__swhatbuf_r+0x2c>
 8006212:	89a3      	ldrh	r3, [r4, #12]
 8006214:	2100      	movs	r1, #0
 8006216:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800621a:	bf14      	ite	ne
 800621c:	2340      	movne	r3, #64	@ 0x40
 800621e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006222:	2000      	movs	r0, #0
 8006224:	6031      	str	r1, [r6, #0]
 8006226:	602b      	str	r3, [r5, #0]
 8006228:	b016      	add	sp, #88	@ 0x58
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	466a      	mov	r2, sp
 800622e:	f000 f849 	bl	80062c4 <_fstat_r>
 8006232:	2800      	cmp	r0, #0
 8006234:	dbed      	blt.n	8006212 <__swhatbuf_r+0x12>
 8006236:	9901      	ldr	r1, [sp, #4]
 8006238:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800623c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006240:	4259      	negs	r1, r3
 8006242:	4159      	adcs	r1, r3
 8006244:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006248:	e7eb      	b.n	8006222 <__swhatbuf_r+0x22>

0800624a <__smakebuf_r>:
 800624a:	898b      	ldrh	r3, [r1, #12]
 800624c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800624e:	079d      	lsls	r5, r3, #30
 8006250:	4606      	mov	r6, r0
 8006252:	460c      	mov	r4, r1
 8006254:	d507      	bpl.n	8006266 <__smakebuf_r+0x1c>
 8006256:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800625a:	6023      	str	r3, [r4, #0]
 800625c:	6123      	str	r3, [r4, #16]
 800625e:	2301      	movs	r3, #1
 8006260:	6163      	str	r3, [r4, #20]
 8006262:	b003      	add	sp, #12
 8006264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006266:	466a      	mov	r2, sp
 8006268:	ab01      	add	r3, sp, #4
 800626a:	f7ff ffc9 	bl	8006200 <__swhatbuf_r>
 800626e:	9f00      	ldr	r7, [sp, #0]
 8006270:	4605      	mov	r5, r0
 8006272:	4639      	mov	r1, r7
 8006274:	4630      	mov	r0, r6
 8006276:	f7fe fecd 	bl	8005014 <_malloc_r>
 800627a:	b948      	cbnz	r0, 8006290 <__smakebuf_r+0x46>
 800627c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006280:	059a      	lsls	r2, r3, #22
 8006282:	d4ee      	bmi.n	8006262 <__smakebuf_r+0x18>
 8006284:	f023 0303 	bic.w	r3, r3, #3
 8006288:	f043 0302 	orr.w	r3, r3, #2
 800628c:	81a3      	strh	r3, [r4, #12]
 800628e:	e7e2      	b.n	8006256 <__smakebuf_r+0xc>
 8006290:	89a3      	ldrh	r3, [r4, #12]
 8006292:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800629a:	81a3      	strh	r3, [r4, #12]
 800629c:	9b01      	ldr	r3, [sp, #4]
 800629e:	6020      	str	r0, [r4, #0]
 80062a0:	b15b      	cbz	r3, 80062ba <__smakebuf_r+0x70>
 80062a2:	4630      	mov	r0, r6
 80062a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062a8:	f000 f81e 	bl	80062e8 <_isatty_r>
 80062ac:	b128      	cbz	r0, 80062ba <__smakebuf_r+0x70>
 80062ae:	89a3      	ldrh	r3, [r4, #12]
 80062b0:	f023 0303 	bic.w	r3, r3, #3
 80062b4:	f043 0301 	orr.w	r3, r3, #1
 80062b8:	81a3      	strh	r3, [r4, #12]
 80062ba:	89a3      	ldrh	r3, [r4, #12]
 80062bc:	431d      	orrs	r5, r3
 80062be:	81a5      	strh	r5, [r4, #12]
 80062c0:	e7cf      	b.n	8006262 <__smakebuf_r+0x18>
	...

080062c4 <_fstat_r>:
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	2300      	movs	r3, #0
 80062c8:	4d06      	ldr	r5, [pc, #24]	@ (80062e4 <_fstat_r+0x20>)
 80062ca:	4604      	mov	r4, r0
 80062cc:	4608      	mov	r0, r1
 80062ce:	4611      	mov	r1, r2
 80062d0:	602b      	str	r3, [r5, #0]
 80062d2:	f7fb fad3 	bl	800187c <_fstat>
 80062d6:	1c43      	adds	r3, r0, #1
 80062d8:	d102      	bne.n	80062e0 <_fstat_r+0x1c>
 80062da:	682b      	ldr	r3, [r5, #0]
 80062dc:	b103      	cbz	r3, 80062e0 <_fstat_r+0x1c>
 80062de:	6023      	str	r3, [r4, #0]
 80062e0:	bd38      	pop	{r3, r4, r5, pc}
 80062e2:	bf00      	nop
 80062e4:	200003f8 	.word	0x200003f8

080062e8 <_isatty_r>:
 80062e8:	b538      	push	{r3, r4, r5, lr}
 80062ea:	2300      	movs	r3, #0
 80062ec:	4d05      	ldr	r5, [pc, #20]	@ (8006304 <_isatty_r+0x1c>)
 80062ee:	4604      	mov	r4, r0
 80062f0:	4608      	mov	r0, r1
 80062f2:	602b      	str	r3, [r5, #0]
 80062f4:	f7fb fad1 	bl	800189a <_isatty>
 80062f8:	1c43      	adds	r3, r0, #1
 80062fa:	d102      	bne.n	8006302 <_isatty_r+0x1a>
 80062fc:	682b      	ldr	r3, [r5, #0]
 80062fe:	b103      	cbz	r3, 8006302 <_isatty_r+0x1a>
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	bd38      	pop	{r3, r4, r5, pc}
 8006304:	200003f8 	.word	0x200003f8

08006308 <_init>:
 8006308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630a:	bf00      	nop
 800630c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800630e:	bc08      	pop	{r3}
 8006310:	469e      	mov	lr, r3
 8006312:	4770      	bx	lr

08006314 <_fini>:
 8006314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006316:	bf00      	nop
 8006318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800631a:	bc08      	pop	{r3}
 800631c:	469e      	mov	lr, r3
 800631e:	4770      	bx	lr
