
STM32_THERMOCOUPLE_MAX3185.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  08006510  08006510  00016510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ad4  08006ad4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08006ad4  08006ad4  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ad4  08006ad4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ad4  08006ad4  00016ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ad8  08006ad8  00016ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  200001d4  08006cb0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08006cb0  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009389  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019ff  00000000  00000000  000295c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000948  00000000  00000000  0002afc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000070f  00000000  00000000  0002b910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017d8f  00000000  00000000  0002c01f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ac92  00000000  00000000  00043dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000840e8  00000000  00000000  0004ea40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003654  00000000  00000000  000d2b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000d617c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080064f4 	.word	0x080064f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080064f4 	.word	0x080064f4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <begin>:

extern SPI_HandleTypeDef hspi1;
max31856_conversion_mode_t conversionMode;
bool initialized = false;

bool begin(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  if (HAL_SPI_Init(&hspi1) == HAL_OK) {initialized = true;}
 8000b2c:	4811      	ldr	r0, [pc, #68]	; (8000b74 <begin+0x4c>)
 8000b2e:	f001 ff1b 	bl	8002968 <HAL_SPI_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d103      	bne.n	8000b40 <begin+0x18>
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <begin+0x50>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	e002      	b.n	8000b46 <begin+0x1e>
  else {initialized = false;}
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <begin+0x50>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]

  // assert on any fault
  writeRegister8(MAX31856_MASK_REG, 0x0);
 8000b46:	2100      	movs	r1, #0
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f000 f9a7 	bl	8000e9c <writeRegister8>

  // enable open circuit fault detection
  writeRegister8(MAX31856_CR0_REG, MAX31856_CR0_OCFAULT0);
 8000b4e:	2110      	movs	r1, #16
 8000b50:	2000      	movs	r0, #0
 8000b52:	f000 f9a3 	bl	8000e9c <writeRegister8>

  // set cold junction temperature offset to zero
  writeRegister8(MAX31856_CJTO_REG, 0x0);
 8000b56:	2100      	movs	r1, #0
 8000b58:	2009      	movs	r0, #9
 8000b5a:	f000 f99f 	bl	8000e9c <writeRegister8>

  // set Type K by default
  setThermocoupleType(MAX31856_TCTYPE_K);
 8000b5e:	2003      	movs	r0, #3
 8000b60:	f000 f83a 	bl	8000bd8 <setThermocoupleType>

  // set One-Shot conversion mode
  setConversionMode(MAX31856_ONESHOT);
 8000b64:	2000      	movs	r0, #0
 8000b66:	f000 f809 	bl	8000b7c <setConversionMode>

  return initialized;
 8000b6a:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <begin+0x50>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200001f4 	.word	0x200001f4
 8000b78:	200001f1 	.word	0x200001f1

08000b7c <setConversionMode>:

max31856_conversion_mode_t getConversionMode(void) {
  return conversionMode;
}

void setConversionMode(max31856_conversion_mode_t mode) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  conversionMode = mode;
 8000b86:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <setConversionMode+0x58>)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	7013      	strb	r3, [r2, #0]
  uint8_t t = readRegister8(MAX31856_CR0_REG); // get current register value
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f000 f85d 	bl	8000c4c <readRegister8>
 8000b92:	4603      	mov	r3, r0
 8000b94:	73fb      	strb	r3, [r7, #15]
  if (conversionMode == MAX31856_CONTINUOUS) {
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <setConversionMode+0x58>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d108      	bne.n	8000bb0 <setConversionMode+0x34>
    t |= MAX31856_CR0_AUTOCONVERT; // turn on automatic
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ba4:	73fb      	strb	r3, [r7, #15]
    t &= ~MAX31856_CR0_1SHOT;      // turn off one-shot
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000bac:	73fb      	strb	r3, [r7, #15]
 8000bae:	e007      	b.n	8000bc0 <setConversionMode+0x44>
  } else {
    t &= ~MAX31856_CR0_AUTOCONVERT; // turn off automatic
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bb6:	73fb      	strb	r3, [r7, #15]
    t |= MAX31856_CR0_1SHOT;        // turn on one-shot
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bbe:	73fb      	strb	r3, [r7, #15]
  }
  writeRegister8(MAX31856_CR0_REG, t); // write value back to register
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f000 f969 	bl	8000e9c <writeRegister8>
}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200001f0 	.word	0x200001f0

08000bd8 <setThermocoupleType>:

void setThermocoupleType(max31856_thermocoupletype_t type) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  uint8_t t = readRegister8(MAX31856_CR1_REG);
 8000be2:	2001      	movs	r0, #1
 8000be4:	f000 f832 	bl	8000c4c <readRegister8>
 8000be8:	4603      	mov	r3, r0
 8000bea:	73fb      	strb	r3, [r7, #15]
  t &= 0xF0; // mask off bottom 4 bits
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	f023 030f 	bic.w	r3, r3, #15
 8000bf2:	73fb      	strb	r3, [r7, #15]
  t |= (uint8_t)type & 0x0F;
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	f003 030f 	and.w	r3, r3, #15
 8000bfc:	b25a      	sxtb	r2, r3
 8000bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	73fb      	strb	r3, [r7, #15]
  writeRegister8(MAX31856_CR1_REG, t);
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f000 f945 	bl	8000e9c <writeRegister8>
}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <getThermocoupleType>:

max31856_thermocoupletype_t getThermocoupleType(void) {
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
  uint8_t t = readRegister8(MAX31856_CR1_REG);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f000 f813 	bl	8000c4c <readRegister8>
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  t &= 0x0F;
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	f003 030f 	and.w	r3, r3, #15
 8000c30:	71fb      	strb	r3, [r7, #7]

  return (max31856_thermocoupletype_t)(t);
 8000c32:	79fb      	ldrb	r3, [r7, #7]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <readFault>:

uint8_t readFault(void) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  return readRegister8(MAX31856_SR_REG);
 8000c40:	200f      	movs	r0, #15
 8000c42:	f000 f803 	bl	8000c4c <readRegister8>
 8000c46:	4603      	mov	r3, r0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <readRegister8>:
void setColdJunctionFaultThreshholds(int8_t low,int8_t high) {
  writeRegister8(MAX31856_CJLF_REG, low);
  writeRegister8(MAX31856_CJHF_REG, high);
}

uint8_t readRegister8(uint8_t addr) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]
  readRegisterN(addr, &ret, 1);
 8000c5a:	f107 010f 	add.w	r1, r7, #15
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2201      	movs	r2, #1
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f8ee 	bl	8000e44 <readRegisterN>

  return ret;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <triggerOneShot>:

  writeRegister8(MAX31856_LTLFTH_REG, low >> 8);
  writeRegister8(MAX31856_LTLFTL_REG, low);
}

void triggerOneShot(void) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0

  if (conversionMode == MAX31856_CONTINUOUS)
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <triggerOneShot+0x3c>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d012      	beq.n	8000ca8 <triggerOneShot+0x34>
    return;

  uint8_t t = readRegister8(MAX31856_CR0_REG); // get current register value
 8000c82:	2000      	movs	r0, #0
 8000c84:	f7ff ffe2 	bl	8000c4c <readRegister8>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	71fb      	strb	r3, [r7, #7]
  t &= ~MAX31856_CR0_AUTOCONVERT;              // turn off autoconvert
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c92:	71fb      	strb	r3, [r7, #7]
  t |= MAX31856_CR0_1SHOT;                     // turn on one-shot
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c9a:	71fb      	strb	r3, [r7, #7]
  writeRegister8(MAX31856_CR0_REG, t);         // write value back to register
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f000 f8fb 	bl	8000e9c <writeRegister8>
 8000ca6:	e000      	b.n	8000caa <triggerOneShot+0x36>
    return;
 8000ca8:	bf00      	nop
                                       // conversion starts when CS goes high
}
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200001f0 	.word	0x200001f0

08000cb4 <conversionComplete>:

bool conversionComplete(void) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0

  if (conversionMode == MAX31856_CONTINUOUS)
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <conversionComplete+0x2c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d101      	bne.n	8000cc4 <conversionComplete+0x10>
    return true;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e00a      	b.n	8000cda <conversionComplete+0x26>
  return !(readRegister8(MAX31856_CR0_REG) & MAX31856_CR0_1SHOT);
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f7ff ffc1 	bl	8000c4c <readRegister8>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	bf0c      	ite	eq
 8000cd4:	2301      	moveq	r3, #1
 8000cd6:	2300      	movne	r3, #0
 8000cd8:	b2db      	uxtb	r3, r3
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200001f0 	.word	0x200001f0

08000ce4 <readCJTemperature>:

float readCJTemperature(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

  return readRegister16(MAX31856_CJTH_REG) / 256.0;
 8000ce8:	200a      	movs	r0, #10
 8000cea:	f000 f85f 	bl	8000dac <readRegister16>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fb87 	bl	8000404 <__aeabi_i2d>
 8000cf6:	f04f 0200 	mov.w	r2, #0
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <readCJTemperature+0x30>)
 8000cfc:	f7ff fd16 	bl	800072c <__aeabi_ddiv>
 8000d00:	4602      	mov	r2, r0
 8000d02:	460b      	mov	r3, r1
 8000d04:	4610      	mov	r0, r2
 8000d06:	4619      	mov	r1, r3
 8000d08:	f7ff febe 	bl	8000a88 <__aeabi_d2f>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40700000 	.word	0x40700000

08000d18 <readThermocoupleTemperature>:

float readThermocoupleTemperature(void) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0

  // for one-shot, make it happen
  if (conversionMode == MAX31856_ONESHOT) {
 8000d1e:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <readThermocoupleTemperature+0x8c>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d119      	bne.n	8000d5a <readThermocoupleTemperature+0x42>
    triggerOneShot();
 8000d26:	f7ff ffa5 	bl	8000c74 <triggerOneShot>
    uint32_t start = HAL_GetTick();
 8000d2a:	f000 ff67 	bl	8001bfc <HAL_GetTick>
 8000d2e:	6038      	str	r0, [r7, #0]
    while (!conversionComplete()) {
 8000d30:	e00b      	b.n	8000d4a <readThermocoupleTemperature+0x32>
      if (HAL_GetTick() - start > 250) //250
 8000d32:	f000 ff63 	bl	8001bfc <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2bfa      	cmp	r3, #250	; 0xfa
 8000d3e:	d901      	bls.n	8000d44 <readThermocoupleTemperature+0x2c>
        return NAN;
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <readThermocoupleTemperature+0x90>)
 8000d42:	e02b      	b.n	8000d9c <readThermocoupleTemperature+0x84>
      HAL_Delay(10);
 8000d44:	200a      	movs	r0, #10
 8000d46:	f000 ff63 	bl	8001c10 <HAL_Delay>
    while (!conversionComplete()) {
 8000d4a:	f7ff ffb3 	bl	8000cb4 <conversionComplete>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f083 0301 	eor.w	r3, r3, #1
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1eb      	bne.n	8000d32 <readThermocoupleTemperature+0x1a>

    }
  }

  // read the thermocouple temperature registers (3 bytes)
  int32_t temp24 = readRegister24(MAX31856_LTCBH_REG);
 8000d5a:	200c      	movs	r0, #12
 8000d5c:	f000 f844 	bl	8000de8 <readRegister24>
 8000d60:	4603      	mov	r3, r0
 8000d62:	607b      	str	r3, [r7, #4]
  // and compute temperature
  if (temp24 & 0x800000) {
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d003      	beq.n	8000d76 <readThermocoupleTemperature+0x5e>
    temp24 |= 0xFF000000; // fix sign
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000d74:	607b      	str	r3, [r7, #4]
  }

  temp24 >>= 5; // bottom 5 bits are unused
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	115b      	asrs	r3, r3, #5
 8000d7a:	607b      	str	r3, [r7, #4]

  return temp24 * 0.0078125;
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff fb41 	bl	8000404 <__aeabi_i2d>
 8000d82:	f04f 0200 	mov.w	r2, #0
 8000d86:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000d8a:	f7ff fba5 	bl	80004d8 <__aeabi_dmul>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	460b      	mov	r3, r1
 8000d92:	4610      	mov	r0, r2
 8000d94:	4619      	mov	r1, r3
 8000d96:	f7ff fe77 	bl	8000a88 <__aeabi_d2f>
 8000d9a:	4603      	mov	r3, r0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200001f0 	.word	0x200001f0
 8000da8:	7fc00000 	.word	0x7fc00000

08000dac <readRegister16>:

uint16_t readRegister16(uint8_t addr) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  uint8_t buffer[2] = {0, 0};
 8000db6:	2300      	movs	r3, #0
 8000db8:	81bb      	strh	r3, [r7, #12]
  readRegisterN(addr, buffer, 2);
 8000dba:	f107 010c 	add.w	r1, r7, #12
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f83e 	bl	8000e44 <readRegisterN>

  uint16_t ret = (uint16_t)buffer[0]; // Cast to uint16_t before left shift
 8000dc8:	7b3b      	ldrb	r3, [r7, #12]
 8000dca:	81fb      	strh	r3, [r7, #14]
  ret <<= 8;
 8000dcc:	89fb      	ldrh	r3, [r7, #14]
 8000dce:	021b      	lsls	r3, r3, #8
 8000dd0:	81fb      	strh	r3, [r7, #14]
  ret |= buffer[1];
 8000dd2:	7b7b      	ldrb	r3, [r7, #13]
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	89fb      	ldrh	r3, [r7, #14]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	81fb      	strh	r3, [r7, #14]

  return ret;
 8000ddc:	89fb      	ldrh	r3, [r7, #14]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <readRegister24>:

uint32_t readRegister24(uint8_t addr) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  uint8_t buffer[3] = {0, 0, 0};
 8000df2:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <readRegister24+0x58>)
 8000df4:	f107 0308 	add.w	r3, r7, #8
 8000df8:	6812      	ldr	r2, [r2, #0]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	8019      	strh	r1, [r3, #0]
 8000dfe:	3302      	adds	r3, #2
 8000e00:	0c12      	lsrs	r2, r2, #16
 8000e02:	701a      	strb	r2, [r3, #0]
  readRegisterN(addr, buffer, 3);
 8000e04:	f107 0108 	add.w	r1, r7, #8
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 f819 	bl	8000e44 <readRegisterN>

  uint32_t ret = (uint32_t) buffer[0];
 8000e12:	7a3b      	ldrb	r3, [r7, #8]
 8000e14:	60fb      	str	r3, [r7, #12]
  ret <<= 8;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	60fb      	str	r3, [r7, #12]
  ret |= buffer[1];
 8000e1c:	7a7b      	ldrb	r3, [r7, #9]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  ret <<= 8;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	021b      	lsls	r3, r3, #8
 8000e2a:	60fb      	str	r3, [r7, #12]
  ret |= buffer[2];
 8000e2c:	7abb      	ldrb	r3, [r7, #10]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]

  return ret;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	08006510 	.word	0x08006510

08000e44 <readRegisterN>:

void readRegisterN(uint8_t addr, uint8_t buffer[], uint8_t n) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
 8000e50:	4613      	mov	r3, r2
 8000e52:	71bb      	strb	r3, [r7, #6]
  addr &= 0x7F; // MSB=0 for read, make sure top bit is not set
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(GPIOA , SPI1_CS_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2110      	movs	r1, #16
 8000e62:	480c      	ldr	r0, [pc, #48]	; (8000e94 <readRegisterN+0x50>)
 8000e64:	f001 f958 	bl	8002118 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &addr, 1, SPI_DELAY);
 8000e68:	1df9      	adds	r1, r7, #7
 8000e6a:	23ff      	movs	r3, #255	; 0xff
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	480a      	ldr	r0, [pc, #40]	; (8000e98 <readRegisterN+0x54>)
 8000e70:	f001 fdfe 	bl	8002a70 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, buffer, n, SPI_DELAY);
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	23ff      	movs	r3, #255	; 0xff
 8000e7a:	6839      	ldr	r1, [r7, #0]
 8000e7c:	4806      	ldr	r0, [pc, #24]	; (8000e98 <readRegisterN+0x54>)
 8000e7e:	f001 ff3a 	bl	8002cf6 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA , SPI1_CS_Pin, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	2110      	movs	r1, #16
 8000e86:	4803      	ldr	r0, [pc, #12]	; (8000e94 <readRegisterN+0x50>)
 8000e88:	f001 f946 	bl	8002118 <HAL_GPIO_WritePin>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40010800 	.word	0x40010800
 8000e98:	200001f4 	.word	0x200001f4

08000e9c <writeRegister8>:

void writeRegister8(uint8_t addr, uint8_t data) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	460a      	mov	r2, r1
 8000ea6:	71fb      	strb	r3, [r7, #7]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	71bb      	strb	r3, [r7, #6]
  addr |= 0x80; // MSB=1 for write, make sure top bit is set
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eb2:	71fb      	strb	r3, [r7, #7]

  uint8_t buffer[2] = {addr, data};
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	733b      	strb	r3, [r7, #12]
 8000eb8:	79bb      	ldrb	r3, [r7, #6]
 8000eba:	737b      	strb	r3, [r7, #13]

  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <writeRegister8+0x4c>)
 8000ec2:	f001 f929 	bl	8002118 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, buffer, 2, SPI_DELAY);  // Corrected size to 2
 8000ec6:	f107 010c 	add.w	r1, r7, #12
 8000eca:	23ff      	movs	r3, #255	; 0xff
 8000ecc:	2202      	movs	r2, #2
 8000ece:	4807      	ldr	r0, [pc, #28]	; (8000eec <writeRegister8+0x50>)
 8000ed0:	f001 fdce 	bl	8002a70 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <writeRegister8+0x4c>)
 8000eda:	f001 f91d 	bl	8002118 <HAL_GPIO_WritePin>
}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40010800 	.word	0x40010800
 8000eec:	200001f4 	.word	0x200001f4

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ef2:	f6ad 1d6c 	subw	sp, sp, #2412	; 0x96c
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  char MSG[100];
       char MSG0[100];
       char MSG1[100]=  "Could not initialize thermocouple\n\r";
 8000ef8:	f607 1368 	addw	r3, r7, #2408	; 0x968
 8000efc:	f5a3 7c98 	sub.w	ip, r3, #304	; 0x130
 8000f00:	4be2      	ldr	r3, [pc, #904]	; (800128c <main+0x39c>)
 8000f02:	461c      	mov	r4, r3
 8000f04:	4666      	mov	r6, ip
 8000f06:	f104 0e20 	add.w	lr, r4, #32
 8000f0a:	4635      	mov	r5, r6
 8000f0c:	4623      	mov	r3, r4
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	6859      	ldr	r1, [r3, #4]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f18:	3410      	adds	r4, #16
 8000f1a:	3610      	adds	r6, #16
 8000f1c:	4574      	cmp	r4, lr
 8000f1e:	d1f4      	bne.n	8000f0a <main+0x1a>
 8000f20:	4633      	mov	r3, r6
 8000f22:	4622      	mov	r2, r4
 8000f24:	6810      	ldr	r0, [r2, #0]
 8000f26:	6018      	str	r0, [r3, #0]
 8000f28:	f10c 0324 	add.w	r3, ip, #36	; 0x24
 8000f2c:	2240      	movs	r2, #64	; 0x40
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f003 f9f4 	bl	800431e <memset>
       char MSG3[100]=  "$$***************************************$$\n\r";
 8000f36:	f607 1368 	addw	r3, r7, #2408	; 0x968
 8000f3a:	f5a3 7cca 	sub.w	ip, r3, #404	; 0x194
 8000f3e:	4bd4      	ldr	r3, [pc, #848]	; (8001290 <main+0x3a0>)
 8000f40:	461c      	mov	r4, r3
 8000f42:	4666      	mov	r6, ip
 8000f44:	f104 0e20 	add.w	lr, r4, #32
 8000f48:	4635      	mov	r5, r6
 8000f4a:	4623      	mov	r3, r4
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	6859      	ldr	r1, [r3, #4]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f56:	3410      	adds	r4, #16
 8000f58:	3610      	adds	r6, #16
 8000f5a:	4574      	cmp	r4, lr
 8000f5c:	d1f4      	bne.n	8000f48 <main+0x58>
 8000f5e:	4633      	mov	r3, r6
 8000f60:	6820      	ldr	r0, [r4, #0]
 8000f62:	6861      	ldr	r1, [r4, #4]
 8000f64:	68a2      	ldr	r2, [r4, #8]
 8000f66:	c307      	stmia	r3!, {r0, r1, r2}
 8000f68:	89a2      	ldrh	r2, [r4, #12]
 8000f6a:	801a      	strh	r2, [r3, #0]
 8000f6c:	f10c 032e 	add.w	r3, ip, #46	; 0x2e
 8000f70:	2236      	movs	r2, #54	; 0x36
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f003 f9d2 	bl	800431e <memset>
       char MSG2[100]=  "Thermocouple type: ";
 8000f7a:	f607 1368 	addw	r3, r7, #2408	; 0x968
 8000f7e:	f5a3 76fc 	sub.w	r6, r3, #504	; 0x1f8
 8000f82:	4bc4      	ldr	r3, [pc, #784]	; (8001294 <main+0x3a4>)
 8000f84:	4634      	mov	r4, r6
 8000f86:	461d      	mov	r5, r3
 8000f88:	6828      	ldr	r0, [r5, #0]
 8000f8a:	6869      	ldr	r1, [r5, #4]
 8000f8c:	68aa      	ldr	r2, [r5, #8]
 8000f8e:	68eb      	ldr	r3, [r5, #12]
 8000f90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f92:	6928      	ldr	r0, [r5, #16]
 8000f94:	6020      	str	r0, [r4, #0]
 8000f96:	f106 0314 	add.w	r3, r6, #20
 8000f9a:	2250      	movs	r2, #80	; 0x50
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 f9bd 	bl	800431e <memset>
       char MSG4[100]=  "B Type\n\r";
 8000fa4:	f607 1368 	addw	r3, r7, #2408	; 0x968
 8000fa8:	f5a3 7417 	sub.w	r4, r3, #604	; 0x25c
 8000fac:	4aba      	ldr	r2, [pc, #744]	; (8001298 <main+0x3a8>)
 8000fae:	4623      	mov	r3, r4
 8000fb0:	6810      	ldr	r0, [r2, #0]
 8000fb2:	6851      	ldr	r1, [r2, #4]
 8000fb4:	c303      	stmia	r3!, {r0, r1}
 8000fb6:	7a12      	ldrb	r2, [r2, #8]
 8000fb8:	701a      	strb	r2, [r3, #0]
 8000fba:	f104 0309 	add.w	r3, r4, #9
 8000fbe:	225b      	movs	r2, #91	; 0x5b
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f003 f9ab 	bl	800431e <memset>
       char MSG5[100]=  "E Type\n\r";
 8000fc8:	f607 1368 	addw	r3, r7, #2408	; 0x968
 8000fcc:	f5a3 7430 	sub.w	r4, r3, #704	; 0x2c0
 8000fd0:	4ab2      	ldr	r2, [pc, #712]	; (800129c <main+0x3ac>)
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	6810      	ldr	r0, [r2, #0]
 8000fd6:	6851      	ldr	r1, [r2, #4]
 8000fd8:	c303      	stmia	r3!, {r0, r1}
 8000fda:	7a12      	ldrb	r2, [r2, #8]
 8000fdc:	701a      	strb	r2, [r3, #0]
 8000fde:	f104 0309 	add.w	r3, r4, #9
 8000fe2:	225b      	movs	r2, #91	; 0x5b
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f003 f999 	bl	800431e <memset>
       char MSG6[100]=  "J Type\n\r";
 8000fec:	f607 1368 	addw	r3, r7, #2408	; 0x968
 8000ff0:	f5a3 7449 	sub.w	r4, r3, #804	; 0x324
 8000ff4:	4aaa      	ldr	r2, [pc, #680]	; (80012a0 <main+0x3b0>)
 8000ff6:	4623      	mov	r3, r4
 8000ff8:	6810      	ldr	r0, [r2, #0]
 8000ffa:	6851      	ldr	r1, [r2, #4]
 8000ffc:	c303      	stmia	r3!, {r0, r1}
 8000ffe:	7a12      	ldrb	r2, [r2, #8]
 8001000:	701a      	strb	r2, [r3, #0]
 8001002:	f104 0309 	add.w	r3, r4, #9
 8001006:	225b      	movs	r2, #91	; 0x5b
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f003 f987 	bl	800431e <memset>
       char MSG7[100]=  "K Type\n\r";
 8001010:	f607 1368 	addw	r3, r7, #2408	; 0x968
 8001014:	f5a3 7462 	sub.w	r4, r3, #904	; 0x388
 8001018:	4aa2      	ldr	r2, [pc, #648]	; (80012a4 <main+0x3b4>)
 800101a:	4623      	mov	r3, r4
 800101c:	6810      	ldr	r0, [r2, #0]
 800101e:	6851      	ldr	r1, [r2, #4]
 8001020:	c303      	stmia	r3!, {r0, r1}
 8001022:	7a12      	ldrb	r2, [r2, #8]
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	f104 0309 	add.w	r3, r4, #9
 800102a:	225b      	movs	r2, #91	; 0x5b
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f003 f975 	bl	800431e <memset>
       char MSG8[100]=  "N Type\n\r";
 8001034:	f607 1368 	addw	r3, r7, #2408	; 0x968
 8001038:	f5a3 747b 	sub.w	r4, r3, #1004	; 0x3ec
 800103c:	4a9a      	ldr	r2, [pc, #616]	; (80012a8 <main+0x3b8>)
 800103e:	4623      	mov	r3, r4
 8001040:	6810      	ldr	r0, [r2, #0]
 8001042:	6851      	ldr	r1, [r2, #4]
 8001044:	c303      	stmia	r3!, {r0, r1}
 8001046:	7a12      	ldrb	r2, [r2, #8]
 8001048:	701a      	strb	r2, [r3, #0]
 800104a:	f104 0309 	add.w	r3, r4, #9
 800104e:	225b      	movs	r2, #91	; 0x5b
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f003 f963 	bl	800431e <memset>
       char MSG9[100]=  "R Type\n\r";
 8001058:	f607 1368 	addw	r3, r7, #2408	; 0x968
 800105c:	f5a3 648a 	sub.w	r4, r3, #1104	; 0x450
 8001060:	4a92      	ldr	r2, [pc, #584]	; (80012ac <main+0x3bc>)
 8001062:	4623      	mov	r3, r4
 8001064:	6810      	ldr	r0, [r2, #0]
 8001066:	6851      	ldr	r1, [r2, #4]
 8001068:	c303      	stmia	r3!, {r0, r1}
 800106a:	7a12      	ldrb	r2, [r2, #8]
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	f104 0309 	add.w	r3, r4, #9
 8001072:	225b      	movs	r2, #91	; 0x5b
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f003 f951 	bl	800431e <memset>
       char MSG10[100]= "S Type\n\r";
 800107c:	f607 1368 	addw	r3, r7, #2408	; 0x968
 8001080:	f2a3 44b4 	subw	r4, r3, #1204	; 0x4b4
 8001084:	4a8a      	ldr	r2, [pc, #552]	; (80012b0 <main+0x3c0>)
 8001086:	4623      	mov	r3, r4
 8001088:	6810      	ldr	r0, [r2, #0]
 800108a:	6851      	ldr	r1, [r2, #4]
 800108c:	c303      	stmia	r3!, {r0, r1}
 800108e:	7a12      	ldrb	r2, [r2, #8]
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	f104 0309 	add.w	r3, r4, #9
 8001096:	225b      	movs	r2, #91	; 0x5b
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f003 f93f 	bl	800431e <memset>
       char MSG11[100]= "T Type\n\r";
 80010a0:	f607 1368 	addw	r3, r7, #2408	; 0x968
 80010a4:	f5a3 64a3 	sub.w	r4, r3, #1304	; 0x518
 80010a8:	4a82      	ldr	r2, [pc, #520]	; (80012b4 <main+0x3c4>)
 80010aa:	4623      	mov	r3, r4
 80010ac:	6810      	ldr	r0, [r2, #0]
 80010ae:	6851      	ldr	r1, [r2, #4]
 80010b0:	c303      	stmia	r3!, {r0, r1}
 80010b2:	7a12      	ldrb	r2, [r2, #8]
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	f104 0309 	add.w	r3, r4, #9
 80010ba:	225b      	movs	r2, #91	; 0x5b
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f003 f92d 	bl	800431e <memset>
       char MSG12[100]= "Voltage x8 Gain mode\n\r";
 80010c4:	f607 1368 	addw	r3, r7, #2408	; 0x968
 80010c8:	f2a3 567c 	subw	r6, r3, #1404	; 0x57c
 80010cc:	4b7a      	ldr	r3, [pc, #488]	; (80012b8 <main+0x3c8>)
 80010ce:	4634      	mov	r4, r6
 80010d0:	461d      	mov	r5, r3
 80010d2:	6828      	ldr	r0, [r5, #0]
 80010d4:	6869      	ldr	r1, [r5, #4]
 80010d6:	68aa      	ldr	r2, [r5, #8]
 80010d8:	68eb      	ldr	r3, [r5, #12]
 80010da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010dc:	6928      	ldr	r0, [r5, #16]
 80010de:	6020      	str	r0, [r4, #0]
 80010e0:	8aab      	ldrh	r3, [r5, #20]
 80010e2:	7daa      	ldrb	r2, [r5, #22]
 80010e4:	80a3      	strh	r3, [r4, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	71a3      	strb	r3, [r4, #6]
 80010ea:	f106 0317 	add.w	r3, r6, #23
 80010ee:	224d      	movs	r2, #77	; 0x4d
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f003 f913 	bl	800431e <memset>
       char MSG13[100]= "Voltage x8 Gain mode\n\r";
 80010f8:	f607 1368 	addw	r3, r7, #2408	; 0x968
 80010fc:	f5a3 66bc 	sub.w	r6, r3, #1504	; 0x5e0
 8001100:	4b6d      	ldr	r3, [pc, #436]	; (80012b8 <main+0x3c8>)
 8001102:	4634      	mov	r4, r6
 8001104:	461d      	mov	r5, r3
 8001106:	6828      	ldr	r0, [r5, #0]
 8001108:	6869      	ldr	r1, [r5, #4]
 800110a:	68aa      	ldr	r2, [r5, #8]
 800110c:	68eb      	ldr	r3, [r5, #12]
 800110e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001110:	6928      	ldr	r0, [r5, #16]
 8001112:	6020      	str	r0, [r4, #0]
 8001114:	8aab      	ldrh	r3, [r5, #20]
 8001116:	7daa      	ldrb	r2, [r5, #22]
 8001118:	80a3      	strh	r3, [r4, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	71a3      	strb	r3, [r4, #6]
 800111e:	f106 0317 	add.w	r3, r6, #23
 8001122:	224d      	movs	r2, #77	; 0x4d
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f003 f8f9 	bl	800431e <memset>
       char MSG14[100]= "Unknown\n\r";
 800112c:	f607 1368 	addw	r3, r7, #2408	; 0x968
 8001130:	f2a3 6444 	subw	r4, r3, #1604	; 0x644
 8001134:	4a61      	ldr	r2, [pc, #388]	; (80012bc <main+0x3cc>)
 8001136:	4623      	mov	r3, r4
 8001138:	6810      	ldr	r0, [r2, #0]
 800113a:	6851      	ldr	r1, [r2, #4]
 800113c:	c303      	stmia	r3!, {r0, r1}
 800113e:	8912      	ldrh	r2, [r2, #8]
 8001140:	801a      	strh	r2, [r3, #0]
 8001142:	f104 030a 	add.w	r3, r4, #10
 8001146:	225a      	movs	r2, #90	; 0x5a
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f003 f8e7 	bl	800431e <memset>
       char MSG15[100]= "Cold Junction Range Fault\n\r";
 8001150:	f607 1368 	addw	r3, r7, #2408	; 0x968
 8001154:	f5a3 66d5 	sub.w	r6, r3, #1704	; 0x6a8
 8001158:	4b59      	ldr	r3, [pc, #356]	; (80012c0 <main+0x3d0>)
 800115a:	4634      	mov	r4, r6
 800115c:	461d      	mov	r5, r3
 800115e:	6828      	ldr	r0, [r5, #0]
 8001160:	6869      	ldr	r1, [r5, #4]
 8001162:	68aa      	ldr	r2, [r5, #8]
 8001164:	68eb      	ldr	r3, [r5, #12]
 8001166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001168:	6928      	ldr	r0, [r5, #16]
 800116a:	6969      	ldr	r1, [r5, #20]
 800116c:	69aa      	ldr	r2, [r5, #24]
 800116e:	c407      	stmia	r4!, {r0, r1, r2}
 8001170:	f106 031c 	add.w	r3, r6, #28
 8001174:	2248      	movs	r2, #72	; 0x48
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f003 f8d0 	bl	800431e <memset>
       char MSG16[100]= "Thermocouple Range Fault\n\r";
 800117e:	f607 1368 	addw	r3, r7, #2408	; 0x968
 8001182:	f2a3 760c 	subw	r6, r3, #1804	; 0x70c
 8001186:	4b4f      	ldr	r3, [pc, #316]	; (80012c4 <main+0x3d4>)
 8001188:	4634      	mov	r4, r6
 800118a:	461d      	mov	r5, r3
 800118c:	6828      	ldr	r0, [r5, #0]
 800118e:	6869      	ldr	r1, [r5, #4]
 8001190:	68aa      	ldr	r2, [r5, #8]
 8001192:	68eb      	ldr	r3, [r5, #12]
 8001194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001196:	6928      	ldr	r0, [r5, #16]
 8001198:	6969      	ldr	r1, [r5, #20]
 800119a:	c403      	stmia	r4!, {r0, r1}
 800119c:	8b2b      	ldrh	r3, [r5, #24]
 800119e:	7eaa      	ldrb	r2, [r5, #26]
 80011a0:	8023      	strh	r3, [r4, #0]
 80011a2:	4613      	mov	r3, r2
 80011a4:	70a3      	strb	r3, [r4, #2]
 80011a6:	f106 031b 	add.w	r3, r6, #27
 80011aa:	2249      	movs	r2, #73	; 0x49
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 f8b5 	bl	800431e <memset>
       char MSG17[100]= "Cold Junction High Fault\n\r";
 80011b4:	f607 1368 	addw	r3, r7, #2408	; 0x968
 80011b8:	f5a3 66ee 	sub.w	r6, r3, #1904	; 0x770
 80011bc:	4b42      	ldr	r3, [pc, #264]	; (80012c8 <main+0x3d8>)
 80011be:	4634      	mov	r4, r6
 80011c0:	461d      	mov	r5, r3
 80011c2:	6828      	ldr	r0, [r5, #0]
 80011c4:	6869      	ldr	r1, [r5, #4]
 80011c6:	68aa      	ldr	r2, [r5, #8]
 80011c8:	68eb      	ldr	r3, [r5, #12]
 80011ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011cc:	6928      	ldr	r0, [r5, #16]
 80011ce:	6969      	ldr	r1, [r5, #20]
 80011d0:	c403      	stmia	r4!, {r0, r1}
 80011d2:	8b2b      	ldrh	r3, [r5, #24]
 80011d4:	7eaa      	ldrb	r2, [r5, #26]
 80011d6:	8023      	strh	r3, [r4, #0]
 80011d8:	4613      	mov	r3, r2
 80011da:	70a3      	strb	r3, [r4, #2]
 80011dc:	f106 031b 	add.w	r3, r6, #27
 80011e0:	2249      	movs	r2, #73	; 0x49
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f003 f89a 	bl	800431e <memset>
       char MSG18[100]= "Cold Junction Low Fault\n\r";
 80011ea:	f607 1368 	addw	r3, r7, #2408	; 0x968
 80011ee:	f2a3 76d4 	subw	r6, r3, #2004	; 0x7d4
 80011f2:	4b36      	ldr	r3, [pc, #216]	; (80012cc <main+0x3dc>)
 80011f4:	4634      	mov	r4, r6
 80011f6:	461d      	mov	r5, r3
 80011f8:	6828      	ldr	r0, [r5, #0]
 80011fa:	6869      	ldr	r1, [r5, #4]
 80011fc:	68aa      	ldr	r2, [r5, #8]
 80011fe:	68eb      	ldr	r3, [r5, #12]
 8001200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001202:	6928      	ldr	r0, [r5, #16]
 8001204:	6969      	ldr	r1, [r5, #20]
 8001206:	c403      	stmia	r4!, {r0, r1}
 8001208:	8b2b      	ldrh	r3, [r5, #24]
 800120a:	8023      	strh	r3, [r4, #0]
 800120c:	f106 031a 	add.w	r3, r6, #26
 8001210:	224a      	movs	r2, #74	; 0x4a
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f003 f882 	bl	800431e <memset>
       char MSG19[100]= "Thermocouple High Fault\n\r";
 800121a:	f607 1368 	addw	r3, r7, #2408	; 0x968
 800121e:	f6a3 0638 	subw	r6, r3, #2104	; 0x838
 8001222:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <main+0x3e0>)
 8001224:	4634      	mov	r4, r6
 8001226:	461d      	mov	r5, r3
 8001228:	6828      	ldr	r0, [r5, #0]
 800122a:	6869      	ldr	r1, [r5, #4]
 800122c:	68aa      	ldr	r2, [r5, #8]
 800122e:	68eb      	ldr	r3, [r5, #12]
 8001230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001232:	6928      	ldr	r0, [r5, #16]
 8001234:	6969      	ldr	r1, [r5, #20]
 8001236:	c403      	stmia	r4!, {r0, r1}
 8001238:	8b2b      	ldrh	r3, [r5, #24]
 800123a:	8023      	strh	r3, [r4, #0]
 800123c:	f106 031a 	add.w	r3, r6, #26
 8001240:	224a      	movs	r2, #74	; 0x4a
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f003 f86a 	bl	800431e <memset>
       char MSG20[100]= "Thermocouple Low Fault\n\r";
 800124a:	f607 1368 	addw	r3, r7, #2408	; 0x968
 800124e:	f6a3 069c 	subw	r6, r3, #2204	; 0x89c
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <main+0x3e4>)
 8001254:	4634      	mov	r4, r6
 8001256:	461d      	mov	r5, r3
 8001258:	6828      	ldr	r0, [r5, #0]
 800125a:	6869      	ldr	r1, [r5, #4]
 800125c:	68aa      	ldr	r2, [r5, #8]
 800125e:	68eb      	ldr	r3, [r5, #12]
 8001260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001262:	6928      	ldr	r0, [r5, #16]
 8001264:	6969      	ldr	r1, [r5, #20]
 8001266:	c403      	stmia	r4!, {r0, r1}
 8001268:	7e2b      	ldrb	r3, [r5, #24]
 800126a:	7023      	strb	r3, [r4, #0]
 800126c:	f106 0319 	add.w	r3, r6, #25
 8001270:	224b      	movs	r2, #75	; 0x4b
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f003 f852 	bl	800431e <memset>
       char MSG21[100]= "Over/Under Voltage Fault\n\r";
 800127a:	f607 1368 	addw	r3, r7, #2408	; 0x968
 800127e:	f5a3 6610 	sub.w	r6, r3, #2304	; 0x900
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <main+0x3e8>)
 8001284:	4634      	mov	r4, r6
 8001286:	461d      	mov	r5, r3
 8001288:	e028      	b.n	80012dc <main+0x3ec>
 800128a:	bf00      	nop
 800128c:	08006570 	.word	0x08006570
 8001290:	08006594 	.word	0x08006594
 8001294:	080065c4 	.word	0x080065c4
 8001298:	080065d8 	.word	0x080065d8
 800129c:	080065e4 	.word	0x080065e4
 80012a0:	080065f0 	.word	0x080065f0
 80012a4:	080065fc 	.word	0x080065fc
 80012a8:	08006608 	.word	0x08006608
 80012ac:	08006614 	.word	0x08006614
 80012b0:	08006620 	.word	0x08006620
 80012b4:	0800662c 	.word	0x0800662c
 80012b8:	08006638 	.word	0x08006638
 80012bc:	08006650 	.word	0x08006650
 80012c0:	0800665c 	.word	0x0800665c
 80012c4:	08006678 	.word	0x08006678
 80012c8:	08006694 	.word	0x08006694
 80012cc:	080066b0 	.word	0x080066b0
 80012d0:	080066cc 	.word	0x080066cc
 80012d4:	080066e8 	.word	0x080066e8
 80012d8:	08006704 	.word	0x08006704
 80012dc:	6828      	ldr	r0, [r5, #0]
 80012de:	6869      	ldr	r1, [r5, #4]
 80012e0:	68aa      	ldr	r2, [r5, #8]
 80012e2:	68eb      	ldr	r3, [r5, #12]
 80012e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012e6:	6928      	ldr	r0, [r5, #16]
 80012e8:	6969      	ldr	r1, [r5, #20]
 80012ea:	c403      	stmia	r4!, {r0, r1}
 80012ec:	8b2b      	ldrh	r3, [r5, #24]
 80012ee:	7eaa      	ldrb	r2, [r5, #26]
 80012f0:	8023      	strh	r3, [r4, #0]
 80012f2:	4613      	mov	r3, r2
 80012f4:	70a3      	strb	r3, [r4, #2]
 80012f6:	f106 031b 	add.w	r3, r6, #27
 80012fa:	2249      	movs	r2, #73	; 0x49
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f003 f80d 	bl	800431e <memset>
       char MSG22[100]= "hermocouple Open Faultn\r";
 8001304:	f607 1368 	addw	r3, r7, #2408	; 0x968
 8001308:	f6a3 1664 	subw	r6, r3, #2404	; 0x964
 800130c:	4bb1      	ldr	r3, [pc, #708]	; (80015d4 <main+0x6e4>)
 800130e:	4634      	mov	r4, r6
 8001310:	461d      	mov	r5, r3
 8001312:	6828      	ldr	r0, [r5, #0]
 8001314:	6869      	ldr	r1, [r5, #4]
 8001316:	68aa      	ldr	r2, [r5, #8]
 8001318:	68eb      	ldr	r3, [r5, #12]
 800131a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800131c:	6928      	ldr	r0, [r5, #16]
 800131e:	6969      	ldr	r1, [r5, #20]
 8001320:	c403      	stmia	r4!, {r0, r1}
 8001322:	7e2b      	ldrb	r3, [r5, #24]
 8001324:	7023      	strb	r3, [r4, #0]
 8001326:	f106 0319 	add.w	r3, r6, #25
 800132a:	224b      	movs	r2, #75	; 0x4b
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f002 fff5 	bl	800431e <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001334:	f000 fc0a 	bl	8001b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001338:	f000 f954 	bl	80015e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800133c:	f000 f9f2 	bl	8001724 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001340:	f000 f990 	bl	8001664 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001344:	f000 f9c4 	bl	80016d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  if (!begin()) {
 8001348:	f7ff fbee 	bl	8000b28 <begin>
 800134c:	4603      	mov	r3, r0
 800134e:	f083 0301 	eor.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00a      	beq.n	800136e <main+0x47e>
        HAL_UART_Transmit(&huart1,(uint8_t*)MSG1,sizeof(MSG1), 100);
 8001358:	f607 0138 	addw	r1, r7, #2104	; 0x838
 800135c:	2364      	movs	r3, #100	; 0x64
 800135e:	2264      	movs	r2, #100	; 0x64
 8001360:	489d      	ldr	r0, [pc, #628]	; (80015d8 <main+0x6e8>)
 8001362:	f002 f8d9 	bl	8003518 <HAL_UART_Transmit>
        while (1) HAL_Delay(10);
 8001366:	200a      	movs	r0, #10
 8001368:	f000 fc52 	bl	8001c10 <HAL_Delay>
 800136c:	e7fb      	b.n	8001366 <main+0x476>
      }
    setThermocoupleType(MAX31856_TCTYPE_K);
 800136e:	2003      	movs	r0, #3
 8001370:	f7ff fc32 	bl	8000bd8 <setThermocoupleType>
    HAL_UART_Transmit(&huart1,(uint8_t*)MSG2,sizeof(MSG2), 100);
 8001374:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 8001378:	2364      	movs	r3, #100	; 0x64
 800137a:	2264      	movs	r2, #100	; 0x64
 800137c:	4896      	ldr	r0, [pc, #600]	; (80015d8 <main+0x6e8>)
 800137e:	f002 f8cb 	bl	8003518 <HAL_UART_Transmit>

  switch (getThermocoupleType() ) {
 8001382:	f7ff fc4a 	bl	8000c1a <getThermocoupleType>
 8001386:	4603      	mov	r3, r0
 8001388:	2b0c      	cmp	r3, #12
 800138a:	d86d      	bhi.n	8001468 <main+0x578>
 800138c:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <main+0x4a4>)
 800138e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001392:	bf00      	nop
 8001394:	080013c9 	.word	0x080013c9
 8001398:	080013d9 	.word	0x080013d9
 800139c:	080013e9 	.word	0x080013e9
 80013a0:	080013f9 	.word	0x080013f9
 80013a4:	08001409 	.word	0x08001409
 80013a8:	08001419 	.word	0x08001419
 80013ac:	08001429 	.word	0x08001429
 80013b0:	08001439 	.word	0x08001439
 80013b4:	08001449 	.word	0x08001449
 80013b8:	08001469 	.word	0x08001469
 80013bc:	08001469 	.word	0x08001469
 80013c0:	08001469 	.word	0x08001469
 80013c4:	08001459 	.word	0x08001459
    case MAX31856_TCTYPE_B: HAL_UART_Transmit(&huart1,(uint8_t*)MSG4,sizeof(MSG4), 100);  break;
 80013c8:	f207 710c 	addw	r1, r7, #1804	; 0x70c
 80013cc:	2364      	movs	r3, #100	; 0x64
 80013ce:	2264      	movs	r2, #100	; 0x64
 80013d0:	4881      	ldr	r0, [pc, #516]	; (80015d8 <main+0x6e8>)
 80013d2:	f002 f8a1 	bl	8003518 <HAL_UART_Transmit>
 80013d6:	e04f      	b.n	8001478 <main+0x588>
    case MAX31856_TCTYPE_E: HAL_UART_Transmit(&huart1,(uint8_t*)MSG5,sizeof(MSG5), 100);  break;
 80013d8:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 80013dc:	2364      	movs	r3, #100	; 0x64
 80013de:	2264      	movs	r2, #100	; 0x64
 80013e0:	487d      	ldr	r0, [pc, #500]	; (80015d8 <main+0x6e8>)
 80013e2:	f002 f899 	bl	8003518 <HAL_UART_Transmit>
 80013e6:	e047      	b.n	8001478 <main+0x588>
    case MAX31856_TCTYPE_J: HAL_UART_Transmit(&huart1,(uint8_t*)MSG6,sizeof(MSG6), 100);  break;
 80013e8:	f207 6144 	addw	r1, r7, #1604	; 0x644
 80013ec:	2364      	movs	r3, #100	; 0x64
 80013ee:	2264      	movs	r2, #100	; 0x64
 80013f0:	4879      	ldr	r0, [pc, #484]	; (80015d8 <main+0x6e8>)
 80013f2:	f002 f891 	bl	8003518 <HAL_UART_Transmit>
 80013f6:	e03f      	b.n	8001478 <main+0x588>
    case MAX31856_TCTYPE_K: HAL_UART_Transmit(&huart1,(uint8_t*)MSG7,sizeof(MSG7), 100);  break;
 80013f8:	f507 61bc 	add.w	r1, r7, #1504	; 0x5e0
 80013fc:	2364      	movs	r3, #100	; 0x64
 80013fe:	2264      	movs	r2, #100	; 0x64
 8001400:	4875      	ldr	r0, [pc, #468]	; (80015d8 <main+0x6e8>)
 8001402:	f002 f889 	bl	8003518 <HAL_UART_Transmit>
 8001406:	e037      	b.n	8001478 <main+0x588>
    case MAX31856_TCTYPE_N: HAL_UART_Transmit(&huart1,(uint8_t*)MSG8,sizeof(MSG8), 100);  break;
 8001408:	f207 517c 	addw	r1, r7, #1404	; 0x57c
 800140c:	2364      	movs	r3, #100	; 0x64
 800140e:	2264      	movs	r2, #100	; 0x64
 8001410:	4871      	ldr	r0, [pc, #452]	; (80015d8 <main+0x6e8>)
 8001412:	f002 f881 	bl	8003518 <HAL_UART_Transmit>
 8001416:	e02f      	b.n	8001478 <main+0x588>
    case MAX31856_TCTYPE_R: HAL_UART_Transmit(&huart1,(uint8_t*)MSG9,sizeof(MSG9), 100);  break;
 8001418:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 800141c:	2364      	movs	r3, #100	; 0x64
 800141e:	2264      	movs	r2, #100	; 0x64
 8001420:	486d      	ldr	r0, [pc, #436]	; (80015d8 <main+0x6e8>)
 8001422:	f002 f879 	bl	8003518 <HAL_UART_Transmit>
 8001426:	e027      	b.n	8001478 <main+0x588>
    case MAX31856_TCTYPE_S: HAL_UART_Transmit(&huart1,(uint8_t*)MSG10,sizeof(MSG10), 100);  break;
 8001428:	f207 41b4 	addw	r1, r7, #1204	; 0x4b4
 800142c:	2364      	movs	r3, #100	; 0x64
 800142e:	2264      	movs	r2, #100	; 0x64
 8001430:	4869      	ldr	r0, [pc, #420]	; (80015d8 <main+0x6e8>)
 8001432:	f002 f871 	bl	8003518 <HAL_UART_Transmit>
 8001436:	e01f      	b.n	8001478 <main+0x588>
    case MAX31856_TCTYPE_T: HAL_UART_Transmit(&huart1,(uint8_t*)MSG11,sizeof(MSG11), 100);  break;
 8001438:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 800143c:	2364      	movs	r3, #100	; 0x64
 800143e:	2264      	movs	r2, #100	; 0x64
 8001440:	4865      	ldr	r0, [pc, #404]	; (80015d8 <main+0x6e8>)
 8001442:	f002 f869 	bl	8003518 <HAL_UART_Transmit>
 8001446:	e017      	b.n	8001478 <main+0x588>
    case MAX31856_VMODE_G8:  HAL_UART_Transmit(&huart1,(uint8_t*)MSG12,sizeof(MSG12), 100); break;
 8001448:	f507 717b 	add.w	r1, r7, #1004	; 0x3ec
 800144c:	2364      	movs	r3, #100	; 0x64
 800144e:	2264      	movs	r2, #100	; 0x64
 8001450:	4861      	ldr	r0, [pc, #388]	; (80015d8 <main+0x6e8>)
 8001452:	f002 f861 	bl	8003518 <HAL_UART_Transmit>
 8001456:	e00f      	b.n	8001478 <main+0x588>
    case MAX31856_VMODE_G32: HAL_UART_Transmit(&huart1,(uint8_t*)MSG13,sizeof(MSG13), 100); break;
 8001458:	f507 7162 	add.w	r1, r7, #904	; 0x388
 800145c:	2364      	movs	r3, #100	; 0x64
 800145e:	2264      	movs	r2, #100	; 0x64
 8001460:	485d      	ldr	r0, [pc, #372]	; (80015d8 <main+0x6e8>)
 8001462:	f002 f859 	bl	8003518 <HAL_UART_Transmit>
 8001466:	e007      	b.n	8001478 <main+0x588>
    default:  HAL_UART_Transmit(&huart1,(uint8_t*)MSG14,sizeof(MSG14), 100);break;
 8001468:	f507 7149 	add.w	r1, r7, #804	; 0x324
 800146c:	2364      	movs	r3, #100	; 0x64
 800146e:	2264      	movs	r2, #100	; 0x64
 8001470:	4859      	ldr	r0, [pc, #356]	; (80015d8 <main+0x6e8>)
 8001472:	f002 f851 	bl	8003518 <HAL_UART_Transmit>
 8001476:	bf00      	nop
    }
  HAL_Delay(2000);
 8001478:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800147c:	f000 fbc8 	bl	8001c10 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    sprintf(MSG,"1-Cold Junction Temp: %.2f degrees Celsius\n\r",readCJTemperature());
 8001480:	f7ff fc30 	bl	8000ce4 <readCJTemperature>
 8001484:	4603      	mov	r3, r0
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe ffce 	bl	8000428 <__aeabi_f2d>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	f507 6010 	add.w	r0, r7, #2304	; 0x900
 8001494:	4951      	ldr	r1, [pc, #324]	; (80015dc <main+0x6ec>)
 8001496:	f002 fedf 	bl	8004258 <siprintf>
    sprintf(MSG0,"2-Thermocouple Temp: %.2f degrees Celsius\n\r",
    readThermocoupleTemperature());
 800149a:	f7ff fc3d 	bl	8000d18 <readThermocoupleTemperature>
 800149e:	4603      	mov	r3, r0
    sprintf(MSG0,"2-Thermocouple Temp: %.2f degrees Celsius\n\r",
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7fe ffc1 	bl	8000428 <__aeabi_f2d>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	f607 009c 	addw	r0, r7, #2204	; 0x89c
 80014ae:	494c      	ldr	r1, [pc, #304]	; (80015e0 <main+0x6f0>)
 80014b0:	f002 fed2 	bl	8004258 <siprintf>
    HAL_UART_Transmit(&huart1,(uint8_t *) MSG, sizeof(MSG), 100);
 80014b4:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 80014b8:	2364      	movs	r3, #100	; 0x64
 80014ba:	2264      	movs	r2, #100	; 0x64
 80014bc:	4846      	ldr	r0, [pc, #280]	; (80015d8 <main+0x6e8>)
 80014be:	f002 f82b 	bl	8003518 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1,(uint8_t *) MSG0, sizeof(MSG0), 100);
 80014c2:	f607 019c 	addw	r1, r7, #2204	; 0x89c
 80014c6:	2364      	movs	r3, #100	; 0x64
 80014c8:	2264      	movs	r2, #100	; 0x64
 80014ca:	4843      	ldr	r0, [pc, #268]	; (80015d8 <main+0x6e8>)
 80014cc:	f002 f824 	bl	8003518 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1,(uint8_t *) MSG3, sizeof(MSG3), 100);
 80014d0:	f207 71d4 	addw	r1, r7, #2004	; 0x7d4
 80014d4:	2364      	movs	r3, #100	; 0x64
 80014d6:	2264      	movs	r2, #100	; 0x64
 80014d8:	483f      	ldr	r0, [pc, #252]	; (80015d8 <main+0x6e8>)
 80014da:	f002 f81d 	bl	8003518 <HAL_UART_Transmit>
    uint8_t fault = readFault();
 80014de:	f7ff fbad 	bl	8000c3c <readFault>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f887 3967 	strb.w	r3, [r7, #2407]	; 0x967
    if (fault) {
 80014e8:	f897 3967 	ldrb.w	r3, [r7, #2407]	; 0x967
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d064      	beq.n	80015ba <main+0x6ca>
    if (fault & MAX31856_FAULT_CJRANGE)  HAL_UART_Transmit(&huart1,(uint8_t*)MSG15,sizeof(MSG15), 100);
 80014f0:	f997 3967 	ldrsb.w	r3, [r7, #2407]	; 0x967
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	da06      	bge.n	8001506 <main+0x616>
 80014f8:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 80014fc:	2364      	movs	r3, #100	; 0x64
 80014fe:	2264      	movs	r2, #100	; 0x64
 8001500:	4835      	ldr	r0, [pc, #212]	; (80015d8 <main+0x6e8>)
 8001502:	f002 f809 	bl	8003518 <HAL_UART_Transmit>
    if (fault & MAX31856_FAULT_TCRANGE)  HAL_UART_Transmit(&huart1,(uint8_t*)MSG16,sizeof(MSG16), 100);
 8001506:	f897 3967 	ldrb.w	r3, [r7, #2407]	; 0x967
 800150a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800150e:	2b00      	cmp	r3, #0
 8001510:	d006      	beq.n	8001520 <main+0x630>
 8001512:	f507 7117 	add.w	r1, r7, #604	; 0x25c
 8001516:	2364      	movs	r3, #100	; 0x64
 8001518:	2264      	movs	r2, #100	; 0x64
 800151a:	482f      	ldr	r0, [pc, #188]	; (80015d8 <main+0x6e8>)
 800151c:	f001 fffc 	bl	8003518 <HAL_UART_Transmit>
    if (fault & MAX31856_FAULT_CJHIGH)   HAL_UART_Transmit(&huart1,(uint8_t*)MSG17,sizeof(MSG17), 100);
 8001520:	f897 3967 	ldrb.w	r3, [r7, #2407]	; 0x967
 8001524:	f003 0320 	and.w	r3, r3, #32
 8001528:	2b00      	cmp	r3, #0
 800152a:	d006      	beq.n	800153a <main+0x64a>
 800152c:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8001530:	2364      	movs	r3, #100	; 0x64
 8001532:	2264      	movs	r2, #100	; 0x64
 8001534:	4828      	ldr	r0, [pc, #160]	; (80015d8 <main+0x6e8>)
 8001536:	f001 ffef 	bl	8003518 <HAL_UART_Transmit>
    if (fault & MAX31856_FAULT_CJLOW)    HAL_UART_Transmit(&huart1,(uint8_t*)MSG18,sizeof(MSG18), 100);
 800153a:	f897 3967 	ldrb.w	r3, [r7, #2407]	; 0x967
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	2b00      	cmp	r3, #0
 8001544:	d006      	beq.n	8001554 <main+0x664>
 8001546:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800154a:	2364      	movs	r3, #100	; 0x64
 800154c:	2264      	movs	r2, #100	; 0x64
 800154e:	4822      	ldr	r0, [pc, #136]	; (80015d8 <main+0x6e8>)
 8001550:	f001 ffe2 	bl	8003518 <HAL_UART_Transmit>
    if (fault & MAX31856_FAULT_TCHIGH)   HAL_UART_Transmit(&huart1,(uint8_t*)MSG19,sizeof(MSG19), 100);
 8001554:	f897 3967 	ldrb.w	r3, [r7, #2407]	; 0x967
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <main+0x67e>
 8001560:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8001564:	2364      	movs	r3, #100	; 0x64
 8001566:	2264      	movs	r2, #100	; 0x64
 8001568:	481b      	ldr	r0, [pc, #108]	; (80015d8 <main+0x6e8>)
 800156a:	f001 ffd5 	bl	8003518 <HAL_UART_Transmit>
    if (fault & MAX31856_FAULT_TCLOW)    HAL_UART_Transmit(&huart1,(uint8_t*)MSG20,sizeof(MSG20), 100);
 800156e:	f897 3967 	ldrb.w	r3, [r7, #2407]	; 0x967
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	2b00      	cmp	r3, #0
 8001578:	d006      	beq.n	8001588 <main+0x698>
 800157a:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 800157e:	2364      	movs	r3, #100	; 0x64
 8001580:	2264      	movs	r2, #100	; 0x64
 8001582:	4815      	ldr	r0, [pc, #84]	; (80015d8 <main+0x6e8>)
 8001584:	f001 ffc8 	bl	8003518 <HAL_UART_Transmit>
    if (fault & MAX31856_FAULT_OVUV)     HAL_UART_Transmit(&huart1,(uint8_t*)MSG21,sizeof(MSG21), 100);
 8001588:	f897 3967 	ldrb.w	r3, [r7, #2407]	; 0x967
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d006      	beq.n	80015a2 <main+0x6b2>
 8001594:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001598:	2364      	movs	r3, #100	; 0x64
 800159a:	2264      	movs	r2, #100	; 0x64
 800159c:	480e      	ldr	r0, [pc, #56]	; (80015d8 <main+0x6e8>)
 800159e:	f001 ffbb 	bl	8003518 <HAL_UART_Transmit>
    if (fault & MAX31856_FAULT_OPEN)     HAL_UART_Transmit(&huart1,(uint8_t*)MSG22,sizeof(MSG22), 100);
 80015a2:	f897 3967 	ldrb.w	r3, [r7, #2407]	; 0x967
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <main+0x6ca>
 80015ae:	1d39      	adds	r1, r7, #4
 80015b0:	2364      	movs	r3, #100	; 0x64
 80015b2:	2264      	movs	r2, #100	; 0x64
 80015b4:	4808      	ldr	r0, [pc, #32]	; (80015d8 <main+0x6e8>)
 80015b6:	f001 ffaf 	bl	8003518 <HAL_UART_Transmit>
    }
    HAL_UART_Transmit(&huart1,(uint8_t *) MSG, sizeof(MSG), 100);
 80015ba:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 80015be:	2364      	movs	r3, #100	; 0x64
 80015c0:	2264      	movs	r2, #100	; 0x64
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <main+0x6e8>)
 80015c4:	f001 ffa8 	bl	8003518 <HAL_UART_Transmit>
    HAL_Delay(1000);
 80015c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015cc:	f000 fb20 	bl	8001c10 <HAL_Delay>
  {
 80015d0:	e756      	b.n	8001480 <main+0x590>
 80015d2:	bf00      	nop
 80015d4:	08006720 	.word	0x08006720
 80015d8:	2000024c 	.word	0x2000024c
 80015dc:	08006514 	.word	0x08006514
 80015e0:	08006544 	.word	0x08006544

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b090      	sub	sp, #64	; 0x40
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0318 	add.w	r3, r7, #24
 80015ee:	2228      	movs	r2, #40	; 0x28
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 fe93 	bl	800431e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001606:	2302      	movs	r3, #2
 8001608:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800160a:	2301      	movs	r3, #1
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800160e:	2310      	movs	r3, #16
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001612:	2302      	movs	r3, #2
 8001614:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001616:	2300      	movs	r3, #0
 8001618:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800161a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800161e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001620:	f107 0318 	add.w	r3, r7, #24
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fd8f 	bl	8002148 <HAL_RCC_OscConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001630:	f000 f8aa 	bl	8001788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001634:	230f      	movs	r3, #15
 8001636:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001638:	2302      	movs	r3, #2
 800163a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f000 fffd 	bl	800264c <HAL_RCC_ClockConfig>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001658:	f000 f896 	bl	8001788 <Error_Handler>
  }
}
 800165c:	bf00      	nop
 800165e:	3740      	adds	r7, #64	; 0x40
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <MX_SPI1_Init+0x64>)
 800166a:	4a18      	ldr	r2, [pc, #96]	; (80016cc <MX_SPI1_Init+0x68>)
 800166c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <MX_SPI1_Init+0x64>)
 8001670:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001674:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_SPI1_Init+0x64>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <MX_SPI1_Init+0x64>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_SPI1_Init+0x64>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <MX_SPI1_Init+0x64>)
 800168a:	2201      	movs	r2, #1
 800168c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_SPI1_Init+0x64>)
 8001690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001694:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <MX_SPI1_Init+0x64>)
 8001698:	2200      	movs	r2, #0
 800169a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <MX_SPI1_Init+0x64>)
 800169e:	2200      	movs	r2, #0
 80016a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <MX_SPI1_Init+0x64>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <MX_SPI1_Init+0x64>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <MX_SPI1_Init+0x64>)
 80016b0:	220a      	movs	r2, #10
 80016b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016b4:	4804      	ldr	r0, [pc, #16]	; (80016c8 <MX_SPI1_Init+0x64>)
 80016b6:	f001 f957 	bl	8002968 <HAL_SPI_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016c0:	f000 f862 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200001f4 	.word	0x200001f4
 80016cc:	40013000 	.word	0x40013000

080016d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_USART1_UART_Init+0x4c>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	; (8001720 <MX_USART1_UART_Init+0x50>)
 80016d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <MX_USART1_UART_Init+0x4c>)
 80016dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_USART1_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_USART1_UART_Init+0x4c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <MX_USART1_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_USART1_UART_Init+0x4c>)
 80016f6:	220c      	movs	r2, #12
 80016f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <MX_USART1_UART_Init+0x4c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_USART1_UART_Init+0x4c>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_USART1_UART_Init+0x4c>)
 8001708:	f001 feb6 	bl	8003478 <HAL_UART_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001712:	f000 f839 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000024c 	.word	0x2000024c
 8001720:	40013800 	.word	0x40013800

08001724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_GPIO_Init+0x5c>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a10      	ldr	r2, [pc, #64]	; (8001780 <MX_GPIO_Init+0x5c>)
 800173e:	f043 0304 	orr.w	r3, r3, #4
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MX_GPIO_Init+0x5c>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAX_FAULT_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	2118      	movs	r1, #24
 8001754:	480b      	ldr	r0, [pc, #44]	; (8001784 <MX_GPIO_Init+0x60>)
 8001756:	f000 fcdf 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MAX_FAULT_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = MAX_FAULT_Pin|SPI1_CS_Pin;
 800175a:	2318      	movs	r3, #24
 800175c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2302      	movs	r3, #2
 8001768:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	4619      	mov	r1, r3
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <MX_GPIO_Init+0x60>)
 8001772:	f000 fb55 	bl	8001e20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000
 8001784:	40010800 	.word	0x40010800

08001788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800178c:	b672      	cpsid	i
}
 800178e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001790:	e7fe      	b.n	8001790 <Error_Handler+0x8>
	...

08001794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_MspInit+0x5c>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <HAL_MspInit+0x5c>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6193      	str	r3, [r2, #24]
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_MspInit+0x5c>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_MspInit+0x5c>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <HAL_MspInit+0x5c>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017bc:	61d3      	str	r3, [r2, #28]
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_MspInit+0x5c>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_MspInit+0x60>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <HAL_MspInit+0x60>)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40010000 	.word	0x40010000

080017f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a1b      	ldr	r2, [pc, #108]	; (8001880 <HAL_SPI_MspInit+0x88>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d12f      	bne.n	8001878 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001818:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <HAL_SPI_MspInit+0x8c>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a19      	ldr	r2, [pc, #100]	; (8001884 <HAL_SPI_MspInit+0x8c>)
 800181e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b17      	ldr	r3, [pc, #92]	; (8001884 <HAL_SPI_MspInit+0x8c>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001830:	4b14      	ldr	r3, [pc, #80]	; (8001884 <HAL_SPI_MspInit+0x8c>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	4a13      	ldr	r2, [pc, #76]	; (8001884 <HAL_SPI_MspInit+0x8c>)
 8001836:	f043 0304 	orr.w	r3, r3, #4
 800183a:	6193      	str	r3, [r2, #24]
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_SPI_MspInit+0x8c>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001848:	23a0      	movs	r3, #160	; 0xa0
 800184a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	4619      	mov	r1, r3
 800185a:	480b      	ldr	r0, [pc, #44]	; (8001888 <HAL_SPI_MspInit+0x90>)
 800185c:	f000 fae0 	bl	8001e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001860:	2340      	movs	r3, #64	; 0x40
 8001862:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	4619      	mov	r1, r3
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <HAL_SPI_MspInit+0x90>)
 8001874:	f000 fad4 	bl	8001e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001878:	bf00      	nop
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40013000 	.word	0x40013000
 8001884:	40021000 	.word	0x40021000
 8001888:	40010800 	.word	0x40010800

0800188c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a1c      	ldr	r2, [pc, #112]	; (8001918 <HAL_UART_MspInit+0x8c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d131      	bne.n	8001910 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_UART_MspInit+0x90>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	4a1a      	ldr	r2, [pc, #104]	; (800191c <HAL_UART_MspInit+0x90>)
 80018b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b6:	6193      	str	r3, [r2, #24]
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <HAL_UART_MspInit+0x90>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_UART_MspInit+0x90>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	4a14      	ldr	r2, [pc, #80]	; (800191c <HAL_UART_MspInit+0x90>)
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	6193      	str	r3, [r2, #24]
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_UART_MspInit+0x90>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	4619      	mov	r1, r3
 80018f0:	480b      	ldr	r0, [pc, #44]	; (8001920 <HAL_UART_MspInit+0x94>)
 80018f2:	f000 fa95 	bl	8001e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	4619      	mov	r1, r3
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <HAL_UART_MspInit+0x94>)
 800190c:	f000 fa88 	bl	8001e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001910:	bf00      	nop
 8001912:	3720      	adds	r7, #32
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40013800 	.word	0x40013800
 800191c:	40021000 	.word	0x40021000
 8001920:	40010800 	.word	0x40010800

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001928:	e7fe      	b.n	8001928 <NMI_Handler+0x4>

0800192a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <HardFault_Handler+0x4>

08001930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <MemManage_Handler+0x4>

08001936 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <BusFault_Handler+0x4>

0800193c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <UsageFault_Handler+0x4>

08001942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr

0800194e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr

08001966 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196a:	f000 f935 	bl	8001bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}

08001972 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  return 1;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <_kill>:

int _kill(int pid, int sig)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800198a:	f002 fd1b 	bl	80043c4 <__errno>
 800198e:	4603      	mov	r3, r0
 8001990:	2216      	movs	r2, #22
 8001992:	601a      	str	r2, [r3, #0]
  return -1;
 8001994:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <_exit>:

void _exit (int status)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ffe7 	bl	8001980 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019b2:	e7fe      	b.n	80019b2 <_exit+0x12>

080019b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	e00a      	b.n	80019dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019c6:	f3af 8000 	nop.w
 80019ca:	4601      	mov	r1, r0
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	60ba      	str	r2, [r7, #8]
 80019d2:	b2ca      	uxtb	r2, r1
 80019d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3301      	adds	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	dbf0      	blt.n	80019c6 <_read+0x12>
  }

  return len;
 80019e4:	687b      	ldr	r3, [r7, #4]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	e009      	b.n	8001a14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	60ba      	str	r2, [r7, #8]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3301      	adds	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dbf1      	blt.n	8001a00 <_write+0x12>
  }
  return len;
 8001a1c:	687b      	ldr	r3, [r7, #4]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <_close>:

int _close(int file)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a4c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <_isatty>:

int _isatty(int file)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b085      	sub	sp, #20
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
	...

08001a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a90:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <_sbrk+0x5c>)
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <_sbrk+0x60>)
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <_sbrk+0x64>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <_sbrk+0x68>)
 8001aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d207      	bcs.n	8001ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab8:	f002 fc84 	bl	80043c4 <__errno>
 8001abc:	4603      	mov	r3, r0
 8001abe:	220c      	movs	r2, #12
 8001ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	e009      	b.n	8001adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4a05      	ldr	r2, [pc, #20]	; (8001aec <_sbrk+0x64>)
 8001ad8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ada:	68fb      	ldr	r3, [r7, #12]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20002800 	.word	0x20002800
 8001ae8:	00000400 	.word	0x00000400
 8001aec:	20000294 	.word	0x20000294
 8001af0:	200003e8 	.word	0x200003e8

08001af4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b00:	f7ff fff8 	bl	8001af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b04:	480b      	ldr	r0, [pc, #44]	; (8001b34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b06:	490c      	ldr	r1, [pc, #48]	; (8001b38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b08:	4a0c      	ldr	r2, [pc, #48]	; (8001b3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a09      	ldr	r2, [pc, #36]	; (8001b40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b1c:	4c09      	ldr	r4, [pc, #36]	; (8001b44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b2a:	f002 fc51 	bl	80043d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b2e:	f7ff f9df 	bl	8000ef0 <main>
  bx lr
 8001b32:	4770      	bx	lr
  ldr r0, =_sdata
 8001b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b38:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b3c:	08006adc 	.word	0x08006adc
  ldr r2, =_sbss
 8001b40:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b44:	200003e8 	.word	0x200003e8

08001b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b48:	e7fe      	b.n	8001b48 <ADC1_2_IRQHandler>
	...

08001b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <HAL_Init+0x28>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <HAL_Init+0x28>)
 8001b56:	f043 0310 	orr.w	r3, r3, #16
 8001b5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5c:	2003      	movs	r0, #3
 8001b5e:	f000 f92b 	bl	8001db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b62:	200f      	movs	r0, #15
 8001b64:	f000 f808 	bl	8001b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b68:	f7ff fe14 	bl	8001794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40022000 	.word	0x40022000

08001b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_InitTick+0x54>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_InitTick+0x58>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f935 	bl	8001e06 <HAL_SYSTICK_Config>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00e      	b.n	8001bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b0f      	cmp	r3, #15
 8001baa:	d80a      	bhi.n	8001bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bac:	2200      	movs	r2, #0
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb4:	f000 f90b 	bl	8001dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb8:	4a06      	ldr	r2, [pc, #24]	; (8001bd4 <HAL_InitTick+0x5c>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e000      	b.n	8001bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	20000008 	.word	0x20000008
 8001bd4:	20000004 	.word	0x20000004

08001bd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_IncTick+0x1c>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_IncTick+0x20>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	4a03      	ldr	r2, [pc, #12]	; (8001bf8 <HAL_IncTick+0x20>)
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	20000298 	.word	0x20000298

08001bfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001c00:	4b02      	ldr	r3, [pc, #8]	; (8001c0c <HAL_GetTick+0x10>)
 8001c02:	681b      	ldr	r3, [r3, #0]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	20000298 	.word	0x20000298

08001c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c18:	f7ff fff0 	bl	8001bfc <HAL_GetTick>
 8001c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c28:	d005      	beq.n	8001c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_Delay+0x44>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c36:	bf00      	nop
 8001c38:	f7ff ffe0 	bl	8001bfc <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d8f7      	bhi.n	8001c38 <HAL_Delay+0x28>
  {
  }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000008 	.word	0x20000008

08001c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8a:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	60d3      	str	r3, [r2, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	f003 0307 	and.w	r3, r3, #7
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	db0a      	blt.n	8001ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	490c      	ldr	r1, [pc, #48]	; (8001d08 <__NVIC_SetPriority+0x4c>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	0112      	lsls	r2, r2, #4
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce4:	e00a      	b.n	8001cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4908      	ldr	r1, [pc, #32]	; (8001d0c <__NVIC_SetPriority+0x50>)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	3b04      	subs	r3, #4
 8001cf4:	0112      	lsls	r2, r2, #4
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	761a      	strb	r2, [r3, #24]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000e100 	.word	0xe000e100
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	; 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f1c3 0307 	rsb	r3, r3, #7
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	bf28      	it	cs
 8001d2e:	2304      	movcs	r3, #4
 8001d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3304      	adds	r3, #4
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d902      	bls.n	8001d40 <NVIC_EncodePriority+0x30>
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3b03      	subs	r3, #3
 8001d3e:	e000      	b.n	8001d42 <NVIC_EncodePriority+0x32>
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	401a      	ands	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	43d9      	mvns	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	4313      	orrs	r3, r2
         );
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3724      	adds	r7, #36	; 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d84:	d301      	bcc.n	8001d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00f      	b.n	8001daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <SysTick_Config+0x40>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d92:	210f      	movs	r1, #15
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295
 8001d98:	f7ff ff90 	bl	8001cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <SysTick_Config+0x40>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <SysTick_Config+0x40>)
 8001da4:	2207      	movs	r2, #7
 8001da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	e000e010 	.word	0xe000e010

08001db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ff49 	bl	8001c58 <__NVIC_SetPriorityGrouping>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de0:	f7ff ff5e 	bl	8001ca0 <__NVIC_GetPriorityGrouping>
 8001de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	6978      	ldr	r0, [r7, #20]
 8001dec:	f7ff ff90 	bl	8001d10 <NVIC_EncodePriority>
 8001df0:	4602      	mov	r2, r0
 8001df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff5f 	bl	8001cbc <__NVIC_SetPriority>
}
 8001dfe:	bf00      	nop
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ffb0 	bl	8001d74 <SysTick_Config>
 8001e14:	4603      	mov	r3, r0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b08b      	sub	sp, #44	; 0x2c
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e32:	e161      	b.n	80020f8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e34:	2201      	movs	r2, #1
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	f040 8150 	bne.w	80020f2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4a97      	ldr	r2, [pc, #604]	; (80020b4 <HAL_GPIO_Init+0x294>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d05e      	beq.n	8001f1a <HAL_GPIO_Init+0xfa>
 8001e5c:	4a95      	ldr	r2, [pc, #596]	; (80020b4 <HAL_GPIO_Init+0x294>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d875      	bhi.n	8001f4e <HAL_GPIO_Init+0x12e>
 8001e62:	4a95      	ldr	r2, [pc, #596]	; (80020b8 <HAL_GPIO_Init+0x298>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d058      	beq.n	8001f1a <HAL_GPIO_Init+0xfa>
 8001e68:	4a93      	ldr	r2, [pc, #588]	; (80020b8 <HAL_GPIO_Init+0x298>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d86f      	bhi.n	8001f4e <HAL_GPIO_Init+0x12e>
 8001e6e:	4a93      	ldr	r2, [pc, #588]	; (80020bc <HAL_GPIO_Init+0x29c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d052      	beq.n	8001f1a <HAL_GPIO_Init+0xfa>
 8001e74:	4a91      	ldr	r2, [pc, #580]	; (80020bc <HAL_GPIO_Init+0x29c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d869      	bhi.n	8001f4e <HAL_GPIO_Init+0x12e>
 8001e7a:	4a91      	ldr	r2, [pc, #580]	; (80020c0 <HAL_GPIO_Init+0x2a0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d04c      	beq.n	8001f1a <HAL_GPIO_Init+0xfa>
 8001e80:	4a8f      	ldr	r2, [pc, #572]	; (80020c0 <HAL_GPIO_Init+0x2a0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d863      	bhi.n	8001f4e <HAL_GPIO_Init+0x12e>
 8001e86:	4a8f      	ldr	r2, [pc, #572]	; (80020c4 <HAL_GPIO_Init+0x2a4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d046      	beq.n	8001f1a <HAL_GPIO_Init+0xfa>
 8001e8c:	4a8d      	ldr	r2, [pc, #564]	; (80020c4 <HAL_GPIO_Init+0x2a4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d85d      	bhi.n	8001f4e <HAL_GPIO_Init+0x12e>
 8001e92:	2b12      	cmp	r3, #18
 8001e94:	d82a      	bhi.n	8001eec <HAL_GPIO_Init+0xcc>
 8001e96:	2b12      	cmp	r3, #18
 8001e98:	d859      	bhi.n	8001f4e <HAL_GPIO_Init+0x12e>
 8001e9a:	a201      	add	r2, pc, #4	; (adr r2, 8001ea0 <HAL_GPIO_Init+0x80>)
 8001e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea0:	08001f1b 	.word	0x08001f1b
 8001ea4:	08001ef5 	.word	0x08001ef5
 8001ea8:	08001f07 	.word	0x08001f07
 8001eac:	08001f49 	.word	0x08001f49
 8001eb0:	08001f4f 	.word	0x08001f4f
 8001eb4:	08001f4f 	.word	0x08001f4f
 8001eb8:	08001f4f 	.word	0x08001f4f
 8001ebc:	08001f4f 	.word	0x08001f4f
 8001ec0:	08001f4f 	.word	0x08001f4f
 8001ec4:	08001f4f 	.word	0x08001f4f
 8001ec8:	08001f4f 	.word	0x08001f4f
 8001ecc:	08001f4f 	.word	0x08001f4f
 8001ed0:	08001f4f 	.word	0x08001f4f
 8001ed4:	08001f4f 	.word	0x08001f4f
 8001ed8:	08001f4f 	.word	0x08001f4f
 8001edc:	08001f4f 	.word	0x08001f4f
 8001ee0:	08001f4f 	.word	0x08001f4f
 8001ee4:	08001efd 	.word	0x08001efd
 8001ee8:	08001f11 	.word	0x08001f11
 8001eec:	4a76      	ldr	r2, [pc, #472]	; (80020c8 <HAL_GPIO_Init+0x2a8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d013      	beq.n	8001f1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ef2:	e02c      	b.n	8001f4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	623b      	str	r3, [r7, #32]
          break;
 8001efa:	e029      	b.n	8001f50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	3304      	adds	r3, #4
 8001f02:	623b      	str	r3, [r7, #32]
          break;
 8001f04:	e024      	b.n	8001f50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	3308      	adds	r3, #8
 8001f0c:	623b      	str	r3, [r7, #32]
          break;
 8001f0e:	e01f      	b.n	8001f50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	330c      	adds	r3, #12
 8001f16:	623b      	str	r3, [r7, #32]
          break;
 8001f18:	e01a      	b.n	8001f50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d102      	bne.n	8001f28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f22:	2304      	movs	r3, #4
 8001f24:	623b      	str	r3, [r7, #32]
          break;
 8001f26:	e013      	b.n	8001f50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d105      	bne.n	8001f3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f30:	2308      	movs	r3, #8
 8001f32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	611a      	str	r2, [r3, #16]
          break;
 8001f3a:	e009      	b.n	8001f50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	615a      	str	r2, [r3, #20]
          break;
 8001f46:	e003      	b.n	8001f50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
          break;
 8001f4c:	e000      	b.n	8001f50 <HAL_GPIO_Init+0x130>
          break;
 8001f4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2bff      	cmp	r3, #255	; 0xff
 8001f54:	d801      	bhi.n	8001f5a <HAL_GPIO_Init+0x13a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	e001      	b.n	8001f5e <HAL_GPIO_Init+0x13e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	2bff      	cmp	r3, #255	; 0xff
 8001f64:	d802      	bhi.n	8001f6c <HAL_GPIO_Init+0x14c>
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	e002      	b.n	8001f72 <HAL_GPIO_Init+0x152>
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	3b08      	subs	r3, #8
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	210f      	movs	r1, #15
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	401a      	ands	r2, r3
 8001f84:	6a39      	ldr	r1, [r7, #32]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 80a9 	beq.w	80020f2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fa0:	4b4a      	ldr	r3, [pc, #296]	; (80020cc <HAL_GPIO_Init+0x2ac>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	4a49      	ldr	r2, [pc, #292]	; (80020cc <HAL_GPIO_Init+0x2ac>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6193      	str	r3, [r2, #24]
 8001fac:	4b47      	ldr	r3, [pc, #284]	; (80020cc <HAL_GPIO_Init+0x2ac>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fb8:	4a45      	ldr	r2, [pc, #276]	; (80020d0 <HAL_GPIO_Init+0x2b0>)
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	089b      	lsrs	r3, r3, #2
 8001fbe:	3302      	adds	r3, #2
 8001fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	220f      	movs	r2, #15
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a3d      	ldr	r2, [pc, #244]	; (80020d4 <HAL_GPIO_Init+0x2b4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d00d      	beq.n	8002000 <HAL_GPIO_Init+0x1e0>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a3c      	ldr	r2, [pc, #240]	; (80020d8 <HAL_GPIO_Init+0x2b8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d007      	beq.n	8001ffc <HAL_GPIO_Init+0x1dc>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a3b      	ldr	r2, [pc, #236]	; (80020dc <HAL_GPIO_Init+0x2bc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d101      	bne.n	8001ff8 <HAL_GPIO_Init+0x1d8>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e004      	b.n	8002002 <HAL_GPIO_Init+0x1e2>
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e002      	b.n	8002002 <HAL_GPIO_Init+0x1e2>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <HAL_GPIO_Init+0x1e2>
 8002000:	2300      	movs	r3, #0
 8002002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002004:	f002 0203 	and.w	r2, r2, #3
 8002008:	0092      	lsls	r2, r2, #2
 800200a:	4093      	lsls	r3, r2
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002012:	492f      	ldr	r1, [pc, #188]	; (80020d0 <HAL_GPIO_Init+0x2b0>)
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	3302      	adds	r3, #2
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800202c:	4b2c      	ldr	r3, [pc, #176]	; (80020e0 <HAL_GPIO_Init+0x2c0>)
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	492b      	ldr	r1, [pc, #172]	; (80020e0 <HAL_GPIO_Init+0x2c0>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800203a:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <HAL_GPIO_Init+0x2c0>)
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	43db      	mvns	r3, r3
 8002042:	4927      	ldr	r1, [pc, #156]	; (80020e0 <HAL_GPIO_Init+0x2c0>)
 8002044:	4013      	ands	r3, r2
 8002046:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002054:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <HAL_GPIO_Init+0x2c0>)
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	4921      	ldr	r1, [pc, #132]	; (80020e0 <HAL_GPIO_Init+0x2c0>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	60cb      	str	r3, [r1, #12]
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002062:	4b1f      	ldr	r3, [pc, #124]	; (80020e0 <HAL_GPIO_Init+0x2c0>)
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	43db      	mvns	r3, r3
 800206a:	491d      	ldr	r1, [pc, #116]	; (80020e0 <HAL_GPIO_Init+0x2c0>)
 800206c:	4013      	ands	r3, r2
 800206e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800207c:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <HAL_GPIO_Init+0x2c0>)
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	4917      	ldr	r1, [pc, #92]	; (80020e0 <HAL_GPIO_Init+0x2c0>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <HAL_GPIO_Init+0x2c0>)
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	43db      	mvns	r3, r3
 8002092:	4913      	ldr	r1, [pc, #76]	; (80020e0 <HAL_GPIO_Init+0x2c0>)
 8002094:	4013      	ands	r3, r2
 8002096:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d01f      	beq.n	80020e4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020a4:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <HAL_GPIO_Init+0x2c0>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	490d      	ldr	r1, [pc, #52]	; (80020e0 <HAL_GPIO_Init+0x2c0>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	e01f      	b.n	80020f2 <HAL_GPIO_Init+0x2d2>
 80020b2:	bf00      	nop
 80020b4:	10320000 	.word	0x10320000
 80020b8:	10310000 	.word	0x10310000
 80020bc:	10220000 	.word	0x10220000
 80020c0:	10210000 	.word	0x10210000
 80020c4:	10120000 	.word	0x10120000
 80020c8:	10110000 	.word	0x10110000
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40010000 	.word	0x40010000
 80020d4:	40010800 	.word	0x40010800
 80020d8:	40010c00 	.word	0x40010c00
 80020dc:	40011000 	.word	0x40011000
 80020e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_GPIO_Init+0x2f4>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	4909      	ldr	r1, [pc, #36]	; (8002114 <HAL_GPIO_Init+0x2f4>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	3301      	adds	r3, #1
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	f47f ae96 	bne.w	8001e34 <HAL_GPIO_Init+0x14>
  }
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	372c      	adds	r7, #44	; 0x2c
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	40010400 	.word	0x40010400

08002118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
 8002124:	4613      	mov	r3, r2
 8002126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002128:	787b      	ldrb	r3, [r7, #1]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002134:	e003      	b.n	800213e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002136:	887b      	ldrh	r3, [r7, #2]
 8002138:	041a      	lsls	r2, r3, #16
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	611a      	str	r2, [r3, #16]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e272      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 8087 	beq.w	8002276 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002168:	4b92      	ldr	r3, [pc, #584]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 030c 	and.w	r3, r3, #12
 8002170:	2b04      	cmp	r3, #4
 8002172:	d00c      	beq.n	800218e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002174:	4b8f      	ldr	r3, [pc, #572]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b08      	cmp	r3, #8
 800217e:	d112      	bne.n	80021a6 <HAL_RCC_OscConfig+0x5e>
 8002180:	4b8c      	ldr	r3, [pc, #560]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800218c:	d10b      	bne.n	80021a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218e:	4b89      	ldr	r3, [pc, #548]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d06c      	beq.n	8002274 <HAL_RCC_OscConfig+0x12c>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d168      	bne.n	8002274 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e24c      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ae:	d106      	bne.n	80021be <HAL_RCC_OscConfig+0x76>
 80021b0:	4b80      	ldr	r3, [pc, #512]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a7f      	ldr	r2, [pc, #508]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	e02e      	b.n	800221c <HAL_RCC_OscConfig+0xd4>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10c      	bne.n	80021e0 <HAL_RCC_OscConfig+0x98>
 80021c6:	4b7b      	ldr	r3, [pc, #492]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a7a      	ldr	r2, [pc, #488]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	4b78      	ldr	r3, [pc, #480]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a77      	ldr	r2, [pc, #476]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	e01d      	b.n	800221c <HAL_RCC_OscConfig+0xd4>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e8:	d10c      	bne.n	8002204 <HAL_RCC_OscConfig+0xbc>
 80021ea:	4b72      	ldr	r3, [pc, #456]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a71      	ldr	r2, [pc, #452]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	4b6f      	ldr	r3, [pc, #444]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a6e      	ldr	r2, [pc, #440]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	e00b      	b.n	800221c <HAL_RCC_OscConfig+0xd4>
 8002204:	4b6b      	ldr	r3, [pc, #428]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a6a      	ldr	r2, [pc, #424]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 800220a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	4b68      	ldr	r3, [pc, #416]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a67      	ldr	r2, [pc, #412]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d013      	beq.n	800224c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7ff fcea 	bl	8001bfc <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800222c:	f7ff fce6 	bl	8001bfc <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	; 0x64
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e200      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	4b5d      	ldr	r3, [pc, #372]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0xe4>
 800224a:	e014      	b.n	8002276 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7ff fcd6 	bl	8001bfc <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002254:	f7ff fcd2 	bl	8001bfc <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	; 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e1ec      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002266:	4b53      	ldr	r3, [pc, #332]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x10c>
 8002272:	e000      	b.n	8002276 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d063      	beq.n	800234a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002282:	4b4c      	ldr	r3, [pc, #304]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00b      	beq.n	80022a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800228e:	4b49      	ldr	r3, [pc, #292]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b08      	cmp	r3, #8
 8002298:	d11c      	bne.n	80022d4 <HAL_RCC_OscConfig+0x18c>
 800229a:	4b46      	ldr	r3, [pc, #280]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d116      	bne.n	80022d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a6:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_RCC_OscConfig+0x176>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e1c0      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022be:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4939      	ldr	r1, [pc, #228]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d2:	e03a      	b.n	800234a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d020      	beq.n	800231e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022dc:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <HAL_RCC_OscConfig+0x270>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e2:	f7ff fc8b 	bl	8001bfc <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ea:	f7ff fc87 	bl	8001bfc <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e1a1      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fc:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002308:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4927      	ldr	r1, [pc, #156]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002318:	4313      	orrs	r3, r2
 800231a:	600b      	str	r3, [r1, #0]
 800231c:	e015      	b.n	800234a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <HAL_RCC_OscConfig+0x270>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff fc6a 	bl	8001bfc <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800232c:	f7ff fc66 	bl	8001bfc <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e180      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d03a      	beq.n	80023cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d019      	beq.n	8002392 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800235e:	4b17      	ldr	r3, [pc, #92]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002360:	2201      	movs	r2, #1
 8002362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002364:	f7ff fc4a 	bl	8001bfc <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800236c:	f7ff fc46 	bl	8001bfc <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e160      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237e:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800238a:	2001      	movs	r0, #1
 800238c:	f000 face 	bl	800292c <RCC_Delay>
 8002390:	e01c      	b.n	80023cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002398:	f7ff fc30 	bl	8001bfc <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800239e:	e00f      	b.n	80023c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a0:	f7ff fc2c 	bl	8001bfc <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d908      	bls.n	80023c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e146      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	42420000 	.word	0x42420000
 80023bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c0:	4b92      	ldr	r3, [pc, #584]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1e9      	bne.n	80023a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80a6 	beq.w	8002526 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023da:	2300      	movs	r3, #0
 80023dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023de:	4b8b      	ldr	r3, [pc, #556]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10d      	bne.n	8002406 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	4b88      	ldr	r3, [pc, #544]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	4a87      	ldr	r2, [pc, #540]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f4:	61d3      	str	r3, [r2, #28]
 80023f6:	4b85      	ldr	r3, [pc, #532]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002402:	2301      	movs	r3, #1
 8002404:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002406:	4b82      	ldr	r3, [pc, #520]	; (8002610 <HAL_RCC_OscConfig+0x4c8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d118      	bne.n	8002444 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002412:	4b7f      	ldr	r3, [pc, #508]	; (8002610 <HAL_RCC_OscConfig+0x4c8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a7e      	ldr	r2, [pc, #504]	; (8002610 <HAL_RCC_OscConfig+0x4c8>)
 8002418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241e:	f7ff fbed 	bl	8001bfc <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002426:	f7ff fbe9 	bl	8001bfc <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b64      	cmp	r3, #100	; 0x64
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e103      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	4b75      	ldr	r3, [pc, #468]	; (8002610 <HAL_RCC_OscConfig+0x4c8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d106      	bne.n	800245a <HAL_RCC_OscConfig+0x312>
 800244c:	4b6f      	ldr	r3, [pc, #444]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4a6e      	ldr	r2, [pc, #440]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6213      	str	r3, [r2, #32]
 8002458:	e02d      	b.n	80024b6 <HAL_RCC_OscConfig+0x36e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0x334>
 8002462:	4b6a      	ldr	r3, [pc, #424]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4a69      	ldr	r2, [pc, #420]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002468:	f023 0301 	bic.w	r3, r3, #1
 800246c:	6213      	str	r3, [r2, #32]
 800246e:	4b67      	ldr	r3, [pc, #412]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4a66      	ldr	r2, [pc, #408]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002474:	f023 0304 	bic.w	r3, r3, #4
 8002478:	6213      	str	r3, [r2, #32]
 800247a:	e01c      	b.n	80024b6 <HAL_RCC_OscConfig+0x36e>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b05      	cmp	r3, #5
 8002482:	d10c      	bne.n	800249e <HAL_RCC_OscConfig+0x356>
 8002484:	4b61      	ldr	r3, [pc, #388]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4a60      	ldr	r2, [pc, #384]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 800248a:	f043 0304 	orr.w	r3, r3, #4
 800248e:	6213      	str	r3, [r2, #32]
 8002490:	4b5e      	ldr	r3, [pc, #376]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4a5d      	ldr	r2, [pc, #372]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6213      	str	r3, [r2, #32]
 800249c:	e00b      	b.n	80024b6 <HAL_RCC_OscConfig+0x36e>
 800249e:	4b5b      	ldr	r3, [pc, #364]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4a5a      	ldr	r2, [pc, #360]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	6213      	str	r3, [r2, #32]
 80024aa:	4b58      	ldr	r3, [pc, #352]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4a57      	ldr	r2, [pc, #348]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d015      	beq.n	80024ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024be:	f7ff fb9d 	bl	8001bfc <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7ff fb99 	bl	8001bfc <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e0b1      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024dc:	4b4b      	ldr	r3, [pc, #300]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ee      	beq.n	80024c6 <HAL_RCC_OscConfig+0x37e>
 80024e8:	e014      	b.n	8002514 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ea:	f7ff fb87 	bl	8001bfc <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f0:	e00a      	b.n	8002508 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f2:	f7ff fb83 	bl	8001bfc <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002500:	4293      	cmp	r3, r2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e09b      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002508:	4b40      	ldr	r3, [pc, #256]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1ee      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002514:	7dfb      	ldrb	r3, [r7, #23]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d105      	bne.n	8002526 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251a:	4b3c      	ldr	r3, [pc, #240]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	4a3b      	ldr	r2, [pc, #236]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002524:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 8087 	beq.w	800263e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002530:	4b36      	ldr	r3, [pc, #216]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	2b08      	cmp	r3, #8
 800253a:	d061      	beq.n	8002600 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d146      	bne.n	80025d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002544:	4b33      	ldr	r3, [pc, #204]	; (8002614 <HAL_RCC_OscConfig+0x4cc>)
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254a:	f7ff fb57 	bl	8001bfc <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002552:	f7ff fb53 	bl	8001bfc <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e06d      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002564:	4b29      	ldr	r3, [pc, #164]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f0      	bne.n	8002552 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002578:	d108      	bne.n	800258c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800257a:	4b24      	ldr	r3, [pc, #144]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	4921      	ldr	r1, [pc, #132]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800258c:	4b1f      	ldr	r3, [pc, #124]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a19      	ldr	r1, [r3, #32]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	430b      	orrs	r3, r1
 800259e:	491b      	ldr	r1, [pc, #108]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <HAL_RCC_OscConfig+0x4cc>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7ff fb27 	bl	8001bfc <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b2:	f7ff fb23 	bl	8001bfc <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e03d      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x46a>
 80025d0:	e035      	b.n	800263e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <HAL_RCC_OscConfig+0x4cc>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7ff fb10 	bl	8001bfc <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e0:	f7ff fb0c 	bl	8001bfc <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e026      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x498>
 80025fe:	e01e      	b.n	800263e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d107      	bne.n	8002618 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e019      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
 800260c:	40021000 	.word	0x40021000
 8002610:	40007000 	.word	0x40007000
 8002614:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_OscConfig+0x500>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	429a      	cmp	r2, r3
 800262a:	d106      	bne.n	800263a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d001      	beq.n	800263e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000

0800264c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0d0      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002660:	4b6a      	ldr	r3, [pc, #424]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d910      	bls.n	8002690 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b67      	ldr	r3, [pc, #412]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 0207 	bic.w	r2, r3, #7
 8002676:	4965      	ldr	r1, [pc, #404]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	4b63      	ldr	r3, [pc, #396]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d001      	beq.n	8002690 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0b8      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d020      	beq.n	80026de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a8:	4b59      	ldr	r3, [pc, #356]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a58      	ldr	r2, [pc, #352]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026c0:	4b53      	ldr	r3, [pc, #332]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4a52      	ldr	r2, [pc, #328]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026cc:	4b50      	ldr	r3, [pc, #320]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	494d      	ldr	r1, [pc, #308]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d040      	beq.n	800276c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	4b47      	ldr	r3, [pc, #284]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d115      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e07f      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d107      	bne.n	800271a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270a:	4b41      	ldr	r3, [pc, #260]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e073      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271a:	4b3d      	ldr	r3, [pc, #244]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e06b      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800272a:	4b39      	ldr	r3, [pc, #228]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f023 0203 	bic.w	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	4936      	ldr	r1, [pc, #216]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800273c:	f7ff fa5e 	bl	8001bfc <HAL_GetTick>
 8002740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	e00a      	b.n	800275a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002744:	f7ff fa5a 	bl	8001bfc <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e053      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275a:	4b2d      	ldr	r3, [pc, #180]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 020c 	and.w	r2, r3, #12
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	429a      	cmp	r2, r3
 800276a:	d1eb      	bne.n	8002744 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d210      	bcs.n	800279c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277a:	4b24      	ldr	r3, [pc, #144]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 0207 	bic.w	r2, r3, #7
 8002782:	4922      	ldr	r1, [pc, #136]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800278a:	4b20      	ldr	r3, [pc, #128]	; (800280c <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e032      	b.n	8002802 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4916      	ldr	r1, [pc, #88]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	490e      	ldr	r1, [pc, #56]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027da:	f000 f821 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 80027de:	4602      	mov	r2, r0
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	490a      	ldr	r1, [pc, #40]	; (8002814 <HAL_RCC_ClockConfig+0x1c8>)
 80027ec:	5ccb      	ldrb	r3, [r1, r3]
 80027ee:	fa22 f303 	lsr.w	r3, r2, r3
 80027f2:	4a09      	ldr	r2, [pc, #36]	; (8002818 <HAL_RCC_ClockConfig+0x1cc>)
 80027f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCC_ClockConfig+0x1d0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff f9bc 	bl	8001b78 <HAL_InitTick>

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40022000 	.word	0x40022000
 8002810:	40021000 	.word	0x40021000
 8002814:	0800673c 	.word	0x0800673c
 8002818:	20000000 	.word	0x20000000
 800281c:	20000004 	.word	0x20000004

08002820 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	2300      	movs	r3, #0
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800283a:	4b1e      	ldr	r3, [pc, #120]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b04      	cmp	r3, #4
 8002848:	d002      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0x30>
 800284a:	2b08      	cmp	r3, #8
 800284c:	d003      	beq.n	8002856 <HAL_RCC_GetSysClockFreq+0x36>
 800284e:	e027      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002850:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002852:	613b      	str	r3, [r7, #16]
      break;
 8002854:	e027      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	0c9b      	lsrs	r3, r3, #18
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	4a17      	ldr	r2, [pc, #92]	; (80028bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002860:	5cd3      	ldrb	r3, [r2, r3]
 8002862:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d010      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800286e:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	0c5b      	lsrs	r3, r3, #17
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	4a11      	ldr	r2, [pc, #68]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800287a:	5cd3      	ldrb	r3, [r2, r3]
 800287c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a0d      	ldr	r2, [pc, #52]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002882:	fb03 f202 	mul.w	r2, r3, r2
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	fbb2 f3f3 	udiv	r3, r2, r3
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	e004      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002894:	fb02 f303 	mul.w	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	613b      	str	r3, [r7, #16]
      break;
 800289e:	e002      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80028a2:	613b      	str	r3, [r7, #16]
      break;
 80028a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a6:	693b      	ldr	r3, [r7, #16]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	371c      	adds	r7, #28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
 80028b8:	007a1200 	.word	0x007a1200
 80028bc:	08006754 	.word	0x08006754
 80028c0:	08006764 	.word	0x08006764
 80028c4:	003d0900 	.word	0x003d0900

080028c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028cc:	4b02      	ldr	r3, [pc, #8]	; (80028d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	20000000 	.word	0x20000000

080028dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028e0:	f7ff fff2 	bl	80028c8 <HAL_RCC_GetHCLKFreq>
 80028e4:	4602      	mov	r2, r0
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	4903      	ldr	r1, [pc, #12]	; (8002900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028f2:	5ccb      	ldrb	r3, [r1, r3]
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40021000 	.word	0x40021000
 8002900:	0800674c 	.word	0x0800674c

08002904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002908:	f7ff ffde 	bl	80028c8 <HAL_RCC_GetHCLKFreq>
 800290c:	4602      	mov	r2, r0
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	0adb      	lsrs	r3, r3, #11
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	4903      	ldr	r1, [pc, #12]	; (8002928 <HAL_RCC_GetPCLK2Freq+0x24>)
 800291a:	5ccb      	ldrb	r3, [r1, r3]
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	0800674c 	.word	0x0800674c

0800292c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <RCC_Delay+0x34>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <RCC_Delay+0x38>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	0a5b      	lsrs	r3, r3, #9
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	fb02 f303 	mul.w	r3, r2, r3
 8002946:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002948:	bf00      	nop
  }
  while (Delay --);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1e5a      	subs	r2, r3, #1
 800294e:	60fa      	str	r2, [r7, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f9      	bne.n	8002948 <RCC_Delay+0x1c>
}
 8002954:	bf00      	nop
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	20000000 	.word	0x20000000
 8002964:	10624dd3 	.word	0x10624dd3

08002968 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e076      	b.n	8002a68 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	2b00      	cmp	r3, #0
 8002980:	d108      	bne.n	8002994 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800298a:	d009      	beq.n	80029a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	61da      	str	r2, [r3, #28]
 8002992:	e005      	b.n	80029a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe ff1c 	bl	80017f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a24:	ea42 0103 	orr.w	r1, r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	0c1a      	lsrs	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f002 0204 	and.w	r2, r2, #4
 8002a46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	69da      	ldr	r2, [r3, #28]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_SPI_Transmit+0x22>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e12d      	b.n	8002cee <HAL_SPI_Transmit+0x27e>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a9a:	f7ff f8af 	bl	8001bfc <HAL_GetTick>
 8002a9e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d002      	beq.n	8002ab6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ab4:	e116      	b.n	8002ce4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <HAL_SPI_Transmit+0x52>
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d102      	bne.n	8002ac8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ac6:	e10d      	b.n	8002ce4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2203      	movs	r2, #3
 8002acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	88fa      	ldrh	r2, [r7, #6]
 8002ae0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	88fa      	ldrh	r2, [r7, #6]
 8002ae6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b0e:	d10f      	bne.n	8002b30 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b2e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3a:	2b40      	cmp	r3, #64	; 0x40
 8002b3c:	d007      	beq.n	8002b4e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b56:	d14f      	bne.n	8002bf8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <HAL_SPI_Transmit+0xf6>
 8002b60:	8afb      	ldrh	r3, [r7, #22]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d142      	bne.n	8002bec <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	881a      	ldrh	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	1c9a      	adds	r2, r3, #2
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b8a:	e02f      	b.n	8002bec <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d112      	bne.n	8002bc0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	881a      	ldrh	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	1c9a      	adds	r2, r3, #2
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	86da      	strh	r2, [r3, #54]	; 0x36
 8002bbe:	e015      	b.n	8002bec <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bc0:	f7ff f81c 	bl	8001bfc <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d803      	bhi.n	8002bd8 <HAL_SPI_Transmit+0x168>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd6:	d102      	bne.n	8002bde <HAL_SPI_Transmit+0x16e>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002bea:	e07b      	b.n	8002ce4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1ca      	bne.n	8002b8c <HAL_SPI_Transmit+0x11c>
 8002bf6:	e050      	b.n	8002c9a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <HAL_SPI_Transmit+0x196>
 8002c00:	8afb      	ldrh	r3, [r7, #22]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d144      	bne.n	8002c90 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	330c      	adds	r3, #12
 8002c10:	7812      	ldrb	r2, [r2, #0]
 8002c12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c2c:	e030      	b.n	8002c90 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d113      	bne.n	8002c64 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	330c      	adds	r3, #12
 8002c46:	7812      	ldrb	r2, [r2, #0]
 8002c48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c62:	e015      	b.n	8002c90 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c64:	f7fe ffca 	bl	8001bfc <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d803      	bhi.n	8002c7c <HAL_SPI_Transmit+0x20c>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7a:	d102      	bne.n	8002c82 <HAL_SPI_Transmit+0x212>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002c8e:	e029      	b.n	8002ce4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1c9      	bne.n	8002c2e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	6839      	ldr	r1, [r7, #0]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 fbcc 	bl	800343c <SPI_EndRxTxTransaction>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2220      	movs	r2, #32
 8002cae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10a      	bne.n	8002cce <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cb8:	2300      	movs	r3, #0
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	77fb      	strb	r3, [r7, #31]
 8002cda:	e003      	b.n	8002ce4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cec:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b088      	sub	sp, #32
 8002cfa:	af02      	add	r7, sp, #8
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	4613      	mov	r3, r2
 8002d04:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d002      	beq.n	8002d1c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002d16:	2302      	movs	r3, #2
 8002d18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d1a:	e0fb      	b.n	8002f14 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d24:	d112      	bne.n	8002d4c <HAL_SPI_Receive+0x56>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10e      	bne.n	8002d4c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2204      	movs	r2, #4
 8002d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d36:	88fa      	ldrh	r2, [r7, #6]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f8ef 	bl	8002f26 <HAL_SPI_TransmitReceive>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	e0e8      	b.n	8002f1e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_SPI_Receive+0x64>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e0e1      	b.n	8002f1e <HAL_SPI_Receive+0x228>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d62:	f7fe ff4b 	bl	8001bfc <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_SPI_Receive+0x7e>
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d102      	bne.n	8002d7a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d78:	e0cc      	b.n	8002f14 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	88fa      	ldrh	r2, [r7, #6]
 8002d92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	88fa      	ldrh	r2, [r7, #6]
 8002d98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc0:	d10f      	bne.n	8002de2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002de0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dec:	2b40      	cmp	r3, #64	; 0x40
 8002dee:	d007      	beq.n	8002e00 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dfe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d16a      	bne.n	8002ede <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e08:	e032      	b.n	8002e70 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d115      	bne.n	8002e44 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f103 020c 	add.w	r2, r3, #12
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	7812      	ldrb	r2, [r2, #0]
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e42:	e015      	b.n	8002e70 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e44:	f7fe feda 	bl	8001bfc <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d803      	bhi.n	8002e5c <HAL_SPI_Receive+0x166>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5a:	d102      	bne.n	8002e62 <HAL_SPI_Receive+0x16c>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002e6e:	e051      	b.n	8002f14 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1c7      	bne.n	8002e0a <HAL_SPI_Receive+0x114>
 8002e7a:	e035      	b.n	8002ee8 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d113      	bne.n	8002eb2 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	b292      	uxth	r2, r2
 8002e96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	1c9a      	adds	r2, r3, #2
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002eb0:	e015      	b.n	8002ede <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eb2:	f7fe fea3 	bl	8001bfc <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d803      	bhi.n	8002eca <HAL_SPI_Receive+0x1d4>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d102      	bne.n	8002ed0 <HAL_SPI_Receive+0x1da>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d106      	bne.n	8002ede <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002edc:	e01a      	b.n	8002f14 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1c9      	bne.n	8002e7c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	6839      	ldr	r1, [r7, #0]
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fa53 	bl	8003398 <SPI_EndRxTransaction>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	75fb      	strb	r3, [r7, #23]
 8002f0a:	e003      	b.n	8002f14 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b08c      	sub	sp, #48	; 0x30
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f34:	2301      	movs	r3, #1
 8002f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_SPI_TransmitReceive+0x26>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e198      	b.n	800327e <HAL_SPI_TransmitReceive+0x358>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f54:	f7fe fe52 	bl	8001bfc <HAL_GetTick>
 8002f58:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002f6a:	887b      	ldrh	r3, [r7, #2]
 8002f6c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d00f      	beq.n	8002f96 <HAL_SPI_TransmitReceive+0x70>
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f7c:	d107      	bne.n	8002f8e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d103      	bne.n	8002f8e <HAL_SPI_TransmitReceive+0x68>
 8002f86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d003      	beq.n	8002f96 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f94:	e16d      	b.n	8003272 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_SPI_TransmitReceive+0x82>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <HAL_SPI_TransmitReceive+0x82>
 8002fa2:	887b      	ldrh	r3, [r7, #2]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d103      	bne.n	8002fb0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002fae:	e160      	b.n	8003272 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d003      	beq.n	8002fc4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2205      	movs	r2, #5
 8002fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	887a      	ldrh	r2, [r7, #2]
 8002fd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	887a      	ldrh	r2, [r7, #2]
 8002fda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	887a      	ldrh	r2, [r7, #2]
 8002fe6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	887a      	ldrh	r2, [r7, #2]
 8002fec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003004:	2b40      	cmp	r3, #64	; 0x40
 8003006:	d007      	beq.n	8003018 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003016:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003020:	d17c      	bne.n	800311c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <HAL_SPI_TransmitReceive+0x10a>
 800302a:	8b7b      	ldrh	r3, [r7, #26]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d16a      	bne.n	8003106 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	881a      	ldrh	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	1c9a      	adds	r2, r3, #2
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003054:	e057      	b.n	8003106 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b02      	cmp	r3, #2
 8003062:	d11b      	bne.n	800309c <HAL_SPI_TransmitReceive+0x176>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d016      	beq.n	800309c <HAL_SPI_TransmitReceive+0x176>
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	2b01      	cmp	r3, #1
 8003072:	d113      	bne.n	800309c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	881a      	ldrh	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	1c9a      	adds	r2, r3, #2
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800308e:	b29b      	uxth	r3, r3
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d119      	bne.n	80030de <HAL_SPI_TransmitReceive+0x1b8>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d014      	beq.n	80030de <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030be:	b292      	uxth	r2, r2
 80030c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	1c9a      	adds	r2, r3, #2
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030da:	2301      	movs	r3, #1
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030de:	f7fe fd8d 	bl	8001bfc <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d80b      	bhi.n	8003106 <HAL_SPI_TransmitReceive+0x1e0>
 80030ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d007      	beq.n	8003106 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003104:	e0b5      	b.n	8003272 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1a2      	bne.n	8003056 <HAL_SPI_TransmitReceive+0x130>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d19d      	bne.n	8003056 <HAL_SPI_TransmitReceive+0x130>
 800311a:	e080      	b.n	800321e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HAL_SPI_TransmitReceive+0x204>
 8003124:	8b7b      	ldrh	r3, [r7, #26]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d16f      	bne.n	800320a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	330c      	adds	r3, #12
 8003134:	7812      	ldrb	r2, [r2, #0]
 8003136:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003150:	e05b      	b.n	800320a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b02      	cmp	r3, #2
 800315e:	d11c      	bne.n	800319a <HAL_SPI_TransmitReceive+0x274>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d017      	beq.n	800319a <HAL_SPI_TransmitReceive+0x274>
 800316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316c:	2b01      	cmp	r3, #1
 800316e:	d114      	bne.n	800319a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	330c      	adds	r3, #12
 800317a:	7812      	ldrb	r2, [r2, #0]
 800317c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d119      	bne.n	80031dc <HAL_SPI_TransmitReceive+0x2b6>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d014      	beq.n	80031dc <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031d8:	2301      	movs	r3, #1
 80031da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031dc:	f7fe fd0e 	bl	8001bfc <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d803      	bhi.n	80031f4 <HAL_SPI_TransmitReceive+0x2ce>
 80031ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f2:	d102      	bne.n	80031fa <HAL_SPI_TransmitReceive+0x2d4>
 80031f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d107      	bne.n	800320a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003208:	e033      	b.n	8003272 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d19e      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x22c>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d199      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800321e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003220:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f90a 	bl	800343c <SPI_EndRxTxTransaction>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d006      	beq.n	800323c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800323a:	e01a      	b.n	8003272 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10a      	bne.n	800325a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003268:	e003      	b.n	8003272 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800327a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800327e:	4618      	mov	r0, r3
 8003280:	3730      	adds	r7, #48	; 0x30
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003298:	f7fe fcb0 	bl	8001bfc <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	4413      	add	r3, r2
 80032a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032a8:	f7fe fca8 	bl	8001bfc <HAL_GetTick>
 80032ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032ae:	4b39      	ldr	r3, [pc, #228]	; (8003394 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	015b      	lsls	r3, r3, #5
 80032b4:	0d1b      	lsrs	r3, r3, #20
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	fb02 f303 	mul.w	r3, r2, r3
 80032bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032be:	e054      	b.n	800336a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c6:	d050      	beq.n	800336a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032c8:	f7fe fc98 	bl	8001bfc <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d902      	bls.n	80032de <SPI_WaitFlagStateUntilTimeout+0x56>
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d13d      	bne.n	800335a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032f6:	d111      	bne.n	800331c <SPI_WaitFlagStateUntilTimeout+0x94>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003300:	d004      	beq.n	800330c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330a:	d107      	bne.n	800331c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003324:	d10f      	bne.n	8003346 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003344:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e017      	b.n	800338a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	3b01      	subs	r3, #1
 8003368:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	4013      	ands	r3, r2
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	429a      	cmp	r2, r3
 8003378:	bf0c      	ite	eq
 800337a:	2301      	moveq	r3, #1
 800337c:	2300      	movne	r3, #0
 800337e:	b2db      	uxtb	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	429a      	cmp	r2, r3
 8003386:	d19b      	bne.n	80032c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3720      	adds	r7, #32
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000000 	.word	0x20000000

08003398 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af02      	add	r7, sp, #8
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ac:	d111      	bne.n	80033d2 <SPI_EndRxTransaction+0x3a>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b6:	d004      	beq.n	80033c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c0:	d107      	bne.n	80033d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033d0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033da:	d117      	bne.n	800340c <SPI_EndRxTransaction+0x74>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e4:	d112      	bne.n	800340c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2200      	movs	r2, #0
 80033ee:	2101      	movs	r1, #1
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f7ff ff49 	bl	8003288 <SPI_WaitFlagStateUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01a      	beq.n	8003432 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003400:	f043 0220 	orr.w	r2, r3, #32
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e013      	b.n	8003434 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2200      	movs	r2, #0
 8003414:	2180      	movs	r1, #128	; 0x80
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f7ff ff36 	bl	8003288 <SPI_WaitFlagStateUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003426:	f043 0220 	orr.w	r2, r3, #32
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e000      	b.n	8003434 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2200      	movs	r2, #0
 8003450:	2180      	movs	r1, #128	; 0x80
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f7ff ff18 	bl	8003288 <SPI_WaitFlagStateUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003462:	f043 0220 	orr.w	r2, r3, #32
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e000      	b.n	8003470 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e042      	b.n	8003510 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fe f9f4 	bl	800188c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2224      	movs	r2, #36	; 0x24
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f91d 	bl	80036fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08a      	sub	sp, #40	; 0x28
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	4613      	mov	r3, r2
 8003526:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b20      	cmp	r3, #32
 8003536:	d16d      	bne.n	8003614 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_UART_Transmit+0x2c>
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e066      	b.n	8003616 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2221      	movs	r2, #33	; 0x21
 8003552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003556:	f7fe fb51 	bl	8001bfc <HAL_GetTick>
 800355a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	88fa      	ldrh	r2, [r7, #6]
 8003560:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	88fa      	ldrh	r2, [r7, #6]
 8003566:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003570:	d108      	bne.n	8003584 <HAL_UART_Transmit+0x6c>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d104      	bne.n	8003584 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800357a:	2300      	movs	r3, #0
 800357c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	e003      	b.n	800358c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003588:	2300      	movs	r3, #0
 800358a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800358c:	e02a      	b.n	80035e4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2200      	movs	r2, #0
 8003596:	2180      	movs	r1, #128	; 0x80
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f840 	bl	800361e <UART_WaitOnFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e036      	b.n	8003616 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10b      	bne.n	80035c6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	3302      	adds	r3, #2
 80035c2:	61bb      	str	r3, [r7, #24]
 80035c4:	e007      	b.n	80035d6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	781a      	ldrb	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	3301      	adds	r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1cf      	bne.n	800358e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2200      	movs	r2, #0
 80035f6:	2140      	movs	r1, #64	; 0x40
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f810 	bl	800361e <UART_WaitOnFlagUntilTimeout>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e006      	b.n	8003616 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	e000      	b.n	8003616 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003614:	2302      	movs	r3, #2
  }
}
 8003616:	4618      	mov	r0, r3
 8003618:	3720      	adds	r7, #32
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b090      	sub	sp, #64	; 0x40
 8003622:	af00      	add	r7, sp, #0
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	603b      	str	r3, [r7, #0]
 800362a:	4613      	mov	r3, r2
 800362c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362e:	e050      	b.n	80036d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003636:	d04c      	beq.n	80036d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800363a:	2b00      	cmp	r3, #0
 800363c:	d007      	beq.n	800364e <UART_WaitOnFlagUntilTimeout+0x30>
 800363e:	f7fe fadd 	bl	8001bfc <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800364a:	429a      	cmp	r2, r3
 800364c:	d241      	bcs.n	80036d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	330c      	adds	r3, #12
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003658:	e853 3f00 	ldrex	r3, [r3]
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	330c      	adds	r3, #12
 800366c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800366e:	637a      	str	r2, [r7, #52]	; 0x34
 8003670:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003672:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003674:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003676:	e841 2300 	strex	r3, r2, [r1]
 800367a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800367c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1e5      	bne.n	800364e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3314      	adds	r3, #20
 8003688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	e853 3f00 	ldrex	r3, [r3]
 8003690:	613b      	str	r3, [r7, #16]
   return(result);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f023 0301 	bic.w	r3, r3, #1
 8003698:	63bb      	str	r3, [r7, #56]	; 0x38
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3314      	adds	r3, #20
 80036a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036a2:	623a      	str	r2, [r7, #32]
 80036a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	69f9      	ldr	r1, [r7, #28]
 80036a8:	6a3a      	ldr	r2, [r7, #32]
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e5      	bne.n	8003682 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e00f      	b.n	80036f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4013      	ands	r3, r2
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	429a      	cmp	r2, r3
 80036e0:	bf0c      	ite	eq
 80036e2:	2301      	moveq	r3, #1
 80036e4:	2300      	movne	r3, #0
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	461a      	mov	r2, r3
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d09f      	beq.n	8003630 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3740      	adds	r7, #64	; 0x40
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003736:	f023 030c 	bic.w	r3, r3, #12
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	430b      	orrs	r3, r1
 8003742:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699a      	ldr	r2, [r3, #24]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a2c      	ldr	r2, [pc, #176]	; (8003810 <UART_SetConfig+0x114>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d103      	bne.n	800376c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003764:	f7ff f8ce 	bl	8002904 <HAL_RCC_GetPCLK2Freq>
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	e002      	b.n	8003772 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800376c:	f7ff f8b6 	bl	80028dc <HAL_RCC_GetPCLK1Freq>
 8003770:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	009a      	lsls	r2, r3, #2
 800377c:	441a      	add	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	4a22      	ldr	r2, [pc, #136]	; (8003814 <UART_SetConfig+0x118>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	0119      	lsls	r1, r3, #4
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	009a      	lsls	r2, r3, #2
 800379c:	441a      	add	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037a8:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <UART_SetConfig+0x118>)
 80037aa:	fba3 0302 	umull	r0, r3, r3, r2
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	2064      	movs	r0, #100	; 0x64
 80037b2:	fb00 f303 	mul.w	r3, r0, r3
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	3332      	adds	r3, #50	; 0x32
 80037bc:	4a15      	ldr	r2, [pc, #84]	; (8003814 <UART_SetConfig+0x118>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037c8:	4419      	add	r1, r3
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	009a      	lsls	r2, r3, #2
 80037d4:	441a      	add	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80037e0:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <UART_SetConfig+0x118>)
 80037e2:	fba3 0302 	umull	r0, r3, r3, r2
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	2064      	movs	r0, #100	; 0x64
 80037ea:	fb00 f303 	mul.w	r3, r0, r3
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	3332      	adds	r3, #50	; 0x32
 80037f4:	4a07      	ldr	r2, [pc, #28]	; (8003814 <UART_SetConfig+0x118>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	f003 020f 	and.w	r2, r3, #15
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	440a      	add	r2, r1
 8003806:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003808:	bf00      	nop
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40013800 	.word	0x40013800
 8003814:	51eb851f 	.word	0x51eb851f

08003818 <__cvt>:
 8003818:	2b00      	cmp	r3, #0
 800381a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800381e:	461f      	mov	r7, r3
 8003820:	bfbb      	ittet	lt
 8003822:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003826:	461f      	movlt	r7, r3
 8003828:	2300      	movge	r3, #0
 800382a:	232d      	movlt	r3, #45	; 0x2d
 800382c:	b088      	sub	sp, #32
 800382e:	4614      	mov	r4, r2
 8003830:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003832:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003834:	7013      	strb	r3, [r2, #0]
 8003836:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003838:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800383c:	f023 0820 	bic.w	r8, r3, #32
 8003840:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003844:	d005      	beq.n	8003852 <__cvt+0x3a>
 8003846:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800384a:	d100      	bne.n	800384e <__cvt+0x36>
 800384c:	3501      	adds	r5, #1
 800384e:	2302      	movs	r3, #2
 8003850:	e000      	b.n	8003854 <__cvt+0x3c>
 8003852:	2303      	movs	r3, #3
 8003854:	aa07      	add	r2, sp, #28
 8003856:	9204      	str	r2, [sp, #16]
 8003858:	aa06      	add	r2, sp, #24
 800385a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800385e:	e9cd 3500 	strd	r3, r5, [sp]
 8003862:	4622      	mov	r2, r4
 8003864:	463b      	mov	r3, r7
 8003866:	f000 fe73 	bl	8004550 <_dtoa_r>
 800386a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800386e:	4606      	mov	r6, r0
 8003870:	d102      	bne.n	8003878 <__cvt+0x60>
 8003872:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003874:	07db      	lsls	r3, r3, #31
 8003876:	d522      	bpl.n	80038be <__cvt+0xa6>
 8003878:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800387c:	eb06 0905 	add.w	r9, r6, r5
 8003880:	d110      	bne.n	80038a4 <__cvt+0x8c>
 8003882:	7833      	ldrb	r3, [r6, #0]
 8003884:	2b30      	cmp	r3, #48	; 0x30
 8003886:	d10a      	bne.n	800389e <__cvt+0x86>
 8003888:	2200      	movs	r2, #0
 800388a:	2300      	movs	r3, #0
 800388c:	4620      	mov	r0, r4
 800388e:	4639      	mov	r1, r7
 8003890:	f7fd f88a 	bl	80009a8 <__aeabi_dcmpeq>
 8003894:	b918      	cbnz	r0, 800389e <__cvt+0x86>
 8003896:	f1c5 0501 	rsb	r5, r5, #1
 800389a:	f8ca 5000 	str.w	r5, [sl]
 800389e:	f8da 3000 	ldr.w	r3, [sl]
 80038a2:	4499      	add	r9, r3
 80038a4:	2200      	movs	r2, #0
 80038a6:	2300      	movs	r3, #0
 80038a8:	4620      	mov	r0, r4
 80038aa:	4639      	mov	r1, r7
 80038ac:	f7fd f87c 	bl	80009a8 <__aeabi_dcmpeq>
 80038b0:	b108      	cbz	r0, 80038b6 <__cvt+0x9e>
 80038b2:	f8cd 901c 	str.w	r9, [sp, #28]
 80038b6:	2230      	movs	r2, #48	; 0x30
 80038b8:	9b07      	ldr	r3, [sp, #28]
 80038ba:	454b      	cmp	r3, r9
 80038bc:	d307      	bcc.n	80038ce <__cvt+0xb6>
 80038be:	4630      	mov	r0, r6
 80038c0:	9b07      	ldr	r3, [sp, #28]
 80038c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80038c4:	1b9b      	subs	r3, r3, r6
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	b008      	add	sp, #32
 80038ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ce:	1c59      	adds	r1, r3, #1
 80038d0:	9107      	str	r1, [sp, #28]
 80038d2:	701a      	strb	r2, [r3, #0]
 80038d4:	e7f0      	b.n	80038b8 <__cvt+0xa0>

080038d6 <__exponent>:
 80038d6:	4603      	mov	r3, r0
 80038d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038da:	2900      	cmp	r1, #0
 80038dc:	f803 2b02 	strb.w	r2, [r3], #2
 80038e0:	bfb6      	itet	lt
 80038e2:	222d      	movlt	r2, #45	; 0x2d
 80038e4:	222b      	movge	r2, #43	; 0x2b
 80038e6:	4249      	neglt	r1, r1
 80038e8:	2909      	cmp	r1, #9
 80038ea:	7042      	strb	r2, [r0, #1]
 80038ec:	dd2a      	ble.n	8003944 <__exponent+0x6e>
 80038ee:	f10d 0207 	add.w	r2, sp, #7
 80038f2:	4617      	mov	r7, r2
 80038f4:	260a      	movs	r6, #10
 80038f6:	fb91 f5f6 	sdiv	r5, r1, r6
 80038fa:	4694      	mov	ip, r2
 80038fc:	fb06 1415 	mls	r4, r6, r5, r1
 8003900:	3430      	adds	r4, #48	; 0x30
 8003902:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003906:	460c      	mov	r4, r1
 8003908:	2c63      	cmp	r4, #99	; 0x63
 800390a:	4629      	mov	r1, r5
 800390c:	f102 32ff 	add.w	r2, r2, #4294967295
 8003910:	dcf1      	bgt.n	80038f6 <__exponent+0x20>
 8003912:	3130      	adds	r1, #48	; 0x30
 8003914:	f1ac 0402 	sub.w	r4, ip, #2
 8003918:	f802 1c01 	strb.w	r1, [r2, #-1]
 800391c:	4622      	mov	r2, r4
 800391e:	1c41      	adds	r1, r0, #1
 8003920:	42ba      	cmp	r2, r7
 8003922:	d30a      	bcc.n	800393a <__exponent+0x64>
 8003924:	f10d 0209 	add.w	r2, sp, #9
 8003928:	eba2 020c 	sub.w	r2, r2, ip
 800392c:	42bc      	cmp	r4, r7
 800392e:	bf88      	it	hi
 8003930:	2200      	movhi	r2, #0
 8003932:	4413      	add	r3, r2
 8003934:	1a18      	subs	r0, r3, r0
 8003936:	b003      	add	sp, #12
 8003938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800393a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800393e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003942:	e7ed      	b.n	8003920 <__exponent+0x4a>
 8003944:	2330      	movs	r3, #48	; 0x30
 8003946:	3130      	adds	r1, #48	; 0x30
 8003948:	7083      	strb	r3, [r0, #2]
 800394a:	70c1      	strb	r1, [r0, #3]
 800394c:	1d03      	adds	r3, r0, #4
 800394e:	e7f1      	b.n	8003934 <__exponent+0x5e>

08003950 <_printf_float>:
 8003950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003954:	b091      	sub	sp, #68	; 0x44
 8003956:	460c      	mov	r4, r1
 8003958:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800395c:	4616      	mov	r6, r2
 800395e:	461f      	mov	r7, r3
 8003960:	4605      	mov	r5, r0
 8003962:	f000 fce5 	bl	8004330 <_localeconv_r>
 8003966:	6803      	ldr	r3, [r0, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	9309      	str	r3, [sp, #36]	; 0x24
 800396c:	f7fc fbf0 	bl	8000150 <strlen>
 8003970:	2300      	movs	r3, #0
 8003972:	930e      	str	r3, [sp, #56]	; 0x38
 8003974:	f8d8 3000 	ldr.w	r3, [r8]
 8003978:	900a      	str	r0, [sp, #40]	; 0x28
 800397a:	3307      	adds	r3, #7
 800397c:	f023 0307 	bic.w	r3, r3, #7
 8003980:	f103 0208 	add.w	r2, r3, #8
 8003984:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003988:	f8d4 b000 	ldr.w	fp, [r4]
 800398c:	f8c8 2000 	str.w	r2, [r8]
 8003990:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003994:	4652      	mov	r2, sl
 8003996:	4643      	mov	r3, r8
 8003998:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800399c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80039a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80039a2:	f04f 32ff 	mov.w	r2, #4294967295
 80039a6:	4650      	mov	r0, sl
 80039a8:	4b9c      	ldr	r3, [pc, #624]	; (8003c1c <_printf_float+0x2cc>)
 80039aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039ac:	f7fd f82e 	bl	8000a0c <__aeabi_dcmpun>
 80039b0:	bb70      	cbnz	r0, 8003a10 <_printf_float+0xc0>
 80039b2:	f04f 32ff 	mov.w	r2, #4294967295
 80039b6:	4650      	mov	r0, sl
 80039b8:	4b98      	ldr	r3, [pc, #608]	; (8003c1c <_printf_float+0x2cc>)
 80039ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039bc:	f7fd f808 	bl	80009d0 <__aeabi_dcmple>
 80039c0:	bb30      	cbnz	r0, 8003a10 <_printf_float+0xc0>
 80039c2:	2200      	movs	r2, #0
 80039c4:	2300      	movs	r3, #0
 80039c6:	4650      	mov	r0, sl
 80039c8:	4641      	mov	r1, r8
 80039ca:	f7fc fff7 	bl	80009bc <__aeabi_dcmplt>
 80039ce:	b110      	cbz	r0, 80039d6 <_printf_float+0x86>
 80039d0:	232d      	movs	r3, #45	; 0x2d
 80039d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d6:	4a92      	ldr	r2, [pc, #584]	; (8003c20 <_printf_float+0x2d0>)
 80039d8:	4b92      	ldr	r3, [pc, #584]	; (8003c24 <_printf_float+0x2d4>)
 80039da:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80039de:	bf94      	ite	ls
 80039e0:	4690      	movls	r8, r2
 80039e2:	4698      	movhi	r8, r3
 80039e4:	2303      	movs	r3, #3
 80039e6:	f04f 0a00 	mov.w	sl, #0
 80039ea:	6123      	str	r3, [r4, #16]
 80039ec:	f02b 0304 	bic.w	r3, fp, #4
 80039f0:	6023      	str	r3, [r4, #0]
 80039f2:	4633      	mov	r3, r6
 80039f4:	4621      	mov	r1, r4
 80039f6:	4628      	mov	r0, r5
 80039f8:	9700      	str	r7, [sp, #0]
 80039fa:	aa0f      	add	r2, sp, #60	; 0x3c
 80039fc:	f000 f9d6 	bl	8003dac <_printf_common>
 8003a00:	3001      	adds	r0, #1
 8003a02:	f040 8090 	bne.w	8003b26 <_printf_float+0x1d6>
 8003a06:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0a:	b011      	add	sp, #68	; 0x44
 8003a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a10:	4652      	mov	r2, sl
 8003a12:	4643      	mov	r3, r8
 8003a14:	4650      	mov	r0, sl
 8003a16:	4641      	mov	r1, r8
 8003a18:	f7fc fff8 	bl	8000a0c <__aeabi_dcmpun>
 8003a1c:	b148      	cbz	r0, 8003a32 <_printf_float+0xe2>
 8003a1e:	f1b8 0f00 	cmp.w	r8, #0
 8003a22:	bfb8      	it	lt
 8003a24:	232d      	movlt	r3, #45	; 0x2d
 8003a26:	4a80      	ldr	r2, [pc, #512]	; (8003c28 <_printf_float+0x2d8>)
 8003a28:	bfb8      	it	lt
 8003a2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003a2e:	4b7f      	ldr	r3, [pc, #508]	; (8003c2c <_printf_float+0x2dc>)
 8003a30:	e7d3      	b.n	80039da <_printf_float+0x8a>
 8003a32:	6863      	ldr	r3, [r4, #4]
 8003a34:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	d142      	bne.n	8003ac2 <_printf_float+0x172>
 8003a3c:	2306      	movs	r3, #6
 8003a3e:	6063      	str	r3, [r4, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	9206      	str	r2, [sp, #24]
 8003a44:	aa0e      	add	r2, sp, #56	; 0x38
 8003a46:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003a4a:	aa0d      	add	r2, sp, #52	; 0x34
 8003a4c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003a50:	9203      	str	r2, [sp, #12]
 8003a52:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003a56:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003a5a:	6023      	str	r3, [r4, #0]
 8003a5c:	6863      	ldr	r3, [r4, #4]
 8003a5e:	4652      	mov	r2, sl
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	4628      	mov	r0, r5
 8003a64:	4643      	mov	r3, r8
 8003a66:	910b      	str	r1, [sp, #44]	; 0x2c
 8003a68:	f7ff fed6 	bl	8003818 <__cvt>
 8003a6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a6e:	4680      	mov	r8, r0
 8003a70:	2947      	cmp	r1, #71	; 0x47
 8003a72:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003a74:	d108      	bne.n	8003a88 <_printf_float+0x138>
 8003a76:	1cc8      	adds	r0, r1, #3
 8003a78:	db02      	blt.n	8003a80 <_printf_float+0x130>
 8003a7a:	6863      	ldr	r3, [r4, #4]
 8003a7c:	4299      	cmp	r1, r3
 8003a7e:	dd40      	ble.n	8003b02 <_printf_float+0x1b2>
 8003a80:	f1a9 0902 	sub.w	r9, r9, #2
 8003a84:	fa5f f989 	uxtb.w	r9, r9
 8003a88:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003a8c:	d81f      	bhi.n	8003ace <_printf_float+0x17e>
 8003a8e:	464a      	mov	r2, r9
 8003a90:	3901      	subs	r1, #1
 8003a92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a96:	910d      	str	r1, [sp, #52]	; 0x34
 8003a98:	f7ff ff1d 	bl	80038d6 <__exponent>
 8003a9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a9e:	4682      	mov	sl, r0
 8003aa0:	1813      	adds	r3, r2, r0
 8003aa2:	2a01      	cmp	r2, #1
 8003aa4:	6123      	str	r3, [r4, #16]
 8003aa6:	dc02      	bgt.n	8003aae <_printf_float+0x15e>
 8003aa8:	6822      	ldr	r2, [r4, #0]
 8003aaa:	07d2      	lsls	r2, r2, #31
 8003aac:	d501      	bpl.n	8003ab2 <_printf_float+0x162>
 8003aae:	3301      	adds	r3, #1
 8003ab0:	6123      	str	r3, [r4, #16]
 8003ab2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d09b      	beq.n	80039f2 <_printf_float+0xa2>
 8003aba:	232d      	movs	r3, #45	; 0x2d
 8003abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ac0:	e797      	b.n	80039f2 <_printf_float+0xa2>
 8003ac2:	2947      	cmp	r1, #71	; 0x47
 8003ac4:	d1bc      	bne.n	8003a40 <_printf_float+0xf0>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1ba      	bne.n	8003a40 <_printf_float+0xf0>
 8003aca:	2301      	movs	r3, #1
 8003acc:	e7b7      	b.n	8003a3e <_printf_float+0xee>
 8003ace:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003ad2:	d118      	bne.n	8003b06 <_printf_float+0x1b6>
 8003ad4:	2900      	cmp	r1, #0
 8003ad6:	6863      	ldr	r3, [r4, #4]
 8003ad8:	dd0b      	ble.n	8003af2 <_printf_float+0x1a2>
 8003ada:	6121      	str	r1, [r4, #16]
 8003adc:	b913      	cbnz	r3, 8003ae4 <_printf_float+0x194>
 8003ade:	6822      	ldr	r2, [r4, #0]
 8003ae0:	07d0      	lsls	r0, r2, #31
 8003ae2:	d502      	bpl.n	8003aea <_printf_float+0x19a>
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	440b      	add	r3, r1
 8003ae8:	6123      	str	r3, [r4, #16]
 8003aea:	f04f 0a00 	mov.w	sl, #0
 8003aee:	65a1      	str	r1, [r4, #88]	; 0x58
 8003af0:	e7df      	b.n	8003ab2 <_printf_float+0x162>
 8003af2:	b913      	cbnz	r3, 8003afa <_printf_float+0x1aa>
 8003af4:	6822      	ldr	r2, [r4, #0]
 8003af6:	07d2      	lsls	r2, r2, #31
 8003af8:	d501      	bpl.n	8003afe <_printf_float+0x1ae>
 8003afa:	3302      	adds	r3, #2
 8003afc:	e7f4      	b.n	8003ae8 <_printf_float+0x198>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e7f2      	b.n	8003ae8 <_printf_float+0x198>
 8003b02:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003b06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b08:	4299      	cmp	r1, r3
 8003b0a:	db05      	blt.n	8003b18 <_printf_float+0x1c8>
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	6121      	str	r1, [r4, #16]
 8003b10:	07d8      	lsls	r0, r3, #31
 8003b12:	d5ea      	bpl.n	8003aea <_printf_float+0x19a>
 8003b14:	1c4b      	adds	r3, r1, #1
 8003b16:	e7e7      	b.n	8003ae8 <_printf_float+0x198>
 8003b18:	2900      	cmp	r1, #0
 8003b1a:	bfcc      	ite	gt
 8003b1c:	2201      	movgt	r2, #1
 8003b1e:	f1c1 0202 	rsble	r2, r1, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	e7e0      	b.n	8003ae8 <_printf_float+0x198>
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	055a      	lsls	r2, r3, #21
 8003b2a:	d407      	bmi.n	8003b3c <_printf_float+0x1ec>
 8003b2c:	6923      	ldr	r3, [r4, #16]
 8003b2e:	4642      	mov	r2, r8
 8003b30:	4631      	mov	r1, r6
 8003b32:	4628      	mov	r0, r5
 8003b34:	47b8      	blx	r7
 8003b36:	3001      	adds	r0, #1
 8003b38:	d12b      	bne.n	8003b92 <_printf_float+0x242>
 8003b3a:	e764      	b.n	8003a06 <_printf_float+0xb6>
 8003b3c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003b40:	f240 80dd 	bls.w	8003cfe <_printf_float+0x3ae>
 8003b44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f7fc ff2c 	bl	80009a8 <__aeabi_dcmpeq>
 8003b50:	2800      	cmp	r0, #0
 8003b52:	d033      	beq.n	8003bbc <_printf_float+0x26c>
 8003b54:	2301      	movs	r3, #1
 8003b56:	4631      	mov	r1, r6
 8003b58:	4628      	mov	r0, r5
 8003b5a:	4a35      	ldr	r2, [pc, #212]	; (8003c30 <_printf_float+0x2e0>)
 8003b5c:	47b8      	blx	r7
 8003b5e:	3001      	adds	r0, #1
 8003b60:	f43f af51 	beq.w	8003a06 <_printf_float+0xb6>
 8003b64:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	db02      	blt.n	8003b72 <_printf_float+0x222>
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	07d8      	lsls	r0, r3, #31
 8003b70:	d50f      	bpl.n	8003b92 <_printf_float+0x242>
 8003b72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b76:	4631      	mov	r1, r6
 8003b78:	4628      	mov	r0, r5
 8003b7a:	47b8      	blx	r7
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	f43f af42 	beq.w	8003a06 <_printf_float+0xb6>
 8003b82:	f04f 0800 	mov.w	r8, #0
 8003b86:	f104 091a 	add.w	r9, r4, #26
 8003b8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	4543      	cmp	r3, r8
 8003b90:	dc09      	bgt.n	8003ba6 <_printf_float+0x256>
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	079b      	lsls	r3, r3, #30
 8003b96:	f100 8104 	bmi.w	8003da2 <_printf_float+0x452>
 8003b9a:	68e0      	ldr	r0, [r4, #12]
 8003b9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b9e:	4298      	cmp	r0, r3
 8003ba0:	bfb8      	it	lt
 8003ba2:	4618      	movlt	r0, r3
 8003ba4:	e731      	b.n	8003a0a <_printf_float+0xba>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	464a      	mov	r2, r9
 8003baa:	4631      	mov	r1, r6
 8003bac:	4628      	mov	r0, r5
 8003bae:	47b8      	blx	r7
 8003bb0:	3001      	adds	r0, #1
 8003bb2:	f43f af28 	beq.w	8003a06 <_printf_float+0xb6>
 8003bb6:	f108 0801 	add.w	r8, r8, #1
 8003bba:	e7e6      	b.n	8003b8a <_printf_float+0x23a>
 8003bbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	dc38      	bgt.n	8003c34 <_printf_float+0x2e4>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	4631      	mov	r1, r6
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	4a19      	ldr	r2, [pc, #100]	; (8003c30 <_printf_float+0x2e0>)
 8003bca:	47b8      	blx	r7
 8003bcc:	3001      	adds	r0, #1
 8003bce:	f43f af1a 	beq.w	8003a06 <_printf_float+0xb6>
 8003bd2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	d102      	bne.n	8003be0 <_printf_float+0x290>
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	07d9      	lsls	r1, r3, #31
 8003bde:	d5d8      	bpl.n	8003b92 <_printf_float+0x242>
 8003be0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003be4:	4631      	mov	r1, r6
 8003be6:	4628      	mov	r0, r5
 8003be8:	47b8      	blx	r7
 8003bea:	3001      	adds	r0, #1
 8003bec:	f43f af0b 	beq.w	8003a06 <_printf_float+0xb6>
 8003bf0:	f04f 0900 	mov.w	r9, #0
 8003bf4:	f104 0a1a 	add.w	sl, r4, #26
 8003bf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bfa:	425b      	negs	r3, r3
 8003bfc:	454b      	cmp	r3, r9
 8003bfe:	dc01      	bgt.n	8003c04 <_printf_float+0x2b4>
 8003c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c02:	e794      	b.n	8003b2e <_printf_float+0x1de>
 8003c04:	2301      	movs	r3, #1
 8003c06:	4652      	mov	r2, sl
 8003c08:	4631      	mov	r1, r6
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	47b8      	blx	r7
 8003c0e:	3001      	adds	r0, #1
 8003c10:	f43f aef9 	beq.w	8003a06 <_printf_float+0xb6>
 8003c14:	f109 0901 	add.w	r9, r9, #1
 8003c18:	e7ee      	b.n	8003bf8 <_printf_float+0x2a8>
 8003c1a:	bf00      	nop
 8003c1c:	7fefffff 	.word	0x7fefffff
 8003c20:	08006766 	.word	0x08006766
 8003c24:	0800676a 	.word	0x0800676a
 8003c28:	0800676e 	.word	0x0800676e
 8003c2c:	08006772 	.word	0x08006772
 8003c30:	08006776 	.word	0x08006776
 8003c34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	bfa8      	it	ge
 8003c3c:	461a      	movge	r2, r3
 8003c3e:	2a00      	cmp	r2, #0
 8003c40:	4691      	mov	r9, r2
 8003c42:	dc37      	bgt.n	8003cb4 <_printf_float+0x364>
 8003c44:	f04f 0b00 	mov.w	fp, #0
 8003c48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c4c:	f104 021a 	add.w	r2, r4, #26
 8003c50:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003c54:	ebaa 0309 	sub.w	r3, sl, r9
 8003c58:	455b      	cmp	r3, fp
 8003c5a:	dc33      	bgt.n	8003cc4 <_printf_float+0x374>
 8003c5c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c60:	429a      	cmp	r2, r3
 8003c62:	db3b      	blt.n	8003cdc <_printf_float+0x38c>
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	07da      	lsls	r2, r3, #31
 8003c68:	d438      	bmi.n	8003cdc <_printf_float+0x38c>
 8003c6a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003c6e:	eba2 0903 	sub.w	r9, r2, r3
 8003c72:	eba2 020a 	sub.w	r2, r2, sl
 8003c76:	4591      	cmp	r9, r2
 8003c78:	bfa8      	it	ge
 8003c7a:	4691      	movge	r9, r2
 8003c7c:	f1b9 0f00 	cmp.w	r9, #0
 8003c80:	dc34      	bgt.n	8003cec <_printf_float+0x39c>
 8003c82:	f04f 0800 	mov.w	r8, #0
 8003c86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c8a:	f104 0a1a 	add.w	sl, r4, #26
 8003c8e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	eba3 0309 	sub.w	r3, r3, r9
 8003c98:	4543      	cmp	r3, r8
 8003c9a:	f77f af7a 	ble.w	8003b92 <_printf_float+0x242>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	4652      	mov	r2, sl
 8003ca2:	4631      	mov	r1, r6
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	47b8      	blx	r7
 8003ca8:	3001      	adds	r0, #1
 8003caa:	f43f aeac 	beq.w	8003a06 <_printf_float+0xb6>
 8003cae:	f108 0801 	add.w	r8, r8, #1
 8003cb2:	e7ec      	b.n	8003c8e <_printf_float+0x33e>
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	4631      	mov	r1, r6
 8003cb8:	4642      	mov	r2, r8
 8003cba:	4628      	mov	r0, r5
 8003cbc:	47b8      	blx	r7
 8003cbe:	3001      	adds	r0, #1
 8003cc0:	d1c0      	bne.n	8003c44 <_printf_float+0x2f4>
 8003cc2:	e6a0      	b.n	8003a06 <_printf_float+0xb6>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	4631      	mov	r1, r6
 8003cc8:	4628      	mov	r0, r5
 8003cca:	920b      	str	r2, [sp, #44]	; 0x2c
 8003ccc:	47b8      	blx	r7
 8003cce:	3001      	adds	r0, #1
 8003cd0:	f43f ae99 	beq.w	8003a06 <_printf_float+0xb6>
 8003cd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003cd6:	f10b 0b01 	add.w	fp, fp, #1
 8003cda:	e7b9      	b.n	8003c50 <_printf_float+0x300>
 8003cdc:	4631      	mov	r1, r6
 8003cde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	47b8      	blx	r7
 8003ce6:	3001      	adds	r0, #1
 8003ce8:	d1bf      	bne.n	8003c6a <_printf_float+0x31a>
 8003cea:	e68c      	b.n	8003a06 <_printf_float+0xb6>
 8003cec:	464b      	mov	r3, r9
 8003cee:	4631      	mov	r1, r6
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	eb08 020a 	add.w	r2, r8, sl
 8003cf6:	47b8      	blx	r7
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	d1c2      	bne.n	8003c82 <_printf_float+0x332>
 8003cfc:	e683      	b.n	8003a06 <_printf_float+0xb6>
 8003cfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d00:	2a01      	cmp	r2, #1
 8003d02:	dc01      	bgt.n	8003d08 <_printf_float+0x3b8>
 8003d04:	07db      	lsls	r3, r3, #31
 8003d06:	d539      	bpl.n	8003d7c <_printf_float+0x42c>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	4642      	mov	r2, r8
 8003d0c:	4631      	mov	r1, r6
 8003d0e:	4628      	mov	r0, r5
 8003d10:	47b8      	blx	r7
 8003d12:	3001      	adds	r0, #1
 8003d14:	f43f ae77 	beq.w	8003a06 <_printf_float+0xb6>
 8003d18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d1c:	4631      	mov	r1, r6
 8003d1e:	4628      	mov	r0, r5
 8003d20:	47b8      	blx	r7
 8003d22:	3001      	adds	r0, #1
 8003d24:	f43f ae6f 	beq.w	8003a06 <_printf_float+0xb6>
 8003d28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8003d34:	f7fc fe38 	bl	80009a8 <__aeabi_dcmpeq>
 8003d38:	b9d8      	cbnz	r0, 8003d72 <_printf_float+0x422>
 8003d3a:	f109 33ff 	add.w	r3, r9, #4294967295
 8003d3e:	f108 0201 	add.w	r2, r8, #1
 8003d42:	4631      	mov	r1, r6
 8003d44:	4628      	mov	r0, r5
 8003d46:	47b8      	blx	r7
 8003d48:	3001      	adds	r0, #1
 8003d4a:	d10e      	bne.n	8003d6a <_printf_float+0x41a>
 8003d4c:	e65b      	b.n	8003a06 <_printf_float+0xb6>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	464a      	mov	r2, r9
 8003d52:	4631      	mov	r1, r6
 8003d54:	4628      	mov	r0, r5
 8003d56:	47b8      	blx	r7
 8003d58:	3001      	adds	r0, #1
 8003d5a:	f43f ae54 	beq.w	8003a06 <_printf_float+0xb6>
 8003d5e:	f108 0801 	add.w	r8, r8, #1
 8003d62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d64:	3b01      	subs	r3, #1
 8003d66:	4543      	cmp	r3, r8
 8003d68:	dcf1      	bgt.n	8003d4e <_printf_float+0x3fe>
 8003d6a:	4653      	mov	r3, sl
 8003d6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003d70:	e6de      	b.n	8003b30 <_printf_float+0x1e0>
 8003d72:	f04f 0800 	mov.w	r8, #0
 8003d76:	f104 091a 	add.w	r9, r4, #26
 8003d7a:	e7f2      	b.n	8003d62 <_printf_float+0x412>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	4642      	mov	r2, r8
 8003d80:	e7df      	b.n	8003d42 <_printf_float+0x3f2>
 8003d82:	2301      	movs	r3, #1
 8003d84:	464a      	mov	r2, r9
 8003d86:	4631      	mov	r1, r6
 8003d88:	4628      	mov	r0, r5
 8003d8a:	47b8      	blx	r7
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	f43f ae3a 	beq.w	8003a06 <_printf_float+0xb6>
 8003d92:	f108 0801 	add.w	r8, r8, #1
 8003d96:	68e3      	ldr	r3, [r4, #12]
 8003d98:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003d9a:	1a5b      	subs	r3, r3, r1
 8003d9c:	4543      	cmp	r3, r8
 8003d9e:	dcf0      	bgt.n	8003d82 <_printf_float+0x432>
 8003da0:	e6fb      	b.n	8003b9a <_printf_float+0x24a>
 8003da2:	f04f 0800 	mov.w	r8, #0
 8003da6:	f104 0919 	add.w	r9, r4, #25
 8003daa:	e7f4      	b.n	8003d96 <_printf_float+0x446>

08003dac <_printf_common>:
 8003dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003db0:	4616      	mov	r6, r2
 8003db2:	4699      	mov	r9, r3
 8003db4:	688a      	ldr	r2, [r1, #8]
 8003db6:	690b      	ldr	r3, [r1, #16]
 8003db8:	4607      	mov	r7, r0
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	bfb8      	it	lt
 8003dbe:	4613      	movlt	r3, r2
 8003dc0:	6033      	str	r3, [r6, #0]
 8003dc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dcc:	b10a      	cbz	r2, 8003dd2 <_printf_common+0x26>
 8003dce:	3301      	adds	r3, #1
 8003dd0:	6033      	str	r3, [r6, #0]
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	0699      	lsls	r1, r3, #26
 8003dd6:	bf42      	ittt	mi
 8003dd8:	6833      	ldrmi	r3, [r6, #0]
 8003dda:	3302      	addmi	r3, #2
 8003ddc:	6033      	strmi	r3, [r6, #0]
 8003dde:	6825      	ldr	r5, [r4, #0]
 8003de0:	f015 0506 	ands.w	r5, r5, #6
 8003de4:	d106      	bne.n	8003df4 <_printf_common+0x48>
 8003de6:	f104 0a19 	add.w	sl, r4, #25
 8003dea:	68e3      	ldr	r3, [r4, #12]
 8003dec:	6832      	ldr	r2, [r6, #0]
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	42ab      	cmp	r3, r5
 8003df2:	dc2b      	bgt.n	8003e4c <_printf_common+0xa0>
 8003df4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003df8:	1e13      	subs	r3, r2, #0
 8003dfa:	6822      	ldr	r2, [r4, #0]
 8003dfc:	bf18      	it	ne
 8003dfe:	2301      	movne	r3, #1
 8003e00:	0692      	lsls	r2, r2, #26
 8003e02:	d430      	bmi.n	8003e66 <_printf_common+0xba>
 8003e04:	4649      	mov	r1, r9
 8003e06:	4638      	mov	r0, r7
 8003e08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e0c:	47c0      	blx	r8
 8003e0e:	3001      	adds	r0, #1
 8003e10:	d023      	beq.n	8003e5a <_printf_common+0xae>
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	6922      	ldr	r2, [r4, #16]
 8003e16:	f003 0306 	and.w	r3, r3, #6
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	bf14      	ite	ne
 8003e1e:	2500      	movne	r5, #0
 8003e20:	6833      	ldreq	r3, [r6, #0]
 8003e22:	f04f 0600 	mov.w	r6, #0
 8003e26:	bf08      	it	eq
 8003e28:	68e5      	ldreq	r5, [r4, #12]
 8003e2a:	f104 041a 	add.w	r4, r4, #26
 8003e2e:	bf08      	it	eq
 8003e30:	1aed      	subeq	r5, r5, r3
 8003e32:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003e36:	bf08      	it	eq
 8003e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	bfc4      	itt	gt
 8003e40:	1a9b      	subgt	r3, r3, r2
 8003e42:	18ed      	addgt	r5, r5, r3
 8003e44:	42b5      	cmp	r5, r6
 8003e46:	d11a      	bne.n	8003e7e <_printf_common+0xd2>
 8003e48:	2000      	movs	r0, #0
 8003e4a:	e008      	b.n	8003e5e <_printf_common+0xb2>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	4652      	mov	r2, sl
 8003e50:	4649      	mov	r1, r9
 8003e52:	4638      	mov	r0, r7
 8003e54:	47c0      	blx	r8
 8003e56:	3001      	adds	r0, #1
 8003e58:	d103      	bne.n	8003e62 <_printf_common+0xb6>
 8003e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e62:	3501      	adds	r5, #1
 8003e64:	e7c1      	b.n	8003dea <_printf_common+0x3e>
 8003e66:	2030      	movs	r0, #48	; 0x30
 8003e68:	18e1      	adds	r1, r4, r3
 8003e6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e74:	4422      	add	r2, r4
 8003e76:	3302      	adds	r3, #2
 8003e78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e7c:	e7c2      	b.n	8003e04 <_printf_common+0x58>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	4622      	mov	r2, r4
 8003e82:	4649      	mov	r1, r9
 8003e84:	4638      	mov	r0, r7
 8003e86:	47c0      	blx	r8
 8003e88:	3001      	adds	r0, #1
 8003e8a:	d0e6      	beq.n	8003e5a <_printf_common+0xae>
 8003e8c:	3601      	adds	r6, #1
 8003e8e:	e7d9      	b.n	8003e44 <_printf_common+0x98>

08003e90 <_printf_i>:
 8003e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e94:	7e0f      	ldrb	r7, [r1, #24]
 8003e96:	4691      	mov	r9, r2
 8003e98:	2f78      	cmp	r7, #120	; 0x78
 8003e9a:	4680      	mov	r8, r0
 8003e9c:	460c      	mov	r4, r1
 8003e9e:	469a      	mov	sl, r3
 8003ea0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ea2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ea6:	d807      	bhi.n	8003eb8 <_printf_i+0x28>
 8003ea8:	2f62      	cmp	r7, #98	; 0x62
 8003eaa:	d80a      	bhi.n	8003ec2 <_printf_i+0x32>
 8003eac:	2f00      	cmp	r7, #0
 8003eae:	f000 80d5 	beq.w	800405c <_printf_i+0x1cc>
 8003eb2:	2f58      	cmp	r7, #88	; 0x58
 8003eb4:	f000 80c1 	beq.w	800403a <_printf_i+0x1aa>
 8003eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ebc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ec0:	e03a      	b.n	8003f38 <_printf_i+0xa8>
 8003ec2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ec6:	2b15      	cmp	r3, #21
 8003ec8:	d8f6      	bhi.n	8003eb8 <_printf_i+0x28>
 8003eca:	a101      	add	r1, pc, #4	; (adr r1, 8003ed0 <_printf_i+0x40>)
 8003ecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ed0:	08003f29 	.word	0x08003f29
 8003ed4:	08003f3d 	.word	0x08003f3d
 8003ed8:	08003eb9 	.word	0x08003eb9
 8003edc:	08003eb9 	.word	0x08003eb9
 8003ee0:	08003eb9 	.word	0x08003eb9
 8003ee4:	08003eb9 	.word	0x08003eb9
 8003ee8:	08003f3d 	.word	0x08003f3d
 8003eec:	08003eb9 	.word	0x08003eb9
 8003ef0:	08003eb9 	.word	0x08003eb9
 8003ef4:	08003eb9 	.word	0x08003eb9
 8003ef8:	08003eb9 	.word	0x08003eb9
 8003efc:	08004043 	.word	0x08004043
 8003f00:	08003f69 	.word	0x08003f69
 8003f04:	08003ffd 	.word	0x08003ffd
 8003f08:	08003eb9 	.word	0x08003eb9
 8003f0c:	08003eb9 	.word	0x08003eb9
 8003f10:	08004065 	.word	0x08004065
 8003f14:	08003eb9 	.word	0x08003eb9
 8003f18:	08003f69 	.word	0x08003f69
 8003f1c:	08003eb9 	.word	0x08003eb9
 8003f20:	08003eb9 	.word	0x08003eb9
 8003f24:	08004005 	.word	0x08004005
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	1d1a      	adds	r2, r3, #4
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	602a      	str	r2, [r5, #0]
 8003f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0a0      	b.n	800407e <_printf_i+0x1ee>
 8003f3c:	6820      	ldr	r0, [r4, #0]
 8003f3e:	682b      	ldr	r3, [r5, #0]
 8003f40:	0607      	lsls	r7, r0, #24
 8003f42:	f103 0104 	add.w	r1, r3, #4
 8003f46:	6029      	str	r1, [r5, #0]
 8003f48:	d501      	bpl.n	8003f4e <_printf_i+0xbe>
 8003f4a:	681e      	ldr	r6, [r3, #0]
 8003f4c:	e003      	b.n	8003f56 <_printf_i+0xc6>
 8003f4e:	0646      	lsls	r6, r0, #25
 8003f50:	d5fb      	bpl.n	8003f4a <_printf_i+0xba>
 8003f52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003f56:	2e00      	cmp	r6, #0
 8003f58:	da03      	bge.n	8003f62 <_printf_i+0xd2>
 8003f5a:	232d      	movs	r3, #45	; 0x2d
 8003f5c:	4276      	negs	r6, r6
 8003f5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f62:	230a      	movs	r3, #10
 8003f64:	4859      	ldr	r0, [pc, #356]	; (80040cc <_printf_i+0x23c>)
 8003f66:	e012      	b.n	8003f8e <_printf_i+0xfe>
 8003f68:	682b      	ldr	r3, [r5, #0]
 8003f6a:	6820      	ldr	r0, [r4, #0]
 8003f6c:	1d19      	adds	r1, r3, #4
 8003f6e:	6029      	str	r1, [r5, #0]
 8003f70:	0605      	lsls	r5, r0, #24
 8003f72:	d501      	bpl.n	8003f78 <_printf_i+0xe8>
 8003f74:	681e      	ldr	r6, [r3, #0]
 8003f76:	e002      	b.n	8003f7e <_printf_i+0xee>
 8003f78:	0641      	lsls	r1, r0, #25
 8003f7a:	d5fb      	bpl.n	8003f74 <_printf_i+0xe4>
 8003f7c:	881e      	ldrh	r6, [r3, #0]
 8003f7e:	2f6f      	cmp	r7, #111	; 0x6f
 8003f80:	bf0c      	ite	eq
 8003f82:	2308      	moveq	r3, #8
 8003f84:	230a      	movne	r3, #10
 8003f86:	4851      	ldr	r0, [pc, #324]	; (80040cc <_printf_i+0x23c>)
 8003f88:	2100      	movs	r1, #0
 8003f8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f8e:	6865      	ldr	r5, [r4, #4]
 8003f90:	2d00      	cmp	r5, #0
 8003f92:	bfa8      	it	ge
 8003f94:	6821      	ldrge	r1, [r4, #0]
 8003f96:	60a5      	str	r5, [r4, #8]
 8003f98:	bfa4      	itt	ge
 8003f9a:	f021 0104 	bicge.w	r1, r1, #4
 8003f9e:	6021      	strge	r1, [r4, #0]
 8003fa0:	b90e      	cbnz	r6, 8003fa6 <_printf_i+0x116>
 8003fa2:	2d00      	cmp	r5, #0
 8003fa4:	d04b      	beq.n	800403e <_printf_i+0x1ae>
 8003fa6:	4615      	mov	r5, r2
 8003fa8:	fbb6 f1f3 	udiv	r1, r6, r3
 8003fac:	fb03 6711 	mls	r7, r3, r1, r6
 8003fb0:	5dc7      	ldrb	r7, [r0, r7]
 8003fb2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003fb6:	4637      	mov	r7, r6
 8003fb8:	42bb      	cmp	r3, r7
 8003fba:	460e      	mov	r6, r1
 8003fbc:	d9f4      	bls.n	8003fa8 <_printf_i+0x118>
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d10b      	bne.n	8003fda <_printf_i+0x14a>
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	07de      	lsls	r6, r3, #31
 8003fc6:	d508      	bpl.n	8003fda <_printf_i+0x14a>
 8003fc8:	6923      	ldr	r3, [r4, #16]
 8003fca:	6861      	ldr	r1, [r4, #4]
 8003fcc:	4299      	cmp	r1, r3
 8003fce:	bfde      	ittt	le
 8003fd0:	2330      	movle	r3, #48	; 0x30
 8003fd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fda:	1b52      	subs	r2, r2, r5
 8003fdc:	6122      	str	r2, [r4, #16]
 8003fde:	464b      	mov	r3, r9
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	4640      	mov	r0, r8
 8003fe4:	f8cd a000 	str.w	sl, [sp]
 8003fe8:	aa03      	add	r2, sp, #12
 8003fea:	f7ff fedf 	bl	8003dac <_printf_common>
 8003fee:	3001      	adds	r0, #1
 8003ff0:	d14a      	bne.n	8004088 <_printf_i+0x1f8>
 8003ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff6:	b004      	add	sp, #16
 8003ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	f043 0320 	orr.w	r3, r3, #32
 8004002:	6023      	str	r3, [r4, #0]
 8004004:	2778      	movs	r7, #120	; 0x78
 8004006:	4832      	ldr	r0, [pc, #200]	; (80040d0 <_printf_i+0x240>)
 8004008:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	6829      	ldr	r1, [r5, #0]
 8004010:	061f      	lsls	r7, r3, #24
 8004012:	f851 6b04 	ldr.w	r6, [r1], #4
 8004016:	d402      	bmi.n	800401e <_printf_i+0x18e>
 8004018:	065f      	lsls	r7, r3, #25
 800401a:	bf48      	it	mi
 800401c:	b2b6      	uxthmi	r6, r6
 800401e:	07df      	lsls	r7, r3, #31
 8004020:	bf48      	it	mi
 8004022:	f043 0320 	orrmi.w	r3, r3, #32
 8004026:	6029      	str	r1, [r5, #0]
 8004028:	bf48      	it	mi
 800402a:	6023      	strmi	r3, [r4, #0]
 800402c:	b91e      	cbnz	r6, 8004036 <_printf_i+0x1a6>
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	f023 0320 	bic.w	r3, r3, #32
 8004034:	6023      	str	r3, [r4, #0]
 8004036:	2310      	movs	r3, #16
 8004038:	e7a6      	b.n	8003f88 <_printf_i+0xf8>
 800403a:	4824      	ldr	r0, [pc, #144]	; (80040cc <_printf_i+0x23c>)
 800403c:	e7e4      	b.n	8004008 <_printf_i+0x178>
 800403e:	4615      	mov	r5, r2
 8004040:	e7bd      	b.n	8003fbe <_printf_i+0x12e>
 8004042:	682b      	ldr	r3, [r5, #0]
 8004044:	6826      	ldr	r6, [r4, #0]
 8004046:	1d18      	adds	r0, r3, #4
 8004048:	6961      	ldr	r1, [r4, #20]
 800404a:	6028      	str	r0, [r5, #0]
 800404c:	0635      	lsls	r5, r6, #24
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	d501      	bpl.n	8004056 <_printf_i+0x1c6>
 8004052:	6019      	str	r1, [r3, #0]
 8004054:	e002      	b.n	800405c <_printf_i+0x1cc>
 8004056:	0670      	lsls	r0, r6, #25
 8004058:	d5fb      	bpl.n	8004052 <_printf_i+0x1c2>
 800405a:	8019      	strh	r1, [r3, #0]
 800405c:	2300      	movs	r3, #0
 800405e:	4615      	mov	r5, r2
 8004060:	6123      	str	r3, [r4, #16]
 8004062:	e7bc      	b.n	8003fde <_printf_i+0x14e>
 8004064:	682b      	ldr	r3, [r5, #0]
 8004066:	2100      	movs	r1, #0
 8004068:	1d1a      	adds	r2, r3, #4
 800406a:	602a      	str	r2, [r5, #0]
 800406c:	681d      	ldr	r5, [r3, #0]
 800406e:	6862      	ldr	r2, [r4, #4]
 8004070:	4628      	mov	r0, r5
 8004072:	f000 f9d4 	bl	800441e <memchr>
 8004076:	b108      	cbz	r0, 800407c <_printf_i+0x1ec>
 8004078:	1b40      	subs	r0, r0, r5
 800407a:	6060      	str	r0, [r4, #4]
 800407c:	6863      	ldr	r3, [r4, #4]
 800407e:	6123      	str	r3, [r4, #16]
 8004080:	2300      	movs	r3, #0
 8004082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004086:	e7aa      	b.n	8003fde <_printf_i+0x14e>
 8004088:	462a      	mov	r2, r5
 800408a:	4649      	mov	r1, r9
 800408c:	4640      	mov	r0, r8
 800408e:	6923      	ldr	r3, [r4, #16]
 8004090:	47d0      	blx	sl
 8004092:	3001      	adds	r0, #1
 8004094:	d0ad      	beq.n	8003ff2 <_printf_i+0x162>
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	079b      	lsls	r3, r3, #30
 800409a:	d413      	bmi.n	80040c4 <_printf_i+0x234>
 800409c:	68e0      	ldr	r0, [r4, #12]
 800409e:	9b03      	ldr	r3, [sp, #12]
 80040a0:	4298      	cmp	r0, r3
 80040a2:	bfb8      	it	lt
 80040a4:	4618      	movlt	r0, r3
 80040a6:	e7a6      	b.n	8003ff6 <_printf_i+0x166>
 80040a8:	2301      	movs	r3, #1
 80040aa:	4632      	mov	r2, r6
 80040ac:	4649      	mov	r1, r9
 80040ae:	4640      	mov	r0, r8
 80040b0:	47d0      	blx	sl
 80040b2:	3001      	adds	r0, #1
 80040b4:	d09d      	beq.n	8003ff2 <_printf_i+0x162>
 80040b6:	3501      	adds	r5, #1
 80040b8:	68e3      	ldr	r3, [r4, #12]
 80040ba:	9903      	ldr	r1, [sp, #12]
 80040bc:	1a5b      	subs	r3, r3, r1
 80040be:	42ab      	cmp	r3, r5
 80040c0:	dcf2      	bgt.n	80040a8 <_printf_i+0x218>
 80040c2:	e7eb      	b.n	800409c <_printf_i+0x20c>
 80040c4:	2500      	movs	r5, #0
 80040c6:	f104 0619 	add.w	r6, r4, #25
 80040ca:	e7f5      	b.n	80040b8 <_printf_i+0x228>
 80040cc:	08006778 	.word	0x08006778
 80040d0:	08006789 	.word	0x08006789

080040d4 <std>:
 80040d4:	2300      	movs	r3, #0
 80040d6:	b510      	push	{r4, lr}
 80040d8:	4604      	mov	r4, r0
 80040da:	e9c0 3300 	strd	r3, r3, [r0]
 80040de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040e2:	6083      	str	r3, [r0, #8]
 80040e4:	8181      	strh	r1, [r0, #12]
 80040e6:	6643      	str	r3, [r0, #100]	; 0x64
 80040e8:	81c2      	strh	r2, [r0, #14]
 80040ea:	6183      	str	r3, [r0, #24]
 80040ec:	4619      	mov	r1, r3
 80040ee:	2208      	movs	r2, #8
 80040f0:	305c      	adds	r0, #92	; 0x5c
 80040f2:	f000 f914 	bl	800431e <memset>
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <std+0x58>)
 80040f8:	6224      	str	r4, [r4, #32]
 80040fa:	6263      	str	r3, [r4, #36]	; 0x24
 80040fc:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <std+0x5c>)
 80040fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8004100:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <std+0x60>)
 8004102:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004104:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <std+0x64>)
 8004106:	6323      	str	r3, [r4, #48]	; 0x30
 8004108:	4b0c      	ldr	r3, [pc, #48]	; (800413c <std+0x68>)
 800410a:	429c      	cmp	r4, r3
 800410c:	d006      	beq.n	800411c <std+0x48>
 800410e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004112:	4294      	cmp	r4, r2
 8004114:	d002      	beq.n	800411c <std+0x48>
 8004116:	33d0      	adds	r3, #208	; 0xd0
 8004118:	429c      	cmp	r4, r3
 800411a:	d105      	bne.n	8004128 <std+0x54>
 800411c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004124:	f000 b978 	b.w	8004418 <__retarget_lock_init_recursive>
 8004128:	bd10      	pop	{r4, pc}
 800412a:	bf00      	nop
 800412c:	08004299 	.word	0x08004299
 8004130:	080042bb 	.word	0x080042bb
 8004134:	080042f3 	.word	0x080042f3
 8004138:	08004317 	.word	0x08004317
 800413c:	2000029c 	.word	0x2000029c

08004140 <stdio_exit_handler>:
 8004140:	4a02      	ldr	r2, [pc, #8]	; (800414c <stdio_exit_handler+0xc>)
 8004142:	4903      	ldr	r1, [pc, #12]	; (8004150 <stdio_exit_handler+0x10>)
 8004144:	4803      	ldr	r0, [pc, #12]	; (8004154 <stdio_exit_handler+0x14>)
 8004146:	f000 b869 	b.w	800421c <_fwalk_sglue>
 800414a:	bf00      	nop
 800414c:	2000000c 	.word	0x2000000c
 8004150:	08005db5 	.word	0x08005db5
 8004154:	20000018 	.word	0x20000018

08004158 <cleanup_stdio>:
 8004158:	6841      	ldr	r1, [r0, #4]
 800415a:	4b0c      	ldr	r3, [pc, #48]	; (800418c <cleanup_stdio+0x34>)
 800415c:	b510      	push	{r4, lr}
 800415e:	4299      	cmp	r1, r3
 8004160:	4604      	mov	r4, r0
 8004162:	d001      	beq.n	8004168 <cleanup_stdio+0x10>
 8004164:	f001 fe26 	bl	8005db4 <_fflush_r>
 8004168:	68a1      	ldr	r1, [r4, #8]
 800416a:	4b09      	ldr	r3, [pc, #36]	; (8004190 <cleanup_stdio+0x38>)
 800416c:	4299      	cmp	r1, r3
 800416e:	d002      	beq.n	8004176 <cleanup_stdio+0x1e>
 8004170:	4620      	mov	r0, r4
 8004172:	f001 fe1f 	bl	8005db4 <_fflush_r>
 8004176:	68e1      	ldr	r1, [r4, #12]
 8004178:	4b06      	ldr	r3, [pc, #24]	; (8004194 <cleanup_stdio+0x3c>)
 800417a:	4299      	cmp	r1, r3
 800417c:	d004      	beq.n	8004188 <cleanup_stdio+0x30>
 800417e:	4620      	mov	r0, r4
 8004180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004184:	f001 be16 	b.w	8005db4 <_fflush_r>
 8004188:	bd10      	pop	{r4, pc}
 800418a:	bf00      	nop
 800418c:	2000029c 	.word	0x2000029c
 8004190:	20000304 	.word	0x20000304
 8004194:	2000036c 	.word	0x2000036c

08004198 <global_stdio_init.part.0>:
 8004198:	b510      	push	{r4, lr}
 800419a:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <global_stdio_init.part.0+0x30>)
 800419c:	4c0b      	ldr	r4, [pc, #44]	; (80041cc <global_stdio_init.part.0+0x34>)
 800419e:	4a0c      	ldr	r2, [pc, #48]	; (80041d0 <global_stdio_init.part.0+0x38>)
 80041a0:	4620      	mov	r0, r4
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	2104      	movs	r1, #4
 80041a6:	2200      	movs	r2, #0
 80041a8:	f7ff ff94 	bl	80040d4 <std>
 80041ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80041b0:	2201      	movs	r2, #1
 80041b2:	2109      	movs	r1, #9
 80041b4:	f7ff ff8e 	bl	80040d4 <std>
 80041b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80041bc:	2202      	movs	r2, #2
 80041be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041c2:	2112      	movs	r1, #18
 80041c4:	f7ff bf86 	b.w	80040d4 <std>
 80041c8:	200003d4 	.word	0x200003d4
 80041cc:	2000029c 	.word	0x2000029c
 80041d0:	08004141 	.word	0x08004141

080041d4 <__sfp_lock_acquire>:
 80041d4:	4801      	ldr	r0, [pc, #4]	; (80041dc <__sfp_lock_acquire+0x8>)
 80041d6:	f000 b920 	b.w	800441a <__retarget_lock_acquire_recursive>
 80041da:	bf00      	nop
 80041dc:	200003dd 	.word	0x200003dd

080041e0 <__sfp_lock_release>:
 80041e0:	4801      	ldr	r0, [pc, #4]	; (80041e8 <__sfp_lock_release+0x8>)
 80041e2:	f000 b91b 	b.w	800441c <__retarget_lock_release_recursive>
 80041e6:	bf00      	nop
 80041e8:	200003dd 	.word	0x200003dd

080041ec <__sinit>:
 80041ec:	b510      	push	{r4, lr}
 80041ee:	4604      	mov	r4, r0
 80041f0:	f7ff fff0 	bl	80041d4 <__sfp_lock_acquire>
 80041f4:	6a23      	ldr	r3, [r4, #32]
 80041f6:	b11b      	cbz	r3, 8004200 <__sinit+0x14>
 80041f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041fc:	f7ff bff0 	b.w	80041e0 <__sfp_lock_release>
 8004200:	4b04      	ldr	r3, [pc, #16]	; (8004214 <__sinit+0x28>)
 8004202:	6223      	str	r3, [r4, #32]
 8004204:	4b04      	ldr	r3, [pc, #16]	; (8004218 <__sinit+0x2c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f5      	bne.n	80041f8 <__sinit+0xc>
 800420c:	f7ff ffc4 	bl	8004198 <global_stdio_init.part.0>
 8004210:	e7f2      	b.n	80041f8 <__sinit+0xc>
 8004212:	bf00      	nop
 8004214:	08004159 	.word	0x08004159
 8004218:	200003d4 	.word	0x200003d4

0800421c <_fwalk_sglue>:
 800421c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004220:	4607      	mov	r7, r0
 8004222:	4688      	mov	r8, r1
 8004224:	4614      	mov	r4, r2
 8004226:	2600      	movs	r6, #0
 8004228:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800422c:	f1b9 0901 	subs.w	r9, r9, #1
 8004230:	d505      	bpl.n	800423e <_fwalk_sglue+0x22>
 8004232:	6824      	ldr	r4, [r4, #0]
 8004234:	2c00      	cmp	r4, #0
 8004236:	d1f7      	bne.n	8004228 <_fwalk_sglue+0xc>
 8004238:	4630      	mov	r0, r6
 800423a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800423e:	89ab      	ldrh	r3, [r5, #12]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d907      	bls.n	8004254 <_fwalk_sglue+0x38>
 8004244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004248:	3301      	adds	r3, #1
 800424a:	d003      	beq.n	8004254 <_fwalk_sglue+0x38>
 800424c:	4629      	mov	r1, r5
 800424e:	4638      	mov	r0, r7
 8004250:	47c0      	blx	r8
 8004252:	4306      	orrs	r6, r0
 8004254:	3568      	adds	r5, #104	; 0x68
 8004256:	e7e9      	b.n	800422c <_fwalk_sglue+0x10>

08004258 <siprintf>:
 8004258:	b40e      	push	{r1, r2, r3}
 800425a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800425e:	b500      	push	{lr}
 8004260:	b09c      	sub	sp, #112	; 0x70
 8004262:	ab1d      	add	r3, sp, #116	; 0x74
 8004264:	9002      	str	r0, [sp, #8]
 8004266:	9006      	str	r0, [sp, #24]
 8004268:	9107      	str	r1, [sp, #28]
 800426a:	9104      	str	r1, [sp, #16]
 800426c:	4808      	ldr	r0, [pc, #32]	; (8004290 <siprintf+0x38>)
 800426e:	4909      	ldr	r1, [pc, #36]	; (8004294 <siprintf+0x3c>)
 8004270:	f853 2b04 	ldr.w	r2, [r3], #4
 8004274:	9105      	str	r1, [sp, #20]
 8004276:	6800      	ldr	r0, [r0, #0]
 8004278:	a902      	add	r1, sp, #8
 800427a:	9301      	str	r3, [sp, #4]
 800427c:	f001 fc1a 	bl	8005ab4 <_svfiprintf_r>
 8004280:	2200      	movs	r2, #0
 8004282:	9b02      	ldr	r3, [sp, #8]
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	b01c      	add	sp, #112	; 0x70
 8004288:	f85d eb04 	ldr.w	lr, [sp], #4
 800428c:	b003      	add	sp, #12
 800428e:	4770      	bx	lr
 8004290:	20000064 	.word	0x20000064
 8004294:	ffff0208 	.word	0xffff0208

08004298 <__sread>:
 8004298:	b510      	push	{r4, lr}
 800429a:	460c      	mov	r4, r1
 800429c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042a0:	f000 f86c 	bl	800437c <_read_r>
 80042a4:	2800      	cmp	r0, #0
 80042a6:	bfab      	itete	ge
 80042a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042aa:	89a3      	ldrhlt	r3, [r4, #12]
 80042ac:	181b      	addge	r3, r3, r0
 80042ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042b2:	bfac      	ite	ge
 80042b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80042b6:	81a3      	strhlt	r3, [r4, #12]
 80042b8:	bd10      	pop	{r4, pc}

080042ba <__swrite>:
 80042ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042be:	461f      	mov	r7, r3
 80042c0:	898b      	ldrh	r3, [r1, #12]
 80042c2:	4605      	mov	r5, r0
 80042c4:	05db      	lsls	r3, r3, #23
 80042c6:	460c      	mov	r4, r1
 80042c8:	4616      	mov	r6, r2
 80042ca:	d505      	bpl.n	80042d8 <__swrite+0x1e>
 80042cc:	2302      	movs	r3, #2
 80042ce:	2200      	movs	r2, #0
 80042d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042d4:	f000 f840 	bl	8004358 <_lseek_r>
 80042d8:	89a3      	ldrh	r3, [r4, #12]
 80042da:	4632      	mov	r2, r6
 80042dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042e0:	81a3      	strh	r3, [r4, #12]
 80042e2:	4628      	mov	r0, r5
 80042e4:	463b      	mov	r3, r7
 80042e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042ee:	f000 b857 	b.w	80043a0 <_write_r>

080042f2 <__sseek>:
 80042f2:	b510      	push	{r4, lr}
 80042f4:	460c      	mov	r4, r1
 80042f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042fa:	f000 f82d 	bl	8004358 <_lseek_r>
 80042fe:	1c43      	adds	r3, r0, #1
 8004300:	89a3      	ldrh	r3, [r4, #12]
 8004302:	bf15      	itete	ne
 8004304:	6560      	strne	r0, [r4, #84]	; 0x54
 8004306:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800430a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800430e:	81a3      	strheq	r3, [r4, #12]
 8004310:	bf18      	it	ne
 8004312:	81a3      	strhne	r3, [r4, #12]
 8004314:	bd10      	pop	{r4, pc}

08004316 <__sclose>:
 8004316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800431a:	f000 b80d 	b.w	8004338 <_close_r>

0800431e <memset>:
 800431e:	4603      	mov	r3, r0
 8004320:	4402      	add	r2, r0
 8004322:	4293      	cmp	r3, r2
 8004324:	d100      	bne.n	8004328 <memset+0xa>
 8004326:	4770      	bx	lr
 8004328:	f803 1b01 	strb.w	r1, [r3], #1
 800432c:	e7f9      	b.n	8004322 <memset+0x4>
	...

08004330 <_localeconv_r>:
 8004330:	4800      	ldr	r0, [pc, #0]	; (8004334 <_localeconv_r+0x4>)
 8004332:	4770      	bx	lr
 8004334:	20000158 	.word	0x20000158

08004338 <_close_r>:
 8004338:	b538      	push	{r3, r4, r5, lr}
 800433a:	2300      	movs	r3, #0
 800433c:	4d05      	ldr	r5, [pc, #20]	; (8004354 <_close_r+0x1c>)
 800433e:	4604      	mov	r4, r0
 8004340:	4608      	mov	r0, r1
 8004342:	602b      	str	r3, [r5, #0]
 8004344:	f7fd fb6f 	bl	8001a26 <_close>
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	d102      	bne.n	8004352 <_close_r+0x1a>
 800434c:	682b      	ldr	r3, [r5, #0]
 800434e:	b103      	cbz	r3, 8004352 <_close_r+0x1a>
 8004350:	6023      	str	r3, [r4, #0]
 8004352:	bd38      	pop	{r3, r4, r5, pc}
 8004354:	200003d8 	.word	0x200003d8

08004358 <_lseek_r>:
 8004358:	b538      	push	{r3, r4, r5, lr}
 800435a:	4604      	mov	r4, r0
 800435c:	4608      	mov	r0, r1
 800435e:	4611      	mov	r1, r2
 8004360:	2200      	movs	r2, #0
 8004362:	4d05      	ldr	r5, [pc, #20]	; (8004378 <_lseek_r+0x20>)
 8004364:	602a      	str	r2, [r5, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	f7fd fb81 	bl	8001a6e <_lseek>
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	d102      	bne.n	8004376 <_lseek_r+0x1e>
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	b103      	cbz	r3, 8004376 <_lseek_r+0x1e>
 8004374:	6023      	str	r3, [r4, #0]
 8004376:	bd38      	pop	{r3, r4, r5, pc}
 8004378:	200003d8 	.word	0x200003d8

0800437c <_read_r>:
 800437c:	b538      	push	{r3, r4, r5, lr}
 800437e:	4604      	mov	r4, r0
 8004380:	4608      	mov	r0, r1
 8004382:	4611      	mov	r1, r2
 8004384:	2200      	movs	r2, #0
 8004386:	4d05      	ldr	r5, [pc, #20]	; (800439c <_read_r+0x20>)
 8004388:	602a      	str	r2, [r5, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	f7fd fb12 	bl	80019b4 <_read>
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	d102      	bne.n	800439a <_read_r+0x1e>
 8004394:	682b      	ldr	r3, [r5, #0]
 8004396:	b103      	cbz	r3, 800439a <_read_r+0x1e>
 8004398:	6023      	str	r3, [r4, #0]
 800439a:	bd38      	pop	{r3, r4, r5, pc}
 800439c:	200003d8 	.word	0x200003d8

080043a0 <_write_r>:
 80043a0:	b538      	push	{r3, r4, r5, lr}
 80043a2:	4604      	mov	r4, r0
 80043a4:	4608      	mov	r0, r1
 80043a6:	4611      	mov	r1, r2
 80043a8:	2200      	movs	r2, #0
 80043aa:	4d05      	ldr	r5, [pc, #20]	; (80043c0 <_write_r+0x20>)
 80043ac:	602a      	str	r2, [r5, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	f7fd fb1d 	bl	80019ee <_write>
 80043b4:	1c43      	adds	r3, r0, #1
 80043b6:	d102      	bne.n	80043be <_write_r+0x1e>
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	b103      	cbz	r3, 80043be <_write_r+0x1e>
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	bd38      	pop	{r3, r4, r5, pc}
 80043c0:	200003d8 	.word	0x200003d8

080043c4 <__errno>:
 80043c4:	4b01      	ldr	r3, [pc, #4]	; (80043cc <__errno+0x8>)
 80043c6:	6818      	ldr	r0, [r3, #0]
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	20000064 	.word	0x20000064

080043d0 <__libc_init_array>:
 80043d0:	b570      	push	{r4, r5, r6, lr}
 80043d2:	2600      	movs	r6, #0
 80043d4:	4d0c      	ldr	r5, [pc, #48]	; (8004408 <__libc_init_array+0x38>)
 80043d6:	4c0d      	ldr	r4, [pc, #52]	; (800440c <__libc_init_array+0x3c>)
 80043d8:	1b64      	subs	r4, r4, r5
 80043da:	10a4      	asrs	r4, r4, #2
 80043dc:	42a6      	cmp	r6, r4
 80043de:	d109      	bne.n	80043f4 <__libc_init_array+0x24>
 80043e0:	f002 f888 	bl	80064f4 <_init>
 80043e4:	2600      	movs	r6, #0
 80043e6:	4d0a      	ldr	r5, [pc, #40]	; (8004410 <__libc_init_array+0x40>)
 80043e8:	4c0a      	ldr	r4, [pc, #40]	; (8004414 <__libc_init_array+0x44>)
 80043ea:	1b64      	subs	r4, r4, r5
 80043ec:	10a4      	asrs	r4, r4, #2
 80043ee:	42a6      	cmp	r6, r4
 80043f0:	d105      	bne.n	80043fe <__libc_init_array+0x2e>
 80043f2:	bd70      	pop	{r4, r5, r6, pc}
 80043f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f8:	4798      	blx	r3
 80043fa:	3601      	adds	r6, #1
 80043fc:	e7ee      	b.n	80043dc <__libc_init_array+0xc>
 80043fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004402:	4798      	blx	r3
 8004404:	3601      	adds	r6, #1
 8004406:	e7f2      	b.n	80043ee <__libc_init_array+0x1e>
 8004408:	08006ad4 	.word	0x08006ad4
 800440c:	08006ad4 	.word	0x08006ad4
 8004410:	08006ad4 	.word	0x08006ad4
 8004414:	08006ad8 	.word	0x08006ad8

08004418 <__retarget_lock_init_recursive>:
 8004418:	4770      	bx	lr

0800441a <__retarget_lock_acquire_recursive>:
 800441a:	4770      	bx	lr

0800441c <__retarget_lock_release_recursive>:
 800441c:	4770      	bx	lr

0800441e <memchr>:
 800441e:	4603      	mov	r3, r0
 8004420:	b510      	push	{r4, lr}
 8004422:	b2c9      	uxtb	r1, r1
 8004424:	4402      	add	r2, r0
 8004426:	4293      	cmp	r3, r2
 8004428:	4618      	mov	r0, r3
 800442a:	d101      	bne.n	8004430 <memchr+0x12>
 800442c:	2000      	movs	r0, #0
 800442e:	e003      	b.n	8004438 <memchr+0x1a>
 8004430:	7804      	ldrb	r4, [r0, #0]
 8004432:	3301      	adds	r3, #1
 8004434:	428c      	cmp	r4, r1
 8004436:	d1f6      	bne.n	8004426 <memchr+0x8>
 8004438:	bd10      	pop	{r4, pc}

0800443a <quorem>:
 800443a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443e:	6903      	ldr	r3, [r0, #16]
 8004440:	690c      	ldr	r4, [r1, #16]
 8004442:	4607      	mov	r7, r0
 8004444:	42a3      	cmp	r3, r4
 8004446:	db7f      	blt.n	8004548 <quorem+0x10e>
 8004448:	3c01      	subs	r4, #1
 800444a:	f100 0514 	add.w	r5, r0, #20
 800444e:	f101 0814 	add.w	r8, r1, #20
 8004452:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004456:	9301      	str	r3, [sp, #4]
 8004458:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800445c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004460:	3301      	adds	r3, #1
 8004462:	429a      	cmp	r2, r3
 8004464:	fbb2 f6f3 	udiv	r6, r2, r3
 8004468:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800446c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004470:	d331      	bcc.n	80044d6 <quorem+0x9c>
 8004472:	f04f 0e00 	mov.w	lr, #0
 8004476:	4640      	mov	r0, r8
 8004478:	46ac      	mov	ip, r5
 800447a:	46f2      	mov	sl, lr
 800447c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004480:	b293      	uxth	r3, r2
 8004482:	fb06 e303 	mla	r3, r6, r3, lr
 8004486:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800448a:	0c1a      	lsrs	r2, r3, #16
 800448c:	b29b      	uxth	r3, r3
 800448e:	fb06 220e 	mla	r2, r6, lr, r2
 8004492:	ebaa 0303 	sub.w	r3, sl, r3
 8004496:	f8dc a000 	ldr.w	sl, [ip]
 800449a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800449e:	fa1f fa8a 	uxth.w	sl, sl
 80044a2:	4453      	add	r3, sl
 80044a4:	f8dc a000 	ldr.w	sl, [ip]
 80044a8:	b292      	uxth	r2, r2
 80044aa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80044ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044b8:	4581      	cmp	r9, r0
 80044ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80044be:	f84c 3b04 	str.w	r3, [ip], #4
 80044c2:	d2db      	bcs.n	800447c <quorem+0x42>
 80044c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80044c8:	b92b      	cbnz	r3, 80044d6 <quorem+0x9c>
 80044ca:	9b01      	ldr	r3, [sp, #4]
 80044cc:	3b04      	subs	r3, #4
 80044ce:	429d      	cmp	r5, r3
 80044d0:	461a      	mov	r2, r3
 80044d2:	d32d      	bcc.n	8004530 <quorem+0xf6>
 80044d4:	613c      	str	r4, [r7, #16]
 80044d6:	4638      	mov	r0, r7
 80044d8:	f001 f994 	bl	8005804 <__mcmp>
 80044dc:	2800      	cmp	r0, #0
 80044de:	db23      	blt.n	8004528 <quorem+0xee>
 80044e0:	4629      	mov	r1, r5
 80044e2:	2000      	movs	r0, #0
 80044e4:	3601      	adds	r6, #1
 80044e6:	f858 2b04 	ldr.w	r2, [r8], #4
 80044ea:	f8d1 c000 	ldr.w	ip, [r1]
 80044ee:	b293      	uxth	r3, r2
 80044f0:	1ac3      	subs	r3, r0, r3
 80044f2:	0c12      	lsrs	r2, r2, #16
 80044f4:	fa1f f08c 	uxth.w	r0, ip
 80044f8:	4403      	add	r3, r0
 80044fa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80044fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004502:	b29b      	uxth	r3, r3
 8004504:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004508:	45c1      	cmp	r9, r8
 800450a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800450e:	f841 3b04 	str.w	r3, [r1], #4
 8004512:	d2e8      	bcs.n	80044e6 <quorem+0xac>
 8004514:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004518:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800451c:	b922      	cbnz	r2, 8004528 <quorem+0xee>
 800451e:	3b04      	subs	r3, #4
 8004520:	429d      	cmp	r5, r3
 8004522:	461a      	mov	r2, r3
 8004524:	d30a      	bcc.n	800453c <quorem+0x102>
 8004526:	613c      	str	r4, [r7, #16]
 8004528:	4630      	mov	r0, r6
 800452a:	b003      	add	sp, #12
 800452c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	3b04      	subs	r3, #4
 8004534:	2a00      	cmp	r2, #0
 8004536:	d1cd      	bne.n	80044d4 <quorem+0x9a>
 8004538:	3c01      	subs	r4, #1
 800453a:	e7c8      	b.n	80044ce <quorem+0x94>
 800453c:	6812      	ldr	r2, [r2, #0]
 800453e:	3b04      	subs	r3, #4
 8004540:	2a00      	cmp	r2, #0
 8004542:	d1f0      	bne.n	8004526 <quorem+0xec>
 8004544:	3c01      	subs	r4, #1
 8004546:	e7eb      	b.n	8004520 <quorem+0xe6>
 8004548:	2000      	movs	r0, #0
 800454a:	e7ee      	b.n	800452a <quorem+0xf0>
 800454c:	0000      	movs	r0, r0
	...

08004550 <_dtoa_r>:
 8004550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004554:	4616      	mov	r6, r2
 8004556:	461f      	mov	r7, r3
 8004558:	69c4      	ldr	r4, [r0, #28]
 800455a:	b099      	sub	sp, #100	; 0x64
 800455c:	4605      	mov	r5, r0
 800455e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004562:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004566:	b974      	cbnz	r4, 8004586 <_dtoa_r+0x36>
 8004568:	2010      	movs	r0, #16
 800456a:	f000 fe1d 	bl	80051a8 <malloc>
 800456e:	4602      	mov	r2, r0
 8004570:	61e8      	str	r0, [r5, #28]
 8004572:	b920      	cbnz	r0, 800457e <_dtoa_r+0x2e>
 8004574:	21ef      	movs	r1, #239	; 0xef
 8004576:	4bac      	ldr	r3, [pc, #688]	; (8004828 <_dtoa_r+0x2d8>)
 8004578:	48ac      	ldr	r0, [pc, #688]	; (800482c <_dtoa_r+0x2dc>)
 800457a:	f001 fc7b 	bl	8005e74 <__assert_func>
 800457e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004582:	6004      	str	r4, [r0, #0]
 8004584:	60c4      	str	r4, [r0, #12]
 8004586:	69eb      	ldr	r3, [r5, #28]
 8004588:	6819      	ldr	r1, [r3, #0]
 800458a:	b151      	cbz	r1, 80045a2 <_dtoa_r+0x52>
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	2301      	movs	r3, #1
 8004590:	4093      	lsls	r3, r2
 8004592:	604a      	str	r2, [r1, #4]
 8004594:	608b      	str	r3, [r1, #8]
 8004596:	4628      	mov	r0, r5
 8004598:	f000 fefa 	bl	8005390 <_Bfree>
 800459c:	2200      	movs	r2, #0
 800459e:	69eb      	ldr	r3, [r5, #28]
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	1e3b      	subs	r3, r7, #0
 80045a4:	bfaf      	iteee	ge
 80045a6:	2300      	movge	r3, #0
 80045a8:	2201      	movlt	r2, #1
 80045aa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80045ae:	9305      	strlt	r3, [sp, #20]
 80045b0:	bfa8      	it	ge
 80045b2:	f8c8 3000 	strge.w	r3, [r8]
 80045b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80045ba:	4b9d      	ldr	r3, [pc, #628]	; (8004830 <_dtoa_r+0x2e0>)
 80045bc:	bfb8      	it	lt
 80045be:	f8c8 2000 	strlt.w	r2, [r8]
 80045c2:	ea33 0309 	bics.w	r3, r3, r9
 80045c6:	d119      	bne.n	80045fc <_dtoa_r+0xac>
 80045c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80045cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80045d4:	4333      	orrs	r3, r6
 80045d6:	f000 8589 	beq.w	80050ec <_dtoa_r+0xb9c>
 80045da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80045dc:	b953      	cbnz	r3, 80045f4 <_dtoa_r+0xa4>
 80045de:	4b95      	ldr	r3, [pc, #596]	; (8004834 <_dtoa_r+0x2e4>)
 80045e0:	e023      	b.n	800462a <_dtoa_r+0xda>
 80045e2:	4b95      	ldr	r3, [pc, #596]	; (8004838 <_dtoa_r+0x2e8>)
 80045e4:	9303      	str	r3, [sp, #12]
 80045e6:	3308      	adds	r3, #8
 80045e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	9803      	ldr	r0, [sp, #12]
 80045ee:	b019      	add	sp, #100	; 0x64
 80045f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045f4:	4b8f      	ldr	r3, [pc, #572]	; (8004834 <_dtoa_r+0x2e4>)
 80045f6:	9303      	str	r3, [sp, #12]
 80045f8:	3303      	adds	r3, #3
 80045fa:	e7f5      	b.n	80045e8 <_dtoa_r+0x98>
 80045fc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004600:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004604:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004608:	2200      	movs	r2, #0
 800460a:	2300      	movs	r3, #0
 800460c:	f7fc f9cc 	bl	80009a8 <__aeabi_dcmpeq>
 8004610:	4680      	mov	r8, r0
 8004612:	b160      	cbz	r0, 800462e <_dtoa_r+0xde>
 8004614:	2301      	movs	r3, #1
 8004616:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8562 	beq.w	80050e6 <_dtoa_r+0xb96>
 8004622:	4b86      	ldr	r3, [pc, #536]	; (800483c <_dtoa_r+0x2ec>)
 8004624:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	3b01      	subs	r3, #1
 800462a:	9303      	str	r3, [sp, #12]
 800462c:	e7de      	b.n	80045ec <_dtoa_r+0x9c>
 800462e:	ab16      	add	r3, sp, #88	; 0x58
 8004630:	9301      	str	r3, [sp, #4]
 8004632:	ab17      	add	r3, sp, #92	; 0x5c
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	4628      	mov	r0, r5
 8004638:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800463c:	f001 f98a 	bl	8005954 <__d2b>
 8004640:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004644:	4682      	mov	sl, r0
 8004646:	2c00      	cmp	r4, #0
 8004648:	d07e      	beq.n	8004748 <_dtoa_r+0x1f8>
 800464a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800464e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004650:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004658:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800465c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004660:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004664:	4619      	mov	r1, r3
 8004666:	2200      	movs	r2, #0
 8004668:	4b75      	ldr	r3, [pc, #468]	; (8004840 <_dtoa_r+0x2f0>)
 800466a:	f7fb fd7d 	bl	8000168 <__aeabi_dsub>
 800466e:	a368      	add	r3, pc, #416	; (adr r3, 8004810 <_dtoa_r+0x2c0>)
 8004670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004674:	f7fb ff30 	bl	80004d8 <__aeabi_dmul>
 8004678:	a367      	add	r3, pc, #412	; (adr r3, 8004818 <_dtoa_r+0x2c8>)
 800467a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467e:	f7fb fd75 	bl	800016c <__adddf3>
 8004682:	4606      	mov	r6, r0
 8004684:	4620      	mov	r0, r4
 8004686:	460f      	mov	r7, r1
 8004688:	f7fb febc 	bl	8000404 <__aeabi_i2d>
 800468c:	a364      	add	r3, pc, #400	; (adr r3, 8004820 <_dtoa_r+0x2d0>)
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	f7fb ff21 	bl	80004d8 <__aeabi_dmul>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	4630      	mov	r0, r6
 800469c:	4639      	mov	r1, r7
 800469e:	f7fb fd65 	bl	800016c <__adddf3>
 80046a2:	4606      	mov	r6, r0
 80046a4:	460f      	mov	r7, r1
 80046a6:	f7fc f9c7 	bl	8000a38 <__aeabi_d2iz>
 80046aa:	2200      	movs	r2, #0
 80046ac:	4683      	mov	fp, r0
 80046ae:	2300      	movs	r3, #0
 80046b0:	4630      	mov	r0, r6
 80046b2:	4639      	mov	r1, r7
 80046b4:	f7fc f982 	bl	80009bc <__aeabi_dcmplt>
 80046b8:	b148      	cbz	r0, 80046ce <_dtoa_r+0x17e>
 80046ba:	4658      	mov	r0, fp
 80046bc:	f7fb fea2 	bl	8000404 <__aeabi_i2d>
 80046c0:	4632      	mov	r2, r6
 80046c2:	463b      	mov	r3, r7
 80046c4:	f7fc f970 	bl	80009a8 <__aeabi_dcmpeq>
 80046c8:	b908      	cbnz	r0, 80046ce <_dtoa_r+0x17e>
 80046ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80046ce:	f1bb 0f16 	cmp.w	fp, #22
 80046d2:	d857      	bhi.n	8004784 <_dtoa_r+0x234>
 80046d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80046d8:	4b5a      	ldr	r3, [pc, #360]	; (8004844 <_dtoa_r+0x2f4>)
 80046da:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80046de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e2:	f7fc f96b 	bl	80009bc <__aeabi_dcmplt>
 80046e6:	2800      	cmp	r0, #0
 80046e8:	d04e      	beq.n	8004788 <_dtoa_r+0x238>
 80046ea:	2300      	movs	r3, #0
 80046ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80046f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80046f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80046f4:	1b1b      	subs	r3, r3, r4
 80046f6:	1e5a      	subs	r2, r3, #1
 80046f8:	bf46      	itte	mi
 80046fa:	f1c3 0901 	rsbmi	r9, r3, #1
 80046fe:	2300      	movmi	r3, #0
 8004700:	f04f 0900 	movpl.w	r9, #0
 8004704:	9209      	str	r2, [sp, #36]	; 0x24
 8004706:	bf48      	it	mi
 8004708:	9309      	strmi	r3, [sp, #36]	; 0x24
 800470a:	f1bb 0f00 	cmp.w	fp, #0
 800470e:	db3d      	blt.n	800478c <_dtoa_r+0x23c>
 8004710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004712:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8004716:	445b      	add	r3, fp
 8004718:	9309      	str	r3, [sp, #36]	; 0x24
 800471a:	2300      	movs	r3, #0
 800471c:	930a      	str	r3, [sp, #40]	; 0x28
 800471e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004720:	2b09      	cmp	r3, #9
 8004722:	d867      	bhi.n	80047f4 <_dtoa_r+0x2a4>
 8004724:	2b05      	cmp	r3, #5
 8004726:	bfc4      	itt	gt
 8004728:	3b04      	subgt	r3, #4
 800472a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800472c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800472e:	bfc8      	it	gt
 8004730:	2400      	movgt	r4, #0
 8004732:	f1a3 0302 	sub.w	r3, r3, #2
 8004736:	bfd8      	it	le
 8004738:	2401      	movle	r4, #1
 800473a:	2b03      	cmp	r3, #3
 800473c:	f200 8086 	bhi.w	800484c <_dtoa_r+0x2fc>
 8004740:	e8df f003 	tbb	[pc, r3]
 8004744:	5637392c 	.word	0x5637392c
 8004748:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800474c:	441c      	add	r4, r3
 800474e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004752:	2b20      	cmp	r3, #32
 8004754:	bfc1      	itttt	gt
 8004756:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800475a:	fa09 f903 	lslgt.w	r9, r9, r3
 800475e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8004762:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004766:	bfd6      	itet	le
 8004768:	f1c3 0320 	rsble	r3, r3, #32
 800476c:	ea49 0003 	orrgt.w	r0, r9, r3
 8004770:	fa06 f003 	lslle.w	r0, r6, r3
 8004774:	f7fb fe36 	bl	80003e4 <__aeabi_ui2d>
 8004778:	2201      	movs	r2, #1
 800477a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800477e:	3c01      	subs	r4, #1
 8004780:	9213      	str	r2, [sp, #76]	; 0x4c
 8004782:	e76f      	b.n	8004664 <_dtoa_r+0x114>
 8004784:	2301      	movs	r3, #1
 8004786:	e7b3      	b.n	80046f0 <_dtoa_r+0x1a0>
 8004788:	900f      	str	r0, [sp, #60]	; 0x3c
 800478a:	e7b2      	b.n	80046f2 <_dtoa_r+0x1a2>
 800478c:	f1cb 0300 	rsb	r3, fp, #0
 8004790:	930a      	str	r3, [sp, #40]	; 0x28
 8004792:	2300      	movs	r3, #0
 8004794:	eba9 090b 	sub.w	r9, r9, fp
 8004798:	930e      	str	r3, [sp, #56]	; 0x38
 800479a:	e7c0      	b.n	800471e <_dtoa_r+0x1ce>
 800479c:	2300      	movs	r3, #0
 800479e:	930b      	str	r3, [sp, #44]	; 0x2c
 80047a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	dc55      	bgt.n	8004852 <_dtoa_r+0x302>
 80047a6:	2301      	movs	r3, #1
 80047a8:	461a      	mov	r2, r3
 80047aa:	9306      	str	r3, [sp, #24]
 80047ac:	9308      	str	r3, [sp, #32]
 80047ae:	9223      	str	r2, [sp, #140]	; 0x8c
 80047b0:	e00b      	b.n	80047ca <_dtoa_r+0x27a>
 80047b2:	2301      	movs	r3, #1
 80047b4:	e7f3      	b.n	800479e <_dtoa_r+0x24e>
 80047b6:	2300      	movs	r3, #0
 80047b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80047ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80047bc:	445b      	add	r3, fp
 80047be:	9306      	str	r3, [sp, #24]
 80047c0:	3301      	adds	r3, #1
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	9308      	str	r3, [sp, #32]
 80047c6:	bfb8      	it	lt
 80047c8:	2301      	movlt	r3, #1
 80047ca:	2100      	movs	r1, #0
 80047cc:	2204      	movs	r2, #4
 80047ce:	69e8      	ldr	r0, [r5, #28]
 80047d0:	f102 0614 	add.w	r6, r2, #20
 80047d4:	429e      	cmp	r6, r3
 80047d6:	d940      	bls.n	800485a <_dtoa_r+0x30a>
 80047d8:	6041      	str	r1, [r0, #4]
 80047da:	4628      	mov	r0, r5
 80047dc:	f000 fd98 	bl	8005310 <_Balloc>
 80047e0:	9003      	str	r0, [sp, #12]
 80047e2:	2800      	cmp	r0, #0
 80047e4:	d13c      	bne.n	8004860 <_dtoa_r+0x310>
 80047e6:	4602      	mov	r2, r0
 80047e8:	f240 11af 	movw	r1, #431	; 0x1af
 80047ec:	4b16      	ldr	r3, [pc, #88]	; (8004848 <_dtoa_r+0x2f8>)
 80047ee:	e6c3      	b.n	8004578 <_dtoa_r+0x28>
 80047f0:	2301      	movs	r3, #1
 80047f2:	e7e1      	b.n	80047b8 <_dtoa_r+0x268>
 80047f4:	2401      	movs	r4, #1
 80047f6:	2300      	movs	r3, #0
 80047f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80047fa:	9322      	str	r3, [sp, #136]	; 0x88
 80047fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004800:	2200      	movs	r2, #0
 8004802:	9306      	str	r3, [sp, #24]
 8004804:	9308      	str	r3, [sp, #32]
 8004806:	2312      	movs	r3, #18
 8004808:	e7d1      	b.n	80047ae <_dtoa_r+0x25e>
 800480a:	bf00      	nop
 800480c:	f3af 8000 	nop.w
 8004810:	636f4361 	.word	0x636f4361
 8004814:	3fd287a7 	.word	0x3fd287a7
 8004818:	8b60c8b3 	.word	0x8b60c8b3
 800481c:	3fc68a28 	.word	0x3fc68a28
 8004820:	509f79fb 	.word	0x509f79fb
 8004824:	3fd34413 	.word	0x3fd34413
 8004828:	080067a7 	.word	0x080067a7
 800482c:	080067be 	.word	0x080067be
 8004830:	7ff00000 	.word	0x7ff00000
 8004834:	080067a3 	.word	0x080067a3
 8004838:	0800679a 	.word	0x0800679a
 800483c:	08006777 	.word	0x08006777
 8004840:	3ff80000 	.word	0x3ff80000
 8004844:	080068a8 	.word	0x080068a8
 8004848:	08006816 	.word	0x08006816
 800484c:	2301      	movs	r3, #1
 800484e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004850:	e7d4      	b.n	80047fc <_dtoa_r+0x2ac>
 8004852:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004854:	9306      	str	r3, [sp, #24]
 8004856:	9308      	str	r3, [sp, #32]
 8004858:	e7b7      	b.n	80047ca <_dtoa_r+0x27a>
 800485a:	3101      	adds	r1, #1
 800485c:	0052      	lsls	r2, r2, #1
 800485e:	e7b7      	b.n	80047d0 <_dtoa_r+0x280>
 8004860:	69eb      	ldr	r3, [r5, #28]
 8004862:	9a03      	ldr	r2, [sp, #12]
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	9b08      	ldr	r3, [sp, #32]
 8004868:	2b0e      	cmp	r3, #14
 800486a:	f200 80a8 	bhi.w	80049be <_dtoa_r+0x46e>
 800486e:	2c00      	cmp	r4, #0
 8004870:	f000 80a5 	beq.w	80049be <_dtoa_r+0x46e>
 8004874:	f1bb 0f00 	cmp.w	fp, #0
 8004878:	dd34      	ble.n	80048e4 <_dtoa_r+0x394>
 800487a:	4b9a      	ldr	r3, [pc, #616]	; (8004ae4 <_dtoa_r+0x594>)
 800487c:	f00b 020f 	and.w	r2, fp, #15
 8004880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004884:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004888:	e9d3 3400 	ldrd	r3, r4, [r3]
 800488c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004890:	ea4f 142b 	mov.w	r4, fp, asr #4
 8004894:	d016      	beq.n	80048c4 <_dtoa_r+0x374>
 8004896:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800489a:	4b93      	ldr	r3, [pc, #588]	; (8004ae8 <_dtoa_r+0x598>)
 800489c:	2703      	movs	r7, #3
 800489e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80048a2:	f7fb ff43 	bl	800072c <__aeabi_ddiv>
 80048a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048aa:	f004 040f 	and.w	r4, r4, #15
 80048ae:	4e8e      	ldr	r6, [pc, #568]	; (8004ae8 <_dtoa_r+0x598>)
 80048b0:	b954      	cbnz	r4, 80048c8 <_dtoa_r+0x378>
 80048b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80048b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048ba:	f7fb ff37 	bl	800072c <__aeabi_ddiv>
 80048be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048c2:	e029      	b.n	8004918 <_dtoa_r+0x3c8>
 80048c4:	2702      	movs	r7, #2
 80048c6:	e7f2      	b.n	80048ae <_dtoa_r+0x35e>
 80048c8:	07e1      	lsls	r1, r4, #31
 80048ca:	d508      	bpl.n	80048de <_dtoa_r+0x38e>
 80048cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80048d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80048d4:	f7fb fe00 	bl	80004d8 <__aeabi_dmul>
 80048d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80048dc:	3701      	adds	r7, #1
 80048de:	1064      	asrs	r4, r4, #1
 80048e0:	3608      	adds	r6, #8
 80048e2:	e7e5      	b.n	80048b0 <_dtoa_r+0x360>
 80048e4:	f000 80a5 	beq.w	8004a32 <_dtoa_r+0x4e2>
 80048e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80048ec:	f1cb 0400 	rsb	r4, fp, #0
 80048f0:	4b7c      	ldr	r3, [pc, #496]	; (8004ae4 <_dtoa_r+0x594>)
 80048f2:	f004 020f 	and.w	r2, r4, #15
 80048f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fe:	f7fb fdeb 	bl	80004d8 <__aeabi_dmul>
 8004902:	2702      	movs	r7, #2
 8004904:	2300      	movs	r3, #0
 8004906:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800490a:	4e77      	ldr	r6, [pc, #476]	; (8004ae8 <_dtoa_r+0x598>)
 800490c:	1124      	asrs	r4, r4, #4
 800490e:	2c00      	cmp	r4, #0
 8004910:	f040 8084 	bne.w	8004a1c <_dtoa_r+0x4cc>
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1d2      	bne.n	80048be <_dtoa_r+0x36e>
 8004918:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800491c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004920:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 8087 	beq.w	8004a36 <_dtoa_r+0x4e6>
 8004928:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800492c:	2200      	movs	r2, #0
 800492e:	4b6f      	ldr	r3, [pc, #444]	; (8004aec <_dtoa_r+0x59c>)
 8004930:	f7fc f844 	bl	80009bc <__aeabi_dcmplt>
 8004934:	2800      	cmp	r0, #0
 8004936:	d07e      	beq.n	8004a36 <_dtoa_r+0x4e6>
 8004938:	9b08      	ldr	r3, [sp, #32]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d07b      	beq.n	8004a36 <_dtoa_r+0x4e6>
 800493e:	9b06      	ldr	r3, [sp, #24]
 8004940:	2b00      	cmp	r3, #0
 8004942:	dd38      	ble.n	80049b6 <_dtoa_r+0x466>
 8004944:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004948:	2200      	movs	r2, #0
 800494a:	4b69      	ldr	r3, [pc, #420]	; (8004af0 <_dtoa_r+0x5a0>)
 800494c:	f7fb fdc4 	bl	80004d8 <__aeabi_dmul>
 8004950:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004954:	9c06      	ldr	r4, [sp, #24]
 8004956:	f10b 38ff 	add.w	r8, fp, #4294967295
 800495a:	3701      	adds	r7, #1
 800495c:	4638      	mov	r0, r7
 800495e:	f7fb fd51 	bl	8000404 <__aeabi_i2d>
 8004962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004966:	f7fb fdb7 	bl	80004d8 <__aeabi_dmul>
 800496a:	2200      	movs	r2, #0
 800496c:	4b61      	ldr	r3, [pc, #388]	; (8004af4 <_dtoa_r+0x5a4>)
 800496e:	f7fb fbfd 	bl	800016c <__adddf3>
 8004972:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004976:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800497a:	9611      	str	r6, [sp, #68]	; 0x44
 800497c:	2c00      	cmp	r4, #0
 800497e:	d15d      	bne.n	8004a3c <_dtoa_r+0x4ec>
 8004980:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004984:	2200      	movs	r2, #0
 8004986:	4b5c      	ldr	r3, [pc, #368]	; (8004af8 <_dtoa_r+0x5a8>)
 8004988:	f7fb fbee 	bl	8000168 <__aeabi_dsub>
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004994:	4633      	mov	r3, r6
 8004996:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004998:	f7fc f82e 	bl	80009f8 <__aeabi_dcmpgt>
 800499c:	2800      	cmp	r0, #0
 800499e:	f040 8295 	bne.w	8004ecc <_dtoa_r+0x97c>
 80049a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80049a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80049ac:	f7fc f806 	bl	80009bc <__aeabi_dcmplt>
 80049b0:	2800      	cmp	r0, #0
 80049b2:	f040 8289 	bne.w	8004ec8 <_dtoa_r+0x978>
 80049b6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80049ba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80049be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f2c0 8151 	blt.w	8004c68 <_dtoa_r+0x718>
 80049c6:	f1bb 0f0e 	cmp.w	fp, #14
 80049ca:	f300 814d 	bgt.w	8004c68 <_dtoa_r+0x718>
 80049ce:	4b45      	ldr	r3, [pc, #276]	; (8004ae4 <_dtoa_r+0x594>)
 80049d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80049d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049d8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80049dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f280 80da 	bge.w	8004b98 <_dtoa_r+0x648>
 80049e4:	9b08      	ldr	r3, [sp, #32]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f300 80d6 	bgt.w	8004b98 <_dtoa_r+0x648>
 80049ec:	f040 826b 	bne.w	8004ec6 <_dtoa_r+0x976>
 80049f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049f4:	2200      	movs	r2, #0
 80049f6:	4b40      	ldr	r3, [pc, #256]	; (8004af8 <_dtoa_r+0x5a8>)
 80049f8:	f7fb fd6e 	bl	80004d8 <__aeabi_dmul>
 80049fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a00:	f7fb fff0 	bl	80009e4 <__aeabi_dcmpge>
 8004a04:	9c08      	ldr	r4, [sp, #32]
 8004a06:	4626      	mov	r6, r4
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	f040 8241 	bne.w	8004e90 <_dtoa_r+0x940>
 8004a0e:	2331      	movs	r3, #49	; 0x31
 8004a10:	9f03      	ldr	r7, [sp, #12]
 8004a12:	f10b 0b01 	add.w	fp, fp, #1
 8004a16:	f807 3b01 	strb.w	r3, [r7], #1
 8004a1a:	e23d      	b.n	8004e98 <_dtoa_r+0x948>
 8004a1c:	07e2      	lsls	r2, r4, #31
 8004a1e:	d505      	bpl.n	8004a2c <_dtoa_r+0x4dc>
 8004a20:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004a24:	f7fb fd58 	bl	80004d8 <__aeabi_dmul>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	3701      	adds	r7, #1
 8004a2c:	1064      	asrs	r4, r4, #1
 8004a2e:	3608      	adds	r6, #8
 8004a30:	e76d      	b.n	800490e <_dtoa_r+0x3be>
 8004a32:	2702      	movs	r7, #2
 8004a34:	e770      	b.n	8004918 <_dtoa_r+0x3c8>
 8004a36:	46d8      	mov	r8, fp
 8004a38:	9c08      	ldr	r4, [sp, #32]
 8004a3a:	e78f      	b.n	800495c <_dtoa_r+0x40c>
 8004a3c:	9903      	ldr	r1, [sp, #12]
 8004a3e:	4b29      	ldr	r3, [pc, #164]	; (8004ae4 <_dtoa_r+0x594>)
 8004a40:	4421      	add	r1, r4
 8004a42:	9112      	str	r1, [sp, #72]	; 0x48
 8004a44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a46:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004a4a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004a4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004a52:	2900      	cmp	r1, #0
 8004a54:	d054      	beq.n	8004b00 <_dtoa_r+0x5b0>
 8004a56:	2000      	movs	r0, #0
 8004a58:	4928      	ldr	r1, [pc, #160]	; (8004afc <_dtoa_r+0x5ac>)
 8004a5a:	f7fb fe67 	bl	800072c <__aeabi_ddiv>
 8004a5e:	463b      	mov	r3, r7
 8004a60:	4632      	mov	r2, r6
 8004a62:	f7fb fb81 	bl	8000168 <__aeabi_dsub>
 8004a66:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a6a:	9f03      	ldr	r7, [sp, #12]
 8004a6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a70:	f7fb ffe2 	bl	8000a38 <__aeabi_d2iz>
 8004a74:	4604      	mov	r4, r0
 8004a76:	f7fb fcc5 	bl	8000404 <__aeabi_i2d>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a82:	f7fb fb71 	bl	8000168 <__aeabi_dsub>
 8004a86:	4602      	mov	r2, r0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	3430      	adds	r4, #48	; 0x30
 8004a8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a94:	f807 4b01 	strb.w	r4, [r7], #1
 8004a98:	f7fb ff90 	bl	80009bc <__aeabi_dcmplt>
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	d173      	bne.n	8004b88 <_dtoa_r+0x638>
 8004aa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	4911      	ldr	r1, [pc, #68]	; (8004aec <_dtoa_r+0x59c>)
 8004aa8:	f7fb fb5e 	bl	8000168 <__aeabi_dsub>
 8004aac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ab0:	f7fb ff84 	bl	80009bc <__aeabi_dcmplt>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	f040 80b6 	bne.w	8004c26 <_dtoa_r+0x6d6>
 8004aba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004abc:	429f      	cmp	r7, r3
 8004abe:	f43f af7a 	beq.w	80049b6 <_dtoa_r+0x466>
 8004ac2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <_dtoa_r+0x5a0>)
 8004aca:	f7fb fd05 	bl	80004d8 <__aeabi_dmul>
 8004ace:	2200      	movs	r2, #0
 8004ad0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ad4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ad8:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <_dtoa_r+0x5a0>)
 8004ada:	f7fb fcfd 	bl	80004d8 <__aeabi_dmul>
 8004ade:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ae2:	e7c3      	b.n	8004a6c <_dtoa_r+0x51c>
 8004ae4:	080068a8 	.word	0x080068a8
 8004ae8:	08006880 	.word	0x08006880
 8004aec:	3ff00000 	.word	0x3ff00000
 8004af0:	40240000 	.word	0x40240000
 8004af4:	401c0000 	.word	0x401c0000
 8004af8:	40140000 	.word	0x40140000
 8004afc:	3fe00000 	.word	0x3fe00000
 8004b00:	4630      	mov	r0, r6
 8004b02:	4639      	mov	r1, r7
 8004b04:	f7fb fce8 	bl	80004d8 <__aeabi_dmul>
 8004b08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b0e:	9c03      	ldr	r4, [sp, #12]
 8004b10:	9314      	str	r3, [sp, #80]	; 0x50
 8004b12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b16:	f7fb ff8f 	bl	8000a38 <__aeabi_d2iz>
 8004b1a:	9015      	str	r0, [sp, #84]	; 0x54
 8004b1c:	f7fb fc72 	bl	8000404 <__aeabi_i2d>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b28:	f7fb fb1e 	bl	8000168 <__aeabi_dsub>
 8004b2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b2e:	4606      	mov	r6, r0
 8004b30:	3330      	adds	r3, #48	; 0x30
 8004b32:	f804 3b01 	strb.w	r3, [r4], #1
 8004b36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b38:	460f      	mov	r7, r1
 8004b3a:	429c      	cmp	r4, r3
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	d124      	bne.n	8004b8c <_dtoa_r+0x63c>
 8004b42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b46:	4baf      	ldr	r3, [pc, #700]	; (8004e04 <_dtoa_r+0x8b4>)
 8004b48:	f7fb fb10 	bl	800016c <__adddf3>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4630      	mov	r0, r6
 8004b52:	4639      	mov	r1, r7
 8004b54:	f7fb ff50 	bl	80009f8 <__aeabi_dcmpgt>
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	d163      	bne.n	8004c24 <_dtoa_r+0x6d4>
 8004b5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004b60:	2000      	movs	r0, #0
 8004b62:	49a8      	ldr	r1, [pc, #672]	; (8004e04 <_dtoa_r+0x8b4>)
 8004b64:	f7fb fb00 	bl	8000168 <__aeabi_dsub>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4630      	mov	r0, r6
 8004b6e:	4639      	mov	r1, r7
 8004b70:	f7fb ff24 	bl	80009bc <__aeabi_dcmplt>
 8004b74:	2800      	cmp	r0, #0
 8004b76:	f43f af1e 	beq.w	80049b6 <_dtoa_r+0x466>
 8004b7a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004b7c:	1e7b      	subs	r3, r7, #1
 8004b7e:	9314      	str	r3, [sp, #80]	; 0x50
 8004b80:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004b84:	2b30      	cmp	r3, #48	; 0x30
 8004b86:	d0f8      	beq.n	8004b7a <_dtoa_r+0x62a>
 8004b88:	46c3      	mov	fp, r8
 8004b8a:	e03b      	b.n	8004c04 <_dtoa_r+0x6b4>
 8004b8c:	4b9e      	ldr	r3, [pc, #632]	; (8004e08 <_dtoa_r+0x8b8>)
 8004b8e:	f7fb fca3 	bl	80004d8 <__aeabi_dmul>
 8004b92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b96:	e7bc      	b.n	8004b12 <_dtoa_r+0x5c2>
 8004b98:	9f03      	ldr	r7, [sp, #12]
 8004b9a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004b9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	4649      	mov	r1, r9
 8004ba6:	f7fb fdc1 	bl	800072c <__aeabi_ddiv>
 8004baa:	f7fb ff45 	bl	8000a38 <__aeabi_d2iz>
 8004bae:	4604      	mov	r4, r0
 8004bb0:	f7fb fc28 	bl	8000404 <__aeabi_i2d>
 8004bb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004bb8:	f7fb fc8e 	bl	80004d8 <__aeabi_dmul>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4640      	mov	r0, r8
 8004bc2:	4649      	mov	r1, r9
 8004bc4:	f7fb fad0 	bl	8000168 <__aeabi_dsub>
 8004bc8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004bcc:	f807 6b01 	strb.w	r6, [r7], #1
 8004bd0:	9e03      	ldr	r6, [sp, #12]
 8004bd2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004bd6:	1bbe      	subs	r6, r7, r6
 8004bd8:	45b4      	cmp	ip, r6
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	d136      	bne.n	8004c4e <_dtoa_r+0x6fe>
 8004be0:	f7fb fac4 	bl	800016c <__adddf3>
 8004be4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004be8:	4680      	mov	r8, r0
 8004bea:	4689      	mov	r9, r1
 8004bec:	f7fb ff04 	bl	80009f8 <__aeabi_dcmpgt>
 8004bf0:	bb58      	cbnz	r0, 8004c4a <_dtoa_r+0x6fa>
 8004bf2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004bf6:	4640      	mov	r0, r8
 8004bf8:	4649      	mov	r1, r9
 8004bfa:	f7fb fed5 	bl	80009a8 <__aeabi_dcmpeq>
 8004bfe:	b108      	cbz	r0, 8004c04 <_dtoa_r+0x6b4>
 8004c00:	07e3      	lsls	r3, r4, #31
 8004c02:	d422      	bmi.n	8004c4a <_dtoa_r+0x6fa>
 8004c04:	4651      	mov	r1, sl
 8004c06:	4628      	mov	r0, r5
 8004c08:	f000 fbc2 	bl	8005390 <_Bfree>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004c10:	703b      	strb	r3, [r7, #0]
 8004c12:	f10b 0301 	add.w	r3, fp, #1
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f43f ace6 	beq.w	80045ec <_dtoa_r+0x9c>
 8004c20:	601f      	str	r7, [r3, #0]
 8004c22:	e4e3      	b.n	80045ec <_dtoa_r+0x9c>
 8004c24:	4627      	mov	r7, r4
 8004c26:	463b      	mov	r3, r7
 8004c28:	461f      	mov	r7, r3
 8004c2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c2e:	2a39      	cmp	r2, #57	; 0x39
 8004c30:	d107      	bne.n	8004c42 <_dtoa_r+0x6f2>
 8004c32:	9a03      	ldr	r2, [sp, #12]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d1f7      	bne.n	8004c28 <_dtoa_r+0x6d8>
 8004c38:	2230      	movs	r2, #48	; 0x30
 8004c3a:	9903      	ldr	r1, [sp, #12]
 8004c3c:	f108 0801 	add.w	r8, r8, #1
 8004c40:	700a      	strb	r2, [r1, #0]
 8004c42:	781a      	ldrb	r2, [r3, #0]
 8004c44:	3201      	adds	r2, #1
 8004c46:	701a      	strb	r2, [r3, #0]
 8004c48:	e79e      	b.n	8004b88 <_dtoa_r+0x638>
 8004c4a:	46d8      	mov	r8, fp
 8004c4c:	e7eb      	b.n	8004c26 <_dtoa_r+0x6d6>
 8004c4e:	2200      	movs	r2, #0
 8004c50:	4b6d      	ldr	r3, [pc, #436]	; (8004e08 <_dtoa_r+0x8b8>)
 8004c52:	f7fb fc41 	bl	80004d8 <__aeabi_dmul>
 8004c56:	2200      	movs	r2, #0
 8004c58:	2300      	movs	r3, #0
 8004c5a:	4680      	mov	r8, r0
 8004c5c:	4689      	mov	r9, r1
 8004c5e:	f7fb fea3 	bl	80009a8 <__aeabi_dcmpeq>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	d09b      	beq.n	8004b9e <_dtoa_r+0x64e>
 8004c66:	e7cd      	b.n	8004c04 <_dtoa_r+0x6b4>
 8004c68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c6a:	2a00      	cmp	r2, #0
 8004c6c:	f000 80c4 	beq.w	8004df8 <_dtoa_r+0x8a8>
 8004c70:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004c72:	2a01      	cmp	r2, #1
 8004c74:	f300 80a8 	bgt.w	8004dc8 <_dtoa_r+0x878>
 8004c78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004c7a:	2a00      	cmp	r2, #0
 8004c7c:	f000 80a0 	beq.w	8004dc0 <_dtoa_r+0x870>
 8004c80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004c84:	464f      	mov	r7, r9
 8004c86:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004c88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	441a      	add	r2, r3
 8004c8e:	4628      	mov	r0, r5
 8004c90:	4499      	add	r9, r3
 8004c92:	9209      	str	r2, [sp, #36]	; 0x24
 8004c94:	f000 fc32 	bl	80054fc <__i2b>
 8004c98:	4606      	mov	r6, r0
 8004c9a:	b15f      	cbz	r7, 8004cb4 <_dtoa_r+0x764>
 8004c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	dd08      	ble.n	8004cb4 <_dtoa_r+0x764>
 8004ca2:	42bb      	cmp	r3, r7
 8004ca4:	bfa8      	it	ge
 8004ca6:	463b      	movge	r3, r7
 8004ca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004caa:	eba9 0903 	sub.w	r9, r9, r3
 8004cae:	1aff      	subs	r7, r7, r3
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cb6:	b1f3      	cbz	r3, 8004cf6 <_dtoa_r+0x7a6>
 8004cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 80a0 	beq.w	8004e00 <_dtoa_r+0x8b0>
 8004cc0:	2c00      	cmp	r4, #0
 8004cc2:	dd10      	ble.n	8004ce6 <_dtoa_r+0x796>
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	4622      	mov	r2, r4
 8004cc8:	4628      	mov	r0, r5
 8004cca:	f000 fcd5 	bl	8005678 <__pow5mult>
 8004cce:	4652      	mov	r2, sl
 8004cd0:	4601      	mov	r1, r0
 8004cd2:	4606      	mov	r6, r0
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	f000 fc27 	bl	8005528 <__multiply>
 8004cda:	4680      	mov	r8, r0
 8004cdc:	4651      	mov	r1, sl
 8004cde:	4628      	mov	r0, r5
 8004ce0:	f000 fb56 	bl	8005390 <_Bfree>
 8004ce4:	46c2      	mov	sl, r8
 8004ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ce8:	1b1a      	subs	r2, r3, r4
 8004cea:	d004      	beq.n	8004cf6 <_dtoa_r+0x7a6>
 8004cec:	4651      	mov	r1, sl
 8004cee:	4628      	mov	r0, r5
 8004cf0:	f000 fcc2 	bl	8005678 <__pow5mult>
 8004cf4:	4682      	mov	sl, r0
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	f000 fbff 	bl	80054fc <__i2b>
 8004cfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d00:	4604      	mov	r4, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f340 8082 	ble.w	8004e0c <_dtoa_r+0x8bc>
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4601      	mov	r1, r0
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	f000 fcb3 	bl	8005678 <__pow5mult>
 8004d12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d14:	4604      	mov	r4, r0
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	dd7b      	ble.n	8004e12 <_dtoa_r+0x8c2>
 8004d1a:	f04f 0800 	mov.w	r8, #0
 8004d1e:	6923      	ldr	r3, [r4, #16]
 8004d20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004d24:	6918      	ldr	r0, [r3, #16]
 8004d26:	f000 fb9b 	bl	8005460 <__hi0bits>
 8004d2a:	f1c0 0020 	rsb	r0, r0, #32
 8004d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d30:	4418      	add	r0, r3
 8004d32:	f010 001f 	ands.w	r0, r0, #31
 8004d36:	f000 8092 	beq.w	8004e5e <_dtoa_r+0x90e>
 8004d3a:	f1c0 0320 	rsb	r3, r0, #32
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	f340 8085 	ble.w	8004e4e <_dtoa_r+0x8fe>
 8004d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d46:	f1c0 001c 	rsb	r0, r0, #28
 8004d4a:	4403      	add	r3, r0
 8004d4c:	4481      	add	r9, r0
 8004d4e:	4407      	add	r7, r0
 8004d50:	9309      	str	r3, [sp, #36]	; 0x24
 8004d52:	f1b9 0f00 	cmp.w	r9, #0
 8004d56:	dd05      	ble.n	8004d64 <_dtoa_r+0x814>
 8004d58:	4651      	mov	r1, sl
 8004d5a:	464a      	mov	r2, r9
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	f000 fce5 	bl	800572c <__lshift>
 8004d62:	4682      	mov	sl, r0
 8004d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	dd05      	ble.n	8004d76 <_dtoa_r+0x826>
 8004d6a:	4621      	mov	r1, r4
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f000 fcdc 	bl	800572c <__lshift>
 8004d74:	4604      	mov	r4, r0
 8004d76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d072      	beq.n	8004e62 <_dtoa_r+0x912>
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	4650      	mov	r0, sl
 8004d80:	f000 fd40 	bl	8005804 <__mcmp>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	da6c      	bge.n	8004e62 <_dtoa_r+0x912>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	4651      	mov	r1, sl
 8004d8c:	220a      	movs	r2, #10
 8004d8e:	4628      	mov	r0, r5
 8004d90:	f000 fb20 	bl	80053d4 <__multadd>
 8004d94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d96:	4682      	mov	sl, r0
 8004d98:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 81ac 	beq.w	80050fa <_dtoa_r+0xbaa>
 8004da2:	2300      	movs	r3, #0
 8004da4:	4631      	mov	r1, r6
 8004da6:	220a      	movs	r2, #10
 8004da8:	4628      	mov	r0, r5
 8004daa:	f000 fb13 	bl	80053d4 <__multadd>
 8004dae:	9b06      	ldr	r3, [sp, #24]
 8004db0:	4606      	mov	r6, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f300 8093 	bgt.w	8004ede <_dtoa_r+0x98e>
 8004db8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	dc59      	bgt.n	8004e72 <_dtoa_r+0x922>
 8004dbe:	e08e      	b.n	8004ede <_dtoa_r+0x98e>
 8004dc0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004dc2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004dc6:	e75d      	b.n	8004c84 <_dtoa_r+0x734>
 8004dc8:	9b08      	ldr	r3, [sp, #32]
 8004dca:	1e5c      	subs	r4, r3, #1
 8004dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dce:	42a3      	cmp	r3, r4
 8004dd0:	bfbf      	itttt	lt
 8004dd2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004dd4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004dd6:	1ae3      	sublt	r3, r4, r3
 8004dd8:	18d2      	addlt	r2, r2, r3
 8004dda:	bfa8      	it	ge
 8004ddc:	1b1c      	subge	r4, r3, r4
 8004dde:	9b08      	ldr	r3, [sp, #32]
 8004de0:	bfbe      	ittt	lt
 8004de2:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004de4:	920e      	strlt	r2, [sp, #56]	; 0x38
 8004de6:	2400      	movlt	r4, #0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bfb5      	itete	lt
 8004dec:	eba9 0703 	sublt.w	r7, r9, r3
 8004df0:	464f      	movge	r7, r9
 8004df2:	2300      	movlt	r3, #0
 8004df4:	9b08      	ldrge	r3, [sp, #32]
 8004df6:	e747      	b.n	8004c88 <_dtoa_r+0x738>
 8004df8:	464f      	mov	r7, r9
 8004dfa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004dfc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004dfe:	e74c      	b.n	8004c9a <_dtoa_r+0x74a>
 8004e00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e02:	e773      	b.n	8004cec <_dtoa_r+0x79c>
 8004e04:	3fe00000 	.word	0x3fe00000
 8004e08:	40240000 	.word	0x40240000
 8004e0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	dc18      	bgt.n	8004e44 <_dtoa_r+0x8f4>
 8004e12:	9b04      	ldr	r3, [sp, #16]
 8004e14:	b9b3      	cbnz	r3, 8004e44 <_dtoa_r+0x8f4>
 8004e16:	9b05      	ldr	r3, [sp, #20]
 8004e18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e1c:	b993      	cbnz	r3, 8004e44 <_dtoa_r+0x8f4>
 8004e1e:	9b05      	ldr	r3, [sp, #20]
 8004e20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e24:	0d1b      	lsrs	r3, r3, #20
 8004e26:	051b      	lsls	r3, r3, #20
 8004e28:	b17b      	cbz	r3, 8004e4a <_dtoa_r+0x8fa>
 8004e2a:	f04f 0801 	mov.w	r8, #1
 8004e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e30:	f109 0901 	add.w	r9, r9, #1
 8004e34:	3301      	adds	r3, #1
 8004e36:	9309      	str	r3, [sp, #36]	; 0x24
 8004e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f47f af6f 	bne.w	8004d1e <_dtoa_r+0x7ce>
 8004e40:	2001      	movs	r0, #1
 8004e42:	e774      	b.n	8004d2e <_dtoa_r+0x7de>
 8004e44:	f04f 0800 	mov.w	r8, #0
 8004e48:	e7f6      	b.n	8004e38 <_dtoa_r+0x8e8>
 8004e4a:	4698      	mov	r8, r3
 8004e4c:	e7f4      	b.n	8004e38 <_dtoa_r+0x8e8>
 8004e4e:	d080      	beq.n	8004d52 <_dtoa_r+0x802>
 8004e50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e52:	331c      	adds	r3, #28
 8004e54:	441a      	add	r2, r3
 8004e56:	4499      	add	r9, r3
 8004e58:	441f      	add	r7, r3
 8004e5a:	9209      	str	r2, [sp, #36]	; 0x24
 8004e5c:	e779      	b.n	8004d52 <_dtoa_r+0x802>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	e7f6      	b.n	8004e50 <_dtoa_r+0x900>
 8004e62:	9b08      	ldr	r3, [sp, #32]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	dc34      	bgt.n	8004ed2 <_dtoa_r+0x982>
 8004e68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	dd31      	ble.n	8004ed2 <_dtoa_r+0x982>
 8004e6e:	9b08      	ldr	r3, [sp, #32]
 8004e70:	9306      	str	r3, [sp, #24]
 8004e72:	9b06      	ldr	r3, [sp, #24]
 8004e74:	b963      	cbnz	r3, 8004e90 <_dtoa_r+0x940>
 8004e76:	4621      	mov	r1, r4
 8004e78:	2205      	movs	r2, #5
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	f000 faaa 	bl	80053d4 <__multadd>
 8004e80:	4601      	mov	r1, r0
 8004e82:	4604      	mov	r4, r0
 8004e84:	4650      	mov	r0, sl
 8004e86:	f000 fcbd 	bl	8005804 <__mcmp>
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	f73f adbf 	bgt.w	8004a0e <_dtoa_r+0x4be>
 8004e90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e92:	9f03      	ldr	r7, [sp, #12]
 8004e94:	ea6f 0b03 	mvn.w	fp, r3
 8004e98:	f04f 0800 	mov.w	r8, #0
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f000 fa76 	bl	8005390 <_Bfree>
 8004ea4:	2e00      	cmp	r6, #0
 8004ea6:	f43f aead 	beq.w	8004c04 <_dtoa_r+0x6b4>
 8004eaa:	f1b8 0f00 	cmp.w	r8, #0
 8004eae:	d005      	beq.n	8004ebc <_dtoa_r+0x96c>
 8004eb0:	45b0      	cmp	r8, r6
 8004eb2:	d003      	beq.n	8004ebc <_dtoa_r+0x96c>
 8004eb4:	4641      	mov	r1, r8
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	f000 fa6a 	bl	8005390 <_Bfree>
 8004ebc:	4631      	mov	r1, r6
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	f000 fa66 	bl	8005390 <_Bfree>
 8004ec4:	e69e      	b.n	8004c04 <_dtoa_r+0x6b4>
 8004ec6:	2400      	movs	r4, #0
 8004ec8:	4626      	mov	r6, r4
 8004eca:	e7e1      	b.n	8004e90 <_dtoa_r+0x940>
 8004ecc:	46c3      	mov	fp, r8
 8004ece:	4626      	mov	r6, r4
 8004ed0:	e59d      	b.n	8004a0e <_dtoa_r+0x4be>
 8004ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 80c8 	beq.w	800506a <_dtoa_r+0xb1a>
 8004eda:	9b08      	ldr	r3, [sp, #32]
 8004edc:	9306      	str	r3, [sp, #24]
 8004ede:	2f00      	cmp	r7, #0
 8004ee0:	dd05      	ble.n	8004eee <_dtoa_r+0x99e>
 8004ee2:	4631      	mov	r1, r6
 8004ee4:	463a      	mov	r2, r7
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f000 fc20 	bl	800572c <__lshift>
 8004eec:	4606      	mov	r6, r0
 8004eee:	f1b8 0f00 	cmp.w	r8, #0
 8004ef2:	d05b      	beq.n	8004fac <_dtoa_r+0xa5c>
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	6871      	ldr	r1, [r6, #4]
 8004ef8:	f000 fa0a 	bl	8005310 <_Balloc>
 8004efc:	4607      	mov	r7, r0
 8004efe:	b928      	cbnz	r0, 8004f0c <_dtoa_r+0x9bc>
 8004f00:	4602      	mov	r2, r0
 8004f02:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004f06:	4b81      	ldr	r3, [pc, #516]	; (800510c <_dtoa_r+0xbbc>)
 8004f08:	f7ff bb36 	b.w	8004578 <_dtoa_r+0x28>
 8004f0c:	6932      	ldr	r2, [r6, #16]
 8004f0e:	f106 010c 	add.w	r1, r6, #12
 8004f12:	3202      	adds	r2, #2
 8004f14:	0092      	lsls	r2, r2, #2
 8004f16:	300c      	adds	r0, #12
 8004f18:	f000 ff9e 	bl	8005e58 <memcpy>
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	4639      	mov	r1, r7
 8004f20:	4628      	mov	r0, r5
 8004f22:	f000 fc03 	bl	800572c <__lshift>
 8004f26:	46b0      	mov	r8, r6
 8004f28:	4606      	mov	r6, r0
 8004f2a:	9b03      	ldr	r3, [sp, #12]
 8004f2c:	9a03      	ldr	r2, [sp, #12]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	9308      	str	r3, [sp, #32]
 8004f32:	9b06      	ldr	r3, [sp, #24]
 8004f34:	4413      	add	r3, r2
 8004f36:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f38:	9b04      	ldr	r3, [sp, #16]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	930a      	str	r3, [sp, #40]	; 0x28
 8004f40:	9b08      	ldr	r3, [sp, #32]
 8004f42:	4621      	mov	r1, r4
 8004f44:	3b01      	subs	r3, #1
 8004f46:	4650      	mov	r0, sl
 8004f48:	9304      	str	r3, [sp, #16]
 8004f4a:	f7ff fa76 	bl	800443a <quorem>
 8004f4e:	4641      	mov	r1, r8
 8004f50:	9006      	str	r0, [sp, #24]
 8004f52:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004f56:	4650      	mov	r0, sl
 8004f58:	f000 fc54 	bl	8005804 <__mcmp>
 8004f5c:	4632      	mov	r2, r6
 8004f5e:	9009      	str	r0, [sp, #36]	; 0x24
 8004f60:	4621      	mov	r1, r4
 8004f62:	4628      	mov	r0, r5
 8004f64:	f000 fc6a 	bl	800583c <__mdiff>
 8004f68:	68c2      	ldr	r2, [r0, #12]
 8004f6a:	4607      	mov	r7, r0
 8004f6c:	bb02      	cbnz	r2, 8004fb0 <_dtoa_r+0xa60>
 8004f6e:	4601      	mov	r1, r0
 8004f70:	4650      	mov	r0, sl
 8004f72:	f000 fc47 	bl	8005804 <__mcmp>
 8004f76:	4602      	mov	r2, r0
 8004f78:	4639      	mov	r1, r7
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	920c      	str	r2, [sp, #48]	; 0x30
 8004f7e:	f000 fa07 	bl	8005390 <_Bfree>
 8004f82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f86:	9f08      	ldr	r7, [sp, #32]
 8004f88:	ea43 0102 	orr.w	r1, r3, r2
 8004f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f8e:	4319      	orrs	r1, r3
 8004f90:	d110      	bne.n	8004fb4 <_dtoa_r+0xa64>
 8004f92:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004f96:	d029      	beq.n	8004fec <_dtoa_r+0xa9c>
 8004f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	dd02      	ble.n	8004fa4 <_dtoa_r+0xa54>
 8004f9e:	9b06      	ldr	r3, [sp, #24]
 8004fa0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004fa4:	9b04      	ldr	r3, [sp, #16]
 8004fa6:	f883 9000 	strb.w	r9, [r3]
 8004faa:	e777      	b.n	8004e9c <_dtoa_r+0x94c>
 8004fac:	4630      	mov	r0, r6
 8004fae:	e7ba      	b.n	8004f26 <_dtoa_r+0x9d6>
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	e7e1      	b.n	8004f78 <_dtoa_r+0xa28>
 8004fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	db04      	blt.n	8004fc4 <_dtoa_r+0xa74>
 8004fba:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004fbc:	430b      	orrs	r3, r1
 8004fbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004fc0:	430b      	orrs	r3, r1
 8004fc2:	d120      	bne.n	8005006 <_dtoa_r+0xab6>
 8004fc4:	2a00      	cmp	r2, #0
 8004fc6:	dded      	ble.n	8004fa4 <_dtoa_r+0xa54>
 8004fc8:	4651      	mov	r1, sl
 8004fca:	2201      	movs	r2, #1
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f000 fbad 	bl	800572c <__lshift>
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	4682      	mov	sl, r0
 8004fd6:	f000 fc15 	bl	8005804 <__mcmp>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	dc03      	bgt.n	8004fe6 <_dtoa_r+0xa96>
 8004fde:	d1e1      	bne.n	8004fa4 <_dtoa_r+0xa54>
 8004fe0:	f019 0f01 	tst.w	r9, #1
 8004fe4:	d0de      	beq.n	8004fa4 <_dtoa_r+0xa54>
 8004fe6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004fea:	d1d8      	bne.n	8004f9e <_dtoa_r+0xa4e>
 8004fec:	2339      	movs	r3, #57	; 0x39
 8004fee:	9a04      	ldr	r2, [sp, #16]
 8004ff0:	7013      	strb	r3, [r2, #0]
 8004ff2:	463b      	mov	r3, r7
 8004ff4:	461f      	mov	r7, r3
 8004ff6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	2a39      	cmp	r2, #57	; 0x39
 8004ffe:	d06b      	beq.n	80050d8 <_dtoa_r+0xb88>
 8005000:	3201      	adds	r2, #1
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	e74a      	b.n	8004e9c <_dtoa_r+0x94c>
 8005006:	2a00      	cmp	r2, #0
 8005008:	dd07      	ble.n	800501a <_dtoa_r+0xaca>
 800500a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800500e:	d0ed      	beq.n	8004fec <_dtoa_r+0xa9c>
 8005010:	9a04      	ldr	r2, [sp, #16]
 8005012:	f109 0301 	add.w	r3, r9, #1
 8005016:	7013      	strb	r3, [r2, #0]
 8005018:	e740      	b.n	8004e9c <_dtoa_r+0x94c>
 800501a:	9b08      	ldr	r3, [sp, #32]
 800501c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800501e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005022:	4293      	cmp	r3, r2
 8005024:	d042      	beq.n	80050ac <_dtoa_r+0xb5c>
 8005026:	4651      	mov	r1, sl
 8005028:	2300      	movs	r3, #0
 800502a:	220a      	movs	r2, #10
 800502c:	4628      	mov	r0, r5
 800502e:	f000 f9d1 	bl	80053d4 <__multadd>
 8005032:	45b0      	cmp	r8, r6
 8005034:	4682      	mov	sl, r0
 8005036:	f04f 0300 	mov.w	r3, #0
 800503a:	f04f 020a 	mov.w	r2, #10
 800503e:	4641      	mov	r1, r8
 8005040:	4628      	mov	r0, r5
 8005042:	d107      	bne.n	8005054 <_dtoa_r+0xb04>
 8005044:	f000 f9c6 	bl	80053d4 <__multadd>
 8005048:	4680      	mov	r8, r0
 800504a:	4606      	mov	r6, r0
 800504c:	9b08      	ldr	r3, [sp, #32]
 800504e:	3301      	adds	r3, #1
 8005050:	9308      	str	r3, [sp, #32]
 8005052:	e775      	b.n	8004f40 <_dtoa_r+0x9f0>
 8005054:	f000 f9be 	bl	80053d4 <__multadd>
 8005058:	4631      	mov	r1, r6
 800505a:	4680      	mov	r8, r0
 800505c:	2300      	movs	r3, #0
 800505e:	220a      	movs	r2, #10
 8005060:	4628      	mov	r0, r5
 8005062:	f000 f9b7 	bl	80053d4 <__multadd>
 8005066:	4606      	mov	r6, r0
 8005068:	e7f0      	b.n	800504c <_dtoa_r+0xafc>
 800506a:	9b08      	ldr	r3, [sp, #32]
 800506c:	9306      	str	r3, [sp, #24]
 800506e:	9f03      	ldr	r7, [sp, #12]
 8005070:	4621      	mov	r1, r4
 8005072:	4650      	mov	r0, sl
 8005074:	f7ff f9e1 	bl	800443a <quorem>
 8005078:	9b03      	ldr	r3, [sp, #12]
 800507a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800507e:	f807 9b01 	strb.w	r9, [r7], #1
 8005082:	1afa      	subs	r2, r7, r3
 8005084:	9b06      	ldr	r3, [sp, #24]
 8005086:	4293      	cmp	r3, r2
 8005088:	dd07      	ble.n	800509a <_dtoa_r+0xb4a>
 800508a:	4651      	mov	r1, sl
 800508c:	2300      	movs	r3, #0
 800508e:	220a      	movs	r2, #10
 8005090:	4628      	mov	r0, r5
 8005092:	f000 f99f 	bl	80053d4 <__multadd>
 8005096:	4682      	mov	sl, r0
 8005098:	e7ea      	b.n	8005070 <_dtoa_r+0xb20>
 800509a:	9b06      	ldr	r3, [sp, #24]
 800509c:	f04f 0800 	mov.w	r8, #0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	bfcc      	ite	gt
 80050a4:	461f      	movgt	r7, r3
 80050a6:	2701      	movle	r7, #1
 80050a8:	9b03      	ldr	r3, [sp, #12]
 80050aa:	441f      	add	r7, r3
 80050ac:	4651      	mov	r1, sl
 80050ae:	2201      	movs	r2, #1
 80050b0:	4628      	mov	r0, r5
 80050b2:	f000 fb3b 	bl	800572c <__lshift>
 80050b6:	4621      	mov	r1, r4
 80050b8:	4682      	mov	sl, r0
 80050ba:	f000 fba3 	bl	8005804 <__mcmp>
 80050be:	2800      	cmp	r0, #0
 80050c0:	dc97      	bgt.n	8004ff2 <_dtoa_r+0xaa2>
 80050c2:	d102      	bne.n	80050ca <_dtoa_r+0xb7a>
 80050c4:	f019 0f01 	tst.w	r9, #1
 80050c8:	d193      	bne.n	8004ff2 <_dtoa_r+0xaa2>
 80050ca:	463b      	mov	r3, r7
 80050cc:	461f      	mov	r7, r3
 80050ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80050d2:	2a30      	cmp	r2, #48	; 0x30
 80050d4:	d0fa      	beq.n	80050cc <_dtoa_r+0xb7c>
 80050d6:	e6e1      	b.n	8004e9c <_dtoa_r+0x94c>
 80050d8:	9a03      	ldr	r2, [sp, #12]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d18a      	bne.n	8004ff4 <_dtoa_r+0xaa4>
 80050de:	2331      	movs	r3, #49	; 0x31
 80050e0:	f10b 0b01 	add.w	fp, fp, #1
 80050e4:	e797      	b.n	8005016 <_dtoa_r+0xac6>
 80050e6:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <_dtoa_r+0xbc0>)
 80050e8:	f7ff ba9f 	b.w	800462a <_dtoa_r+0xda>
 80050ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f47f aa77 	bne.w	80045e2 <_dtoa_r+0x92>
 80050f4:	4b07      	ldr	r3, [pc, #28]	; (8005114 <_dtoa_r+0xbc4>)
 80050f6:	f7ff ba98 	b.w	800462a <_dtoa_r+0xda>
 80050fa:	9b06      	ldr	r3, [sp, #24]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	dcb6      	bgt.n	800506e <_dtoa_r+0xb1e>
 8005100:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005102:	2b02      	cmp	r3, #2
 8005104:	f73f aeb5 	bgt.w	8004e72 <_dtoa_r+0x922>
 8005108:	e7b1      	b.n	800506e <_dtoa_r+0xb1e>
 800510a:	bf00      	nop
 800510c:	08006816 	.word	0x08006816
 8005110:	08006776 	.word	0x08006776
 8005114:	0800679a 	.word	0x0800679a

08005118 <_free_r>:
 8005118:	b538      	push	{r3, r4, r5, lr}
 800511a:	4605      	mov	r5, r0
 800511c:	2900      	cmp	r1, #0
 800511e:	d040      	beq.n	80051a2 <_free_r+0x8a>
 8005120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005124:	1f0c      	subs	r4, r1, #4
 8005126:	2b00      	cmp	r3, #0
 8005128:	bfb8      	it	lt
 800512a:	18e4      	addlt	r4, r4, r3
 800512c:	f000 f8e4 	bl	80052f8 <__malloc_lock>
 8005130:	4a1c      	ldr	r2, [pc, #112]	; (80051a4 <_free_r+0x8c>)
 8005132:	6813      	ldr	r3, [r2, #0]
 8005134:	b933      	cbnz	r3, 8005144 <_free_r+0x2c>
 8005136:	6063      	str	r3, [r4, #4]
 8005138:	6014      	str	r4, [r2, #0]
 800513a:	4628      	mov	r0, r5
 800513c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005140:	f000 b8e0 	b.w	8005304 <__malloc_unlock>
 8005144:	42a3      	cmp	r3, r4
 8005146:	d908      	bls.n	800515a <_free_r+0x42>
 8005148:	6820      	ldr	r0, [r4, #0]
 800514a:	1821      	adds	r1, r4, r0
 800514c:	428b      	cmp	r3, r1
 800514e:	bf01      	itttt	eq
 8005150:	6819      	ldreq	r1, [r3, #0]
 8005152:	685b      	ldreq	r3, [r3, #4]
 8005154:	1809      	addeq	r1, r1, r0
 8005156:	6021      	streq	r1, [r4, #0]
 8005158:	e7ed      	b.n	8005136 <_free_r+0x1e>
 800515a:	461a      	mov	r2, r3
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	b10b      	cbz	r3, 8005164 <_free_r+0x4c>
 8005160:	42a3      	cmp	r3, r4
 8005162:	d9fa      	bls.n	800515a <_free_r+0x42>
 8005164:	6811      	ldr	r1, [r2, #0]
 8005166:	1850      	adds	r0, r2, r1
 8005168:	42a0      	cmp	r0, r4
 800516a:	d10b      	bne.n	8005184 <_free_r+0x6c>
 800516c:	6820      	ldr	r0, [r4, #0]
 800516e:	4401      	add	r1, r0
 8005170:	1850      	adds	r0, r2, r1
 8005172:	4283      	cmp	r3, r0
 8005174:	6011      	str	r1, [r2, #0]
 8005176:	d1e0      	bne.n	800513a <_free_r+0x22>
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	4408      	add	r0, r1
 800517e:	6010      	str	r0, [r2, #0]
 8005180:	6053      	str	r3, [r2, #4]
 8005182:	e7da      	b.n	800513a <_free_r+0x22>
 8005184:	d902      	bls.n	800518c <_free_r+0x74>
 8005186:	230c      	movs	r3, #12
 8005188:	602b      	str	r3, [r5, #0]
 800518a:	e7d6      	b.n	800513a <_free_r+0x22>
 800518c:	6820      	ldr	r0, [r4, #0]
 800518e:	1821      	adds	r1, r4, r0
 8005190:	428b      	cmp	r3, r1
 8005192:	bf01      	itttt	eq
 8005194:	6819      	ldreq	r1, [r3, #0]
 8005196:	685b      	ldreq	r3, [r3, #4]
 8005198:	1809      	addeq	r1, r1, r0
 800519a:	6021      	streq	r1, [r4, #0]
 800519c:	6063      	str	r3, [r4, #4]
 800519e:	6054      	str	r4, [r2, #4]
 80051a0:	e7cb      	b.n	800513a <_free_r+0x22>
 80051a2:	bd38      	pop	{r3, r4, r5, pc}
 80051a4:	200003e0 	.word	0x200003e0

080051a8 <malloc>:
 80051a8:	4b02      	ldr	r3, [pc, #8]	; (80051b4 <malloc+0xc>)
 80051aa:	4601      	mov	r1, r0
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	f000 b823 	b.w	80051f8 <_malloc_r>
 80051b2:	bf00      	nop
 80051b4:	20000064 	.word	0x20000064

080051b8 <sbrk_aligned>:
 80051b8:	b570      	push	{r4, r5, r6, lr}
 80051ba:	4e0e      	ldr	r6, [pc, #56]	; (80051f4 <sbrk_aligned+0x3c>)
 80051bc:	460c      	mov	r4, r1
 80051be:	6831      	ldr	r1, [r6, #0]
 80051c0:	4605      	mov	r5, r0
 80051c2:	b911      	cbnz	r1, 80051ca <sbrk_aligned+0x12>
 80051c4:	f000 fe38 	bl	8005e38 <_sbrk_r>
 80051c8:	6030      	str	r0, [r6, #0]
 80051ca:	4621      	mov	r1, r4
 80051cc:	4628      	mov	r0, r5
 80051ce:	f000 fe33 	bl	8005e38 <_sbrk_r>
 80051d2:	1c43      	adds	r3, r0, #1
 80051d4:	d00a      	beq.n	80051ec <sbrk_aligned+0x34>
 80051d6:	1cc4      	adds	r4, r0, #3
 80051d8:	f024 0403 	bic.w	r4, r4, #3
 80051dc:	42a0      	cmp	r0, r4
 80051de:	d007      	beq.n	80051f0 <sbrk_aligned+0x38>
 80051e0:	1a21      	subs	r1, r4, r0
 80051e2:	4628      	mov	r0, r5
 80051e4:	f000 fe28 	bl	8005e38 <_sbrk_r>
 80051e8:	3001      	adds	r0, #1
 80051ea:	d101      	bne.n	80051f0 <sbrk_aligned+0x38>
 80051ec:	f04f 34ff 	mov.w	r4, #4294967295
 80051f0:	4620      	mov	r0, r4
 80051f2:	bd70      	pop	{r4, r5, r6, pc}
 80051f4:	200003e4 	.word	0x200003e4

080051f8 <_malloc_r>:
 80051f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051fc:	1ccd      	adds	r5, r1, #3
 80051fe:	f025 0503 	bic.w	r5, r5, #3
 8005202:	3508      	adds	r5, #8
 8005204:	2d0c      	cmp	r5, #12
 8005206:	bf38      	it	cc
 8005208:	250c      	movcc	r5, #12
 800520a:	2d00      	cmp	r5, #0
 800520c:	4607      	mov	r7, r0
 800520e:	db01      	blt.n	8005214 <_malloc_r+0x1c>
 8005210:	42a9      	cmp	r1, r5
 8005212:	d905      	bls.n	8005220 <_malloc_r+0x28>
 8005214:	230c      	movs	r3, #12
 8005216:	2600      	movs	r6, #0
 8005218:	603b      	str	r3, [r7, #0]
 800521a:	4630      	mov	r0, r6
 800521c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005220:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80052f4 <_malloc_r+0xfc>
 8005224:	f000 f868 	bl	80052f8 <__malloc_lock>
 8005228:	f8d8 3000 	ldr.w	r3, [r8]
 800522c:	461c      	mov	r4, r3
 800522e:	bb5c      	cbnz	r4, 8005288 <_malloc_r+0x90>
 8005230:	4629      	mov	r1, r5
 8005232:	4638      	mov	r0, r7
 8005234:	f7ff ffc0 	bl	80051b8 <sbrk_aligned>
 8005238:	1c43      	adds	r3, r0, #1
 800523a:	4604      	mov	r4, r0
 800523c:	d155      	bne.n	80052ea <_malloc_r+0xf2>
 800523e:	f8d8 4000 	ldr.w	r4, [r8]
 8005242:	4626      	mov	r6, r4
 8005244:	2e00      	cmp	r6, #0
 8005246:	d145      	bne.n	80052d4 <_malloc_r+0xdc>
 8005248:	2c00      	cmp	r4, #0
 800524a:	d048      	beq.n	80052de <_malloc_r+0xe6>
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	4631      	mov	r1, r6
 8005250:	4638      	mov	r0, r7
 8005252:	eb04 0903 	add.w	r9, r4, r3
 8005256:	f000 fdef 	bl	8005e38 <_sbrk_r>
 800525a:	4581      	cmp	r9, r0
 800525c:	d13f      	bne.n	80052de <_malloc_r+0xe6>
 800525e:	6821      	ldr	r1, [r4, #0]
 8005260:	4638      	mov	r0, r7
 8005262:	1a6d      	subs	r5, r5, r1
 8005264:	4629      	mov	r1, r5
 8005266:	f7ff ffa7 	bl	80051b8 <sbrk_aligned>
 800526a:	3001      	adds	r0, #1
 800526c:	d037      	beq.n	80052de <_malloc_r+0xe6>
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	442b      	add	r3, r5
 8005272:	6023      	str	r3, [r4, #0]
 8005274:	f8d8 3000 	ldr.w	r3, [r8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d038      	beq.n	80052ee <_malloc_r+0xf6>
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	42a2      	cmp	r2, r4
 8005280:	d12b      	bne.n	80052da <_malloc_r+0xe2>
 8005282:	2200      	movs	r2, #0
 8005284:	605a      	str	r2, [r3, #4]
 8005286:	e00f      	b.n	80052a8 <_malloc_r+0xb0>
 8005288:	6822      	ldr	r2, [r4, #0]
 800528a:	1b52      	subs	r2, r2, r5
 800528c:	d41f      	bmi.n	80052ce <_malloc_r+0xd6>
 800528e:	2a0b      	cmp	r2, #11
 8005290:	d917      	bls.n	80052c2 <_malloc_r+0xca>
 8005292:	1961      	adds	r1, r4, r5
 8005294:	42a3      	cmp	r3, r4
 8005296:	6025      	str	r5, [r4, #0]
 8005298:	bf18      	it	ne
 800529a:	6059      	strne	r1, [r3, #4]
 800529c:	6863      	ldr	r3, [r4, #4]
 800529e:	bf08      	it	eq
 80052a0:	f8c8 1000 	streq.w	r1, [r8]
 80052a4:	5162      	str	r2, [r4, r5]
 80052a6:	604b      	str	r3, [r1, #4]
 80052a8:	4638      	mov	r0, r7
 80052aa:	f104 060b 	add.w	r6, r4, #11
 80052ae:	f000 f829 	bl	8005304 <__malloc_unlock>
 80052b2:	f026 0607 	bic.w	r6, r6, #7
 80052b6:	1d23      	adds	r3, r4, #4
 80052b8:	1af2      	subs	r2, r6, r3
 80052ba:	d0ae      	beq.n	800521a <_malloc_r+0x22>
 80052bc:	1b9b      	subs	r3, r3, r6
 80052be:	50a3      	str	r3, [r4, r2]
 80052c0:	e7ab      	b.n	800521a <_malloc_r+0x22>
 80052c2:	42a3      	cmp	r3, r4
 80052c4:	6862      	ldr	r2, [r4, #4]
 80052c6:	d1dd      	bne.n	8005284 <_malloc_r+0x8c>
 80052c8:	f8c8 2000 	str.w	r2, [r8]
 80052cc:	e7ec      	b.n	80052a8 <_malloc_r+0xb0>
 80052ce:	4623      	mov	r3, r4
 80052d0:	6864      	ldr	r4, [r4, #4]
 80052d2:	e7ac      	b.n	800522e <_malloc_r+0x36>
 80052d4:	4634      	mov	r4, r6
 80052d6:	6876      	ldr	r6, [r6, #4]
 80052d8:	e7b4      	b.n	8005244 <_malloc_r+0x4c>
 80052da:	4613      	mov	r3, r2
 80052dc:	e7cc      	b.n	8005278 <_malloc_r+0x80>
 80052de:	230c      	movs	r3, #12
 80052e0:	4638      	mov	r0, r7
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	f000 f80e 	bl	8005304 <__malloc_unlock>
 80052e8:	e797      	b.n	800521a <_malloc_r+0x22>
 80052ea:	6025      	str	r5, [r4, #0]
 80052ec:	e7dc      	b.n	80052a8 <_malloc_r+0xb0>
 80052ee:	605b      	str	r3, [r3, #4]
 80052f0:	deff      	udf	#255	; 0xff
 80052f2:	bf00      	nop
 80052f4:	200003e0 	.word	0x200003e0

080052f8 <__malloc_lock>:
 80052f8:	4801      	ldr	r0, [pc, #4]	; (8005300 <__malloc_lock+0x8>)
 80052fa:	f7ff b88e 	b.w	800441a <__retarget_lock_acquire_recursive>
 80052fe:	bf00      	nop
 8005300:	200003dc 	.word	0x200003dc

08005304 <__malloc_unlock>:
 8005304:	4801      	ldr	r0, [pc, #4]	; (800530c <__malloc_unlock+0x8>)
 8005306:	f7ff b889 	b.w	800441c <__retarget_lock_release_recursive>
 800530a:	bf00      	nop
 800530c:	200003dc 	.word	0x200003dc

08005310 <_Balloc>:
 8005310:	b570      	push	{r4, r5, r6, lr}
 8005312:	69c6      	ldr	r6, [r0, #28]
 8005314:	4604      	mov	r4, r0
 8005316:	460d      	mov	r5, r1
 8005318:	b976      	cbnz	r6, 8005338 <_Balloc+0x28>
 800531a:	2010      	movs	r0, #16
 800531c:	f7ff ff44 	bl	80051a8 <malloc>
 8005320:	4602      	mov	r2, r0
 8005322:	61e0      	str	r0, [r4, #28]
 8005324:	b920      	cbnz	r0, 8005330 <_Balloc+0x20>
 8005326:	216b      	movs	r1, #107	; 0x6b
 8005328:	4b17      	ldr	r3, [pc, #92]	; (8005388 <_Balloc+0x78>)
 800532a:	4818      	ldr	r0, [pc, #96]	; (800538c <_Balloc+0x7c>)
 800532c:	f000 fda2 	bl	8005e74 <__assert_func>
 8005330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005334:	6006      	str	r6, [r0, #0]
 8005336:	60c6      	str	r6, [r0, #12]
 8005338:	69e6      	ldr	r6, [r4, #28]
 800533a:	68f3      	ldr	r3, [r6, #12]
 800533c:	b183      	cbz	r3, 8005360 <_Balloc+0x50>
 800533e:	69e3      	ldr	r3, [r4, #28]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005346:	b9b8      	cbnz	r0, 8005378 <_Balloc+0x68>
 8005348:	2101      	movs	r1, #1
 800534a:	fa01 f605 	lsl.w	r6, r1, r5
 800534e:	1d72      	adds	r2, r6, #5
 8005350:	4620      	mov	r0, r4
 8005352:	0092      	lsls	r2, r2, #2
 8005354:	f000 fdac 	bl	8005eb0 <_calloc_r>
 8005358:	b160      	cbz	r0, 8005374 <_Balloc+0x64>
 800535a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800535e:	e00e      	b.n	800537e <_Balloc+0x6e>
 8005360:	2221      	movs	r2, #33	; 0x21
 8005362:	2104      	movs	r1, #4
 8005364:	4620      	mov	r0, r4
 8005366:	f000 fda3 	bl	8005eb0 <_calloc_r>
 800536a:	69e3      	ldr	r3, [r4, #28]
 800536c:	60f0      	str	r0, [r6, #12]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e4      	bne.n	800533e <_Balloc+0x2e>
 8005374:	2000      	movs	r0, #0
 8005376:	bd70      	pop	{r4, r5, r6, pc}
 8005378:	6802      	ldr	r2, [r0, #0]
 800537a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800537e:	2300      	movs	r3, #0
 8005380:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005384:	e7f7      	b.n	8005376 <_Balloc+0x66>
 8005386:	bf00      	nop
 8005388:	080067a7 	.word	0x080067a7
 800538c:	08006827 	.word	0x08006827

08005390 <_Bfree>:
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	69c6      	ldr	r6, [r0, #28]
 8005394:	4605      	mov	r5, r0
 8005396:	460c      	mov	r4, r1
 8005398:	b976      	cbnz	r6, 80053b8 <_Bfree+0x28>
 800539a:	2010      	movs	r0, #16
 800539c:	f7ff ff04 	bl	80051a8 <malloc>
 80053a0:	4602      	mov	r2, r0
 80053a2:	61e8      	str	r0, [r5, #28]
 80053a4:	b920      	cbnz	r0, 80053b0 <_Bfree+0x20>
 80053a6:	218f      	movs	r1, #143	; 0x8f
 80053a8:	4b08      	ldr	r3, [pc, #32]	; (80053cc <_Bfree+0x3c>)
 80053aa:	4809      	ldr	r0, [pc, #36]	; (80053d0 <_Bfree+0x40>)
 80053ac:	f000 fd62 	bl	8005e74 <__assert_func>
 80053b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80053b4:	6006      	str	r6, [r0, #0]
 80053b6:	60c6      	str	r6, [r0, #12]
 80053b8:	b13c      	cbz	r4, 80053ca <_Bfree+0x3a>
 80053ba:	69eb      	ldr	r3, [r5, #28]
 80053bc:	6862      	ldr	r2, [r4, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053c4:	6021      	str	r1, [r4, #0]
 80053c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80053ca:	bd70      	pop	{r4, r5, r6, pc}
 80053cc:	080067a7 	.word	0x080067a7
 80053d0:	08006827 	.word	0x08006827

080053d4 <__multadd>:
 80053d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053d8:	4607      	mov	r7, r0
 80053da:	460c      	mov	r4, r1
 80053dc:	461e      	mov	r6, r3
 80053de:	2000      	movs	r0, #0
 80053e0:	690d      	ldr	r5, [r1, #16]
 80053e2:	f101 0c14 	add.w	ip, r1, #20
 80053e6:	f8dc 3000 	ldr.w	r3, [ip]
 80053ea:	3001      	adds	r0, #1
 80053ec:	b299      	uxth	r1, r3
 80053ee:	fb02 6101 	mla	r1, r2, r1, r6
 80053f2:	0c1e      	lsrs	r6, r3, #16
 80053f4:	0c0b      	lsrs	r3, r1, #16
 80053f6:	fb02 3306 	mla	r3, r2, r6, r3
 80053fa:	b289      	uxth	r1, r1
 80053fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005400:	4285      	cmp	r5, r0
 8005402:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005406:	f84c 1b04 	str.w	r1, [ip], #4
 800540a:	dcec      	bgt.n	80053e6 <__multadd+0x12>
 800540c:	b30e      	cbz	r6, 8005452 <__multadd+0x7e>
 800540e:	68a3      	ldr	r3, [r4, #8]
 8005410:	42ab      	cmp	r3, r5
 8005412:	dc19      	bgt.n	8005448 <__multadd+0x74>
 8005414:	6861      	ldr	r1, [r4, #4]
 8005416:	4638      	mov	r0, r7
 8005418:	3101      	adds	r1, #1
 800541a:	f7ff ff79 	bl	8005310 <_Balloc>
 800541e:	4680      	mov	r8, r0
 8005420:	b928      	cbnz	r0, 800542e <__multadd+0x5a>
 8005422:	4602      	mov	r2, r0
 8005424:	21ba      	movs	r1, #186	; 0xba
 8005426:	4b0c      	ldr	r3, [pc, #48]	; (8005458 <__multadd+0x84>)
 8005428:	480c      	ldr	r0, [pc, #48]	; (800545c <__multadd+0x88>)
 800542a:	f000 fd23 	bl	8005e74 <__assert_func>
 800542e:	6922      	ldr	r2, [r4, #16]
 8005430:	f104 010c 	add.w	r1, r4, #12
 8005434:	3202      	adds	r2, #2
 8005436:	0092      	lsls	r2, r2, #2
 8005438:	300c      	adds	r0, #12
 800543a:	f000 fd0d 	bl	8005e58 <memcpy>
 800543e:	4621      	mov	r1, r4
 8005440:	4638      	mov	r0, r7
 8005442:	f7ff ffa5 	bl	8005390 <_Bfree>
 8005446:	4644      	mov	r4, r8
 8005448:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800544c:	3501      	adds	r5, #1
 800544e:	615e      	str	r6, [r3, #20]
 8005450:	6125      	str	r5, [r4, #16]
 8005452:	4620      	mov	r0, r4
 8005454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005458:	08006816 	.word	0x08006816
 800545c:	08006827 	.word	0x08006827

08005460 <__hi0bits>:
 8005460:	0c02      	lsrs	r2, r0, #16
 8005462:	0412      	lsls	r2, r2, #16
 8005464:	4603      	mov	r3, r0
 8005466:	b9ca      	cbnz	r2, 800549c <__hi0bits+0x3c>
 8005468:	0403      	lsls	r3, r0, #16
 800546a:	2010      	movs	r0, #16
 800546c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005470:	bf04      	itt	eq
 8005472:	021b      	lsleq	r3, r3, #8
 8005474:	3008      	addeq	r0, #8
 8005476:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800547a:	bf04      	itt	eq
 800547c:	011b      	lsleq	r3, r3, #4
 800547e:	3004      	addeq	r0, #4
 8005480:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005484:	bf04      	itt	eq
 8005486:	009b      	lsleq	r3, r3, #2
 8005488:	3002      	addeq	r0, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	db05      	blt.n	800549a <__hi0bits+0x3a>
 800548e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005492:	f100 0001 	add.w	r0, r0, #1
 8005496:	bf08      	it	eq
 8005498:	2020      	moveq	r0, #32
 800549a:	4770      	bx	lr
 800549c:	2000      	movs	r0, #0
 800549e:	e7e5      	b.n	800546c <__hi0bits+0xc>

080054a0 <__lo0bits>:
 80054a0:	6803      	ldr	r3, [r0, #0]
 80054a2:	4602      	mov	r2, r0
 80054a4:	f013 0007 	ands.w	r0, r3, #7
 80054a8:	d00b      	beq.n	80054c2 <__lo0bits+0x22>
 80054aa:	07d9      	lsls	r1, r3, #31
 80054ac:	d421      	bmi.n	80054f2 <__lo0bits+0x52>
 80054ae:	0798      	lsls	r0, r3, #30
 80054b0:	bf49      	itett	mi
 80054b2:	085b      	lsrmi	r3, r3, #1
 80054b4:	089b      	lsrpl	r3, r3, #2
 80054b6:	2001      	movmi	r0, #1
 80054b8:	6013      	strmi	r3, [r2, #0]
 80054ba:	bf5c      	itt	pl
 80054bc:	2002      	movpl	r0, #2
 80054be:	6013      	strpl	r3, [r2, #0]
 80054c0:	4770      	bx	lr
 80054c2:	b299      	uxth	r1, r3
 80054c4:	b909      	cbnz	r1, 80054ca <__lo0bits+0x2a>
 80054c6:	2010      	movs	r0, #16
 80054c8:	0c1b      	lsrs	r3, r3, #16
 80054ca:	b2d9      	uxtb	r1, r3
 80054cc:	b909      	cbnz	r1, 80054d2 <__lo0bits+0x32>
 80054ce:	3008      	adds	r0, #8
 80054d0:	0a1b      	lsrs	r3, r3, #8
 80054d2:	0719      	lsls	r1, r3, #28
 80054d4:	bf04      	itt	eq
 80054d6:	091b      	lsreq	r3, r3, #4
 80054d8:	3004      	addeq	r0, #4
 80054da:	0799      	lsls	r1, r3, #30
 80054dc:	bf04      	itt	eq
 80054de:	089b      	lsreq	r3, r3, #2
 80054e0:	3002      	addeq	r0, #2
 80054e2:	07d9      	lsls	r1, r3, #31
 80054e4:	d403      	bmi.n	80054ee <__lo0bits+0x4e>
 80054e6:	085b      	lsrs	r3, r3, #1
 80054e8:	f100 0001 	add.w	r0, r0, #1
 80054ec:	d003      	beq.n	80054f6 <__lo0bits+0x56>
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	4770      	bx	lr
 80054f2:	2000      	movs	r0, #0
 80054f4:	4770      	bx	lr
 80054f6:	2020      	movs	r0, #32
 80054f8:	4770      	bx	lr
	...

080054fc <__i2b>:
 80054fc:	b510      	push	{r4, lr}
 80054fe:	460c      	mov	r4, r1
 8005500:	2101      	movs	r1, #1
 8005502:	f7ff ff05 	bl	8005310 <_Balloc>
 8005506:	4602      	mov	r2, r0
 8005508:	b928      	cbnz	r0, 8005516 <__i2b+0x1a>
 800550a:	f240 1145 	movw	r1, #325	; 0x145
 800550e:	4b04      	ldr	r3, [pc, #16]	; (8005520 <__i2b+0x24>)
 8005510:	4804      	ldr	r0, [pc, #16]	; (8005524 <__i2b+0x28>)
 8005512:	f000 fcaf 	bl	8005e74 <__assert_func>
 8005516:	2301      	movs	r3, #1
 8005518:	6144      	str	r4, [r0, #20]
 800551a:	6103      	str	r3, [r0, #16]
 800551c:	bd10      	pop	{r4, pc}
 800551e:	bf00      	nop
 8005520:	08006816 	.word	0x08006816
 8005524:	08006827 	.word	0x08006827

08005528 <__multiply>:
 8005528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552c:	4691      	mov	r9, r2
 800552e:	690a      	ldr	r2, [r1, #16]
 8005530:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005534:	460c      	mov	r4, r1
 8005536:	429a      	cmp	r2, r3
 8005538:	bfbe      	ittt	lt
 800553a:	460b      	movlt	r3, r1
 800553c:	464c      	movlt	r4, r9
 800553e:	4699      	movlt	r9, r3
 8005540:	6927      	ldr	r7, [r4, #16]
 8005542:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005546:	68a3      	ldr	r3, [r4, #8]
 8005548:	6861      	ldr	r1, [r4, #4]
 800554a:	eb07 060a 	add.w	r6, r7, sl
 800554e:	42b3      	cmp	r3, r6
 8005550:	b085      	sub	sp, #20
 8005552:	bfb8      	it	lt
 8005554:	3101      	addlt	r1, #1
 8005556:	f7ff fedb 	bl	8005310 <_Balloc>
 800555a:	b930      	cbnz	r0, 800556a <__multiply+0x42>
 800555c:	4602      	mov	r2, r0
 800555e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005562:	4b43      	ldr	r3, [pc, #268]	; (8005670 <__multiply+0x148>)
 8005564:	4843      	ldr	r0, [pc, #268]	; (8005674 <__multiply+0x14c>)
 8005566:	f000 fc85 	bl	8005e74 <__assert_func>
 800556a:	f100 0514 	add.w	r5, r0, #20
 800556e:	462b      	mov	r3, r5
 8005570:	2200      	movs	r2, #0
 8005572:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005576:	4543      	cmp	r3, r8
 8005578:	d321      	bcc.n	80055be <__multiply+0x96>
 800557a:	f104 0314 	add.w	r3, r4, #20
 800557e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005582:	f109 0314 	add.w	r3, r9, #20
 8005586:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800558a:	9202      	str	r2, [sp, #8]
 800558c:	1b3a      	subs	r2, r7, r4
 800558e:	3a15      	subs	r2, #21
 8005590:	f022 0203 	bic.w	r2, r2, #3
 8005594:	3204      	adds	r2, #4
 8005596:	f104 0115 	add.w	r1, r4, #21
 800559a:	428f      	cmp	r7, r1
 800559c:	bf38      	it	cc
 800559e:	2204      	movcc	r2, #4
 80055a0:	9201      	str	r2, [sp, #4]
 80055a2:	9a02      	ldr	r2, [sp, #8]
 80055a4:	9303      	str	r3, [sp, #12]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d80c      	bhi.n	80055c4 <__multiply+0x9c>
 80055aa:	2e00      	cmp	r6, #0
 80055ac:	dd03      	ble.n	80055b6 <__multiply+0x8e>
 80055ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d05a      	beq.n	800566c <__multiply+0x144>
 80055b6:	6106      	str	r6, [r0, #16]
 80055b8:	b005      	add	sp, #20
 80055ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055be:	f843 2b04 	str.w	r2, [r3], #4
 80055c2:	e7d8      	b.n	8005576 <__multiply+0x4e>
 80055c4:	f8b3 a000 	ldrh.w	sl, [r3]
 80055c8:	f1ba 0f00 	cmp.w	sl, #0
 80055cc:	d023      	beq.n	8005616 <__multiply+0xee>
 80055ce:	46a9      	mov	r9, r5
 80055d0:	f04f 0c00 	mov.w	ip, #0
 80055d4:	f104 0e14 	add.w	lr, r4, #20
 80055d8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80055dc:	f8d9 1000 	ldr.w	r1, [r9]
 80055e0:	fa1f fb82 	uxth.w	fp, r2
 80055e4:	b289      	uxth	r1, r1
 80055e6:	fb0a 110b 	mla	r1, sl, fp, r1
 80055ea:	4461      	add	r1, ip
 80055ec:	f8d9 c000 	ldr.w	ip, [r9]
 80055f0:	0c12      	lsrs	r2, r2, #16
 80055f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80055f6:	fb0a c202 	mla	r2, sl, r2, ip
 80055fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80055fe:	b289      	uxth	r1, r1
 8005600:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005604:	4577      	cmp	r7, lr
 8005606:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800560a:	f849 1b04 	str.w	r1, [r9], #4
 800560e:	d8e3      	bhi.n	80055d8 <__multiply+0xb0>
 8005610:	9a01      	ldr	r2, [sp, #4]
 8005612:	f845 c002 	str.w	ip, [r5, r2]
 8005616:	9a03      	ldr	r2, [sp, #12]
 8005618:	3304      	adds	r3, #4
 800561a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800561e:	f1b9 0f00 	cmp.w	r9, #0
 8005622:	d021      	beq.n	8005668 <__multiply+0x140>
 8005624:	46ae      	mov	lr, r5
 8005626:	f04f 0a00 	mov.w	sl, #0
 800562a:	6829      	ldr	r1, [r5, #0]
 800562c:	f104 0c14 	add.w	ip, r4, #20
 8005630:	f8bc b000 	ldrh.w	fp, [ip]
 8005634:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005638:	b289      	uxth	r1, r1
 800563a:	fb09 220b 	mla	r2, r9, fp, r2
 800563e:	4452      	add	r2, sl
 8005640:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005644:	f84e 1b04 	str.w	r1, [lr], #4
 8005648:	f85c 1b04 	ldr.w	r1, [ip], #4
 800564c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005650:	f8be 1000 	ldrh.w	r1, [lr]
 8005654:	4567      	cmp	r7, ip
 8005656:	fb09 110a 	mla	r1, r9, sl, r1
 800565a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800565e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005662:	d8e5      	bhi.n	8005630 <__multiply+0x108>
 8005664:	9a01      	ldr	r2, [sp, #4]
 8005666:	50a9      	str	r1, [r5, r2]
 8005668:	3504      	adds	r5, #4
 800566a:	e79a      	b.n	80055a2 <__multiply+0x7a>
 800566c:	3e01      	subs	r6, #1
 800566e:	e79c      	b.n	80055aa <__multiply+0x82>
 8005670:	08006816 	.word	0x08006816
 8005674:	08006827 	.word	0x08006827

08005678 <__pow5mult>:
 8005678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800567c:	4615      	mov	r5, r2
 800567e:	f012 0203 	ands.w	r2, r2, #3
 8005682:	4606      	mov	r6, r0
 8005684:	460f      	mov	r7, r1
 8005686:	d007      	beq.n	8005698 <__pow5mult+0x20>
 8005688:	4c25      	ldr	r4, [pc, #148]	; (8005720 <__pow5mult+0xa8>)
 800568a:	3a01      	subs	r2, #1
 800568c:	2300      	movs	r3, #0
 800568e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005692:	f7ff fe9f 	bl	80053d4 <__multadd>
 8005696:	4607      	mov	r7, r0
 8005698:	10ad      	asrs	r5, r5, #2
 800569a:	d03d      	beq.n	8005718 <__pow5mult+0xa0>
 800569c:	69f4      	ldr	r4, [r6, #28]
 800569e:	b97c      	cbnz	r4, 80056c0 <__pow5mult+0x48>
 80056a0:	2010      	movs	r0, #16
 80056a2:	f7ff fd81 	bl	80051a8 <malloc>
 80056a6:	4602      	mov	r2, r0
 80056a8:	61f0      	str	r0, [r6, #28]
 80056aa:	b928      	cbnz	r0, 80056b8 <__pow5mult+0x40>
 80056ac:	f240 11b3 	movw	r1, #435	; 0x1b3
 80056b0:	4b1c      	ldr	r3, [pc, #112]	; (8005724 <__pow5mult+0xac>)
 80056b2:	481d      	ldr	r0, [pc, #116]	; (8005728 <__pow5mult+0xb0>)
 80056b4:	f000 fbde 	bl	8005e74 <__assert_func>
 80056b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80056bc:	6004      	str	r4, [r0, #0]
 80056be:	60c4      	str	r4, [r0, #12]
 80056c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80056c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80056c8:	b94c      	cbnz	r4, 80056de <__pow5mult+0x66>
 80056ca:	f240 2171 	movw	r1, #625	; 0x271
 80056ce:	4630      	mov	r0, r6
 80056d0:	f7ff ff14 	bl	80054fc <__i2b>
 80056d4:	2300      	movs	r3, #0
 80056d6:	4604      	mov	r4, r0
 80056d8:	f8c8 0008 	str.w	r0, [r8, #8]
 80056dc:	6003      	str	r3, [r0, #0]
 80056de:	f04f 0900 	mov.w	r9, #0
 80056e2:	07eb      	lsls	r3, r5, #31
 80056e4:	d50a      	bpl.n	80056fc <__pow5mult+0x84>
 80056e6:	4639      	mov	r1, r7
 80056e8:	4622      	mov	r2, r4
 80056ea:	4630      	mov	r0, r6
 80056ec:	f7ff ff1c 	bl	8005528 <__multiply>
 80056f0:	4680      	mov	r8, r0
 80056f2:	4639      	mov	r1, r7
 80056f4:	4630      	mov	r0, r6
 80056f6:	f7ff fe4b 	bl	8005390 <_Bfree>
 80056fa:	4647      	mov	r7, r8
 80056fc:	106d      	asrs	r5, r5, #1
 80056fe:	d00b      	beq.n	8005718 <__pow5mult+0xa0>
 8005700:	6820      	ldr	r0, [r4, #0]
 8005702:	b938      	cbnz	r0, 8005714 <__pow5mult+0x9c>
 8005704:	4622      	mov	r2, r4
 8005706:	4621      	mov	r1, r4
 8005708:	4630      	mov	r0, r6
 800570a:	f7ff ff0d 	bl	8005528 <__multiply>
 800570e:	6020      	str	r0, [r4, #0]
 8005710:	f8c0 9000 	str.w	r9, [r0]
 8005714:	4604      	mov	r4, r0
 8005716:	e7e4      	b.n	80056e2 <__pow5mult+0x6a>
 8005718:	4638      	mov	r0, r7
 800571a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800571e:	bf00      	nop
 8005720:	08006970 	.word	0x08006970
 8005724:	080067a7 	.word	0x080067a7
 8005728:	08006827 	.word	0x08006827

0800572c <__lshift>:
 800572c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005730:	460c      	mov	r4, r1
 8005732:	4607      	mov	r7, r0
 8005734:	4691      	mov	r9, r2
 8005736:	6923      	ldr	r3, [r4, #16]
 8005738:	6849      	ldr	r1, [r1, #4]
 800573a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800573e:	68a3      	ldr	r3, [r4, #8]
 8005740:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005744:	f108 0601 	add.w	r6, r8, #1
 8005748:	42b3      	cmp	r3, r6
 800574a:	db0b      	blt.n	8005764 <__lshift+0x38>
 800574c:	4638      	mov	r0, r7
 800574e:	f7ff fddf 	bl	8005310 <_Balloc>
 8005752:	4605      	mov	r5, r0
 8005754:	b948      	cbnz	r0, 800576a <__lshift+0x3e>
 8005756:	4602      	mov	r2, r0
 8005758:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800575c:	4b27      	ldr	r3, [pc, #156]	; (80057fc <__lshift+0xd0>)
 800575e:	4828      	ldr	r0, [pc, #160]	; (8005800 <__lshift+0xd4>)
 8005760:	f000 fb88 	bl	8005e74 <__assert_func>
 8005764:	3101      	adds	r1, #1
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	e7ee      	b.n	8005748 <__lshift+0x1c>
 800576a:	2300      	movs	r3, #0
 800576c:	f100 0114 	add.w	r1, r0, #20
 8005770:	f100 0210 	add.w	r2, r0, #16
 8005774:	4618      	mov	r0, r3
 8005776:	4553      	cmp	r3, sl
 8005778:	db33      	blt.n	80057e2 <__lshift+0xb6>
 800577a:	6920      	ldr	r0, [r4, #16]
 800577c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005780:	f104 0314 	add.w	r3, r4, #20
 8005784:	f019 091f 	ands.w	r9, r9, #31
 8005788:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800578c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005790:	d02b      	beq.n	80057ea <__lshift+0xbe>
 8005792:	468a      	mov	sl, r1
 8005794:	2200      	movs	r2, #0
 8005796:	f1c9 0e20 	rsb	lr, r9, #32
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	fa00 f009 	lsl.w	r0, r0, r9
 80057a0:	4310      	orrs	r0, r2
 80057a2:	f84a 0b04 	str.w	r0, [sl], #4
 80057a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80057aa:	459c      	cmp	ip, r3
 80057ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80057b0:	d8f3      	bhi.n	800579a <__lshift+0x6e>
 80057b2:	ebac 0304 	sub.w	r3, ip, r4
 80057b6:	3b15      	subs	r3, #21
 80057b8:	f023 0303 	bic.w	r3, r3, #3
 80057bc:	3304      	adds	r3, #4
 80057be:	f104 0015 	add.w	r0, r4, #21
 80057c2:	4584      	cmp	ip, r0
 80057c4:	bf38      	it	cc
 80057c6:	2304      	movcc	r3, #4
 80057c8:	50ca      	str	r2, [r1, r3]
 80057ca:	b10a      	cbz	r2, 80057d0 <__lshift+0xa4>
 80057cc:	f108 0602 	add.w	r6, r8, #2
 80057d0:	3e01      	subs	r6, #1
 80057d2:	4638      	mov	r0, r7
 80057d4:	4621      	mov	r1, r4
 80057d6:	612e      	str	r6, [r5, #16]
 80057d8:	f7ff fdda 	bl	8005390 <_Bfree>
 80057dc:	4628      	mov	r0, r5
 80057de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80057e6:	3301      	adds	r3, #1
 80057e8:	e7c5      	b.n	8005776 <__lshift+0x4a>
 80057ea:	3904      	subs	r1, #4
 80057ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80057f0:	459c      	cmp	ip, r3
 80057f2:	f841 2f04 	str.w	r2, [r1, #4]!
 80057f6:	d8f9      	bhi.n	80057ec <__lshift+0xc0>
 80057f8:	e7ea      	b.n	80057d0 <__lshift+0xa4>
 80057fa:	bf00      	nop
 80057fc:	08006816 	.word	0x08006816
 8005800:	08006827 	.word	0x08006827

08005804 <__mcmp>:
 8005804:	4603      	mov	r3, r0
 8005806:	690a      	ldr	r2, [r1, #16]
 8005808:	6900      	ldr	r0, [r0, #16]
 800580a:	b530      	push	{r4, r5, lr}
 800580c:	1a80      	subs	r0, r0, r2
 800580e:	d10d      	bne.n	800582c <__mcmp+0x28>
 8005810:	3314      	adds	r3, #20
 8005812:	3114      	adds	r1, #20
 8005814:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005818:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800581c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005820:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005824:	4295      	cmp	r5, r2
 8005826:	d002      	beq.n	800582e <__mcmp+0x2a>
 8005828:	d304      	bcc.n	8005834 <__mcmp+0x30>
 800582a:	2001      	movs	r0, #1
 800582c:	bd30      	pop	{r4, r5, pc}
 800582e:	42a3      	cmp	r3, r4
 8005830:	d3f4      	bcc.n	800581c <__mcmp+0x18>
 8005832:	e7fb      	b.n	800582c <__mcmp+0x28>
 8005834:	f04f 30ff 	mov.w	r0, #4294967295
 8005838:	e7f8      	b.n	800582c <__mcmp+0x28>
	...

0800583c <__mdiff>:
 800583c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005840:	460d      	mov	r5, r1
 8005842:	4607      	mov	r7, r0
 8005844:	4611      	mov	r1, r2
 8005846:	4628      	mov	r0, r5
 8005848:	4614      	mov	r4, r2
 800584a:	f7ff ffdb 	bl	8005804 <__mcmp>
 800584e:	1e06      	subs	r6, r0, #0
 8005850:	d111      	bne.n	8005876 <__mdiff+0x3a>
 8005852:	4631      	mov	r1, r6
 8005854:	4638      	mov	r0, r7
 8005856:	f7ff fd5b 	bl	8005310 <_Balloc>
 800585a:	4602      	mov	r2, r0
 800585c:	b928      	cbnz	r0, 800586a <__mdiff+0x2e>
 800585e:	f240 2137 	movw	r1, #567	; 0x237
 8005862:	4b3a      	ldr	r3, [pc, #232]	; (800594c <__mdiff+0x110>)
 8005864:	483a      	ldr	r0, [pc, #232]	; (8005950 <__mdiff+0x114>)
 8005866:	f000 fb05 	bl	8005e74 <__assert_func>
 800586a:	2301      	movs	r3, #1
 800586c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005870:	4610      	mov	r0, r2
 8005872:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005876:	bfa4      	itt	ge
 8005878:	4623      	movge	r3, r4
 800587a:	462c      	movge	r4, r5
 800587c:	4638      	mov	r0, r7
 800587e:	6861      	ldr	r1, [r4, #4]
 8005880:	bfa6      	itte	ge
 8005882:	461d      	movge	r5, r3
 8005884:	2600      	movge	r6, #0
 8005886:	2601      	movlt	r6, #1
 8005888:	f7ff fd42 	bl	8005310 <_Balloc>
 800588c:	4602      	mov	r2, r0
 800588e:	b918      	cbnz	r0, 8005898 <__mdiff+0x5c>
 8005890:	f240 2145 	movw	r1, #581	; 0x245
 8005894:	4b2d      	ldr	r3, [pc, #180]	; (800594c <__mdiff+0x110>)
 8005896:	e7e5      	b.n	8005864 <__mdiff+0x28>
 8005898:	f102 0814 	add.w	r8, r2, #20
 800589c:	46c2      	mov	sl, r8
 800589e:	f04f 0c00 	mov.w	ip, #0
 80058a2:	6927      	ldr	r7, [r4, #16]
 80058a4:	60c6      	str	r6, [r0, #12]
 80058a6:	692e      	ldr	r6, [r5, #16]
 80058a8:	f104 0014 	add.w	r0, r4, #20
 80058ac:	f105 0914 	add.w	r9, r5, #20
 80058b0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80058b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80058b8:	3410      	adds	r4, #16
 80058ba:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80058be:	f859 3b04 	ldr.w	r3, [r9], #4
 80058c2:	fa1f f18b 	uxth.w	r1, fp
 80058c6:	4461      	add	r1, ip
 80058c8:	fa1f fc83 	uxth.w	ip, r3
 80058cc:	0c1b      	lsrs	r3, r3, #16
 80058ce:	eba1 010c 	sub.w	r1, r1, ip
 80058d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80058d6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80058da:	b289      	uxth	r1, r1
 80058dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80058e0:	454e      	cmp	r6, r9
 80058e2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80058e6:	f84a 1b04 	str.w	r1, [sl], #4
 80058ea:	d8e6      	bhi.n	80058ba <__mdiff+0x7e>
 80058ec:	1b73      	subs	r3, r6, r5
 80058ee:	3b15      	subs	r3, #21
 80058f0:	f023 0303 	bic.w	r3, r3, #3
 80058f4:	3515      	adds	r5, #21
 80058f6:	3304      	adds	r3, #4
 80058f8:	42ae      	cmp	r6, r5
 80058fa:	bf38      	it	cc
 80058fc:	2304      	movcc	r3, #4
 80058fe:	4418      	add	r0, r3
 8005900:	4443      	add	r3, r8
 8005902:	461e      	mov	r6, r3
 8005904:	4605      	mov	r5, r0
 8005906:	4575      	cmp	r5, lr
 8005908:	d30e      	bcc.n	8005928 <__mdiff+0xec>
 800590a:	f10e 0103 	add.w	r1, lr, #3
 800590e:	1a09      	subs	r1, r1, r0
 8005910:	f021 0103 	bic.w	r1, r1, #3
 8005914:	3803      	subs	r0, #3
 8005916:	4586      	cmp	lr, r0
 8005918:	bf38      	it	cc
 800591a:	2100      	movcc	r1, #0
 800591c:	440b      	add	r3, r1
 800591e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005922:	b189      	cbz	r1, 8005948 <__mdiff+0x10c>
 8005924:	6117      	str	r7, [r2, #16]
 8005926:	e7a3      	b.n	8005870 <__mdiff+0x34>
 8005928:	f855 8b04 	ldr.w	r8, [r5], #4
 800592c:	fa1f f188 	uxth.w	r1, r8
 8005930:	4461      	add	r1, ip
 8005932:	140c      	asrs	r4, r1, #16
 8005934:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005938:	b289      	uxth	r1, r1
 800593a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800593e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005942:	f846 1b04 	str.w	r1, [r6], #4
 8005946:	e7de      	b.n	8005906 <__mdiff+0xca>
 8005948:	3f01      	subs	r7, #1
 800594a:	e7e8      	b.n	800591e <__mdiff+0xe2>
 800594c:	08006816 	.word	0x08006816
 8005950:	08006827 	.word	0x08006827

08005954 <__d2b>:
 8005954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005956:	2101      	movs	r1, #1
 8005958:	4617      	mov	r7, r2
 800595a:	461c      	mov	r4, r3
 800595c:	9e08      	ldr	r6, [sp, #32]
 800595e:	f7ff fcd7 	bl	8005310 <_Balloc>
 8005962:	4605      	mov	r5, r0
 8005964:	b930      	cbnz	r0, 8005974 <__d2b+0x20>
 8005966:	4602      	mov	r2, r0
 8005968:	f240 310f 	movw	r1, #783	; 0x30f
 800596c:	4b22      	ldr	r3, [pc, #136]	; (80059f8 <__d2b+0xa4>)
 800596e:	4823      	ldr	r0, [pc, #140]	; (80059fc <__d2b+0xa8>)
 8005970:	f000 fa80 	bl	8005e74 <__assert_func>
 8005974:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005978:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800597c:	bb24      	cbnz	r4, 80059c8 <__d2b+0x74>
 800597e:	2f00      	cmp	r7, #0
 8005980:	9301      	str	r3, [sp, #4]
 8005982:	d026      	beq.n	80059d2 <__d2b+0x7e>
 8005984:	4668      	mov	r0, sp
 8005986:	9700      	str	r7, [sp, #0]
 8005988:	f7ff fd8a 	bl	80054a0 <__lo0bits>
 800598c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005990:	b1e8      	cbz	r0, 80059ce <__d2b+0x7a>
 8005992:	f1c0 0320 	rsb	r3, r0, #32
 8005996:	fa02 f303 	lsl.w	r3, r2, r3
 800599a:	430b      	orrs	r3, r1
 800599c:	40c2      	lsrs	r2, r0
 800599e:	616b      	str	r3, [r5, #20]
 80059a0:	9201      	str	r2, [sp, #4]
 80059a2:	9b01      	ldr	r3, [sp, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bf14      	ite	ne
 80059a8:	2102      	movne	r1, #2
 80059aa:	2101      	moveq	r1, #1
 80059ac:	61ab      	str	r3, [r5, #24]
 80059ae:	6129      	str	r1, [r5, #16]
 80059b0:	b1bc      	cbz	r4, 80059e2 <__d2b+0x8e>
 80059b2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80059b6:	4404      	add	r4, r0
 80059b8:	6034      	str	r4, [r6, #0]
 80059ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80059be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059c0:	6018      	str	r0, [r3, #0]
 80059c2:	4628      	mov	r0, r5
 80059c4:	b003      	add	sp, #12
 80059c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059cc:	e7d7      	b.n	800597e <__d2b+0x2a>
 80059ce:	6169      	str	r1, [r5, #20]
 80059d0:	e7e7      	b.n	80059a2 <__d2b+0x4e>
 80059d2:	a801      	add	r0, sp, #4
 80059d4:	f7ff fd64 	bl	80054a0 <__lo0bits>
 80059d8:	9b01      	ldr	r3, [sp, #4]
 80059da:	2101      	movs	r1, #1
 80059dc:	616b      	str	r3, [r5, #20]
 80059de:	3020      	adds	r0, #32
 80059e0:	e7e5      	b.n	80059ae <__d2b+0x5a>
 80059e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80059e6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80059ea:	6030      	str	r0, [r6, #0]
 80059ec:	6918      	ldr	r0, [r3, #16]
 80059ee:	f7ff fd37 	bl	8005460 <__hi0bits>
 80059f2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80059f6:	e7e2      	b.n	80059be <__d2b+0x6a>
 80059f8:	08006816 	.word	0x08006816
 80059fc:	08006827 	.word	0x08006827

08005a00 <__ssputs_r>:
 8005a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a04:	461f      	mov	r7, r3
 8005a06:	688e      	ldr	r6, [r1, #8]
 8005a08:	4682      	mov	sl, r0
 8005a0a:	42be      	cmp	r6, r7
 8005a0c:	460c      	mov	r4, r1
 8005a0e:	4690      	mov	r8, r2
 8005a10:	680b      	ldr	r3, [r1, #0]
 8005a12:	d82c      	bhi.n	8005a6e <__ssputs_r+0x6e>
 8005a14:	898a      	ldrh	r2, [r1, #12]
 8005a16:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a1a:	d026      	beq.n	8005a6a <__ssputs_r+0x6a>
 8005a1c:	6965      	ldr	r5, [r4, #20]
 8005a1e:	6909      	ldr	r1, [r1, #16]
 8005a20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a24:	eba3 0901 	sub.w	r9, r3, r1
 8005a28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a2c:	1c7b      	adds	r3, r7, #1
 8005a2e:	444b      	add	r3, r9
 8005a30:	106d      	asrs	r5, r5, #1
 8005a32:	429d      	cmp	r5, r3
 8005a34:	bf38      	it	cc
 8005a36:	461d      	movcc	r5, r3
 8005a38:	0553      	lsls	r3, r2, #21
 8005a3a:	d527      	bpl.n	8005a8c <__ssputs_r+0x8c>
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	f7ff fbdb 	bl	80051f8 <_malloc_r>
 8005a42:	4606      	mov	r6, r0
 8005a44:	b360      	cbz	r0, 8005aa0 <__ssputs_r+0xa0>
 8005a46:	464a      	mov	r2, r9
 8005a48:	6921      	ldr	r1, [r4, #16]
 8005a4a:	f000 fa05 	bl	8005e58 <memcpy>
 8005a4e:	89a3      	ldrh	r3, [r4, #12]
 8005a50:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a58:	81a3      	strh	r3, [r4, #12]
 8005a5a:	6126      	str	r6, [r4, #16]
 8005a5c:	444e      	add	r6, r9
 8005a5e:	6026      	str	r6, [r4, #0]
 8005a60:	463e      	mov	r6, r7
 8005a62:	6165      	str	r5, [r4, #20]
 8005a64:	eba5 0509 	sub.w	r5, r5, r9
 8005a68:	60a5      	str	r5, [r4, #8]
 8005a6a:	42be      	cmp	r6, r7
 8005a6c:	d900      	bls.n	8005a70 <__ssputs_r+0x70>
 8005a6e:	463e      	mov	r6, r7
 8005a70:	4632      	mov	r2, r6
 8005a72:	4641      	mov	r1, r8
 8005a74:	6820      	ldr	r0, [r4, #0]
 8005a76:	f000 f9c5 	bl	8005e04 <memmove>
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	68a3      	ldr	r3, [r4, #8]
 8005a7e:	1b9b      	subs	r3, r3, r6
 8005a80:	60a3      	str	r3, [r4, #8]
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	4433      	add	r3, r6
 8005a86:	6023      	str	r3, [r4, #0]
 8005a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8c:	462a      	mov	r2, r5
 8005a8e:	f000 fa35 	bl	8005efc <_realloc_r>
 8005a92:	4606      	mov	r6, r0
 8005a94:	2800      	cmp	r0, #0
 8005a96:	d1e0      	bne.n	8005a5a <__ssputs_r+0x5a>
 8005a98:	4650      	mov	r0, sl
 8005a9a:	6921      	ldr	r1, [r4, #16]
 8005a9c:	f7ff fb3c 	bl	8005118 <_free_r>
 8005aa0:	230c      	movs	r3, #12
 8005aa2:	f8ca 3000 	str.w	r3, [sl]
 8005aa6:	89a3      	ldrh	r3, [r4, #12]
 8005aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ab0:	81a3      	strh	r3, [r4, #12]
 8005ab2:	e7e9      	b.n	8005a88 <__ssputs_r+0x88>

08005ab4 <_svfiprintf_r>:
 8005ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab8:	4698      	mov	r8, r3
 8005aba:	898b      	ldrh	r3, [r1, #12]
 8005abc:	4607      	mov	r7, r0
 8005abe:	061b      	lsls	r3, r3, #24
 8005ac0:	460d      	mov	r5, r1
 8005ac2:	4614      	mov	r4, r2
 8005ac4:	b09d      	sub	sp, #116	; 0x74
 8005ac6:	d50e      	bpl.n	8005ae6 <_svfiprintf_r+0x32>
 8005ac8:	690b      	ldr	r3, [r1, #16]
 8005aca:	b963      	cbnz	r3, 8005ae6 <_svfiprintf_r+0x32>
 8005acc:	2140      	movs	r1, #64	; 0x40
 8005ace:	f7ff fb93 	bl	80051f8 <_malloc_r>
 8005ad2:	6028      	str	r0, [r5, #0]
 8005ad4:	6128      	str	r0, [r5, #16]
 8005ad6:	b920      	cbnz	r0, 8005ae2 <_svfiprintf_r+0x2e>
 8005ad8:	230c      	movs	r3, #12
 8005ada:	603b      	str	r3, [r7, #0]
 8005adc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae0:	e0d0      	b.n	8005c84 <_svfiprintf_r+0x1d0>
 8005ae2:	2340      	movs	r3, #64	; 0x40
 8005ae4:	616b      	str	r3, [r5, #20]
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8005aea:	2320      	movs	r3, #32
 8005aec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005af0:	2330      	movs	r3, #48	; 0x30
 8005af2:	f04f 0901 	mov.w	r9, #1
 8005af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005afa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005c9c <_svfiprintf_r+0x1e8>
 8005afe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b02:	4623      	mov	r3, r4
 8005b04:	469a      	mov	sl, r3
 8005b06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b0a:	b10a      	cbz	r2, 8005b10 <_svfiprintf_r+0x5c>
 8005b0c:	2a25      	cmp	r2, #37	; 0x25
 8005b0e:	d1f9      	bne.n	8005b04 <_svfiprintf_r+0x50>
 8005b10:	ebba 0b04 	subs.w	fp, sl, r4
 8005b14:	d00b      	beq.n	8005b2e <_svfiprintf_r+0x7a>
 8005b16:	465b      	mov	r3, fp
 8005b18:	4622      	mov	r2, r4
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	4638      	mov	r0, r7
 8005b1e:	f7ff ff6f 	bl	8005a00 <__ssputs_r>
 8005b22:	3001      	adds	r0, #1
 8005b24:	f000 80a9 	beq.w	8005c7a <_svfiprintf_r+0x1c6>
 8005b28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b2a:	445a      	add	r2, fp
 8005b2c:	9209      	str	r2, [sp, #36]	; 0x24
 8005b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 80a1 	beq.w	8005c7a <_svfiprintf_r+0x1c6>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b42:	f10a 0a01 	add.w	sl, sl, #1
 8005b46:	9304      	str	r3, [sp, #16]
 8005b48:	9307      	str	r3, [sp, #28]
 8005b4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b4e:	931a      	str	r3, [sp, #104]	; 0x68
 8005b50:	4654      	mov	r4, sl
 8005b52:	2205      	movs	r2, #5
 8005b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b58:	4850      	ldr	r0, [pc, #320]	; (8005c9c <_svfiprintf_r+0x1e8>)
 8005b5a:	f7fe fc60 	bl	800441e <memchr>
 8005b5e:	9a04      	ldr	r2, [sp, #16]
 8005b60:	b9d8      	cbnz	r0, 8005b9a <_svfiprintf_r+0xe6>
 8005b62:	06d0      	lsls	r0, r2, #27
 8005b64:	bf44      	itt	mi
 8005b66:	2320      	movmi	r3, #32
 8005b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b6c:	0711      	lsls	r1, r2, #28
 8005b6e:	bf44      	itt	mi
 8005b70:	232b      	movmi	r3, #43	; 0x2b
 8005b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b76:	f89a 3000 	ldrb.w	r3, [sl]
 8005b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b7c:	d015      	beq.n	8005baa <_svfiprintf_r+0xf6>
 8005b7e:	4654      	mov	r4, sl
 8005b80:	2000      	movs	r0, #0
 8005b82:	f04f 0c0a 	mov.w	ip, #10
 8005b86:	9a07      	ldr	r2, [sp, #28]
 8005b88:	4621      	mov	r1, r4
 8005b8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b8e:	3b30      	subs	r3, #48	; 0x30
 8005b90:	2b09      	cmp	r3, #9
 8005b92:	d94d      	bls.n	8005c30 <_svfiprintf_r+0x17c>
 8005b94:	b1b0      	cbz	r0, 8005bc4 <_svfiprintf_r+0x110>
 8005b96:	9207      	str	r2, [sp, #28]
 8005b98:	e014      	b.n	8005bc4 <_svfiprintf_r+0x110>
 8005b9a:	eba0 0308 	sub.w	r3, r0, r8
 8005b9e:	fa09 f303 	lsl.w	r3, r9, r3
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	46a2      	mov	sl, r4
 8005ba6:	9304      	str	r3, [sp, #16]
 8005ba8:	e7d2      	b.n	8005b50 <_svfiprintf_r+0x9c>
 8005baa:	9b03      	ldr	r3, [sp, #12]
 8005bac:	1d19      	adds	r1, r3, #4
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	9103      	str	r1, [sp, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	bfbb      	ittet	lt
 8005bb6:	425b      	neglt	r3, r3
 8005bb8:	f042 0202 	orrlt.w	r2, r2, #2
 8005bbc:	9307      	strge	r3, [sp, #28]
 8005bbe:	9307      	strlt	r3, [sp, #28]
 8005bc0:	bfb8      	it	lt
 8005bc2:	9204      	strlt	r2, [sp, #16]
 8005bc4:	7823      	ldrb	r3, [r4, #0]
 8005bc6:	2b2e      	cmp	r3, #46	; 0x2e
 8005bc8:	d10c      	bne.n	8005be4 <_svfiprintf_r+0x130>
 8005bca:	7863      	ldrb	r3, [r4, #1]
 8005bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8005bce:	d134      	bne.n	8005c3a <_svfiprintf_r+0x186>
 8005bd0:	9b03      	ldr	r3, [sp, #12]
 8005bd2:	3402      	adds	r4, #2
 8005bd4:	1d1a      	adds	r2, r3, #4
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	9203      	str	r2, [sp, #12]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	bfb8      	it	lt
 8005bde:	f04f 33ff 	movlt.w	r3, #4294967295
 8005be2:	9305      	str	r3, [sp, #20]
 8005be4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005ca0 <_svfiprintf_r+0x1ec>
 8005be8:	2203      	movs	r2, #3
 8005bea:	4650      	mov	r0, sl
 8005bec:	7821      	ldrb	r1, [r4, #0]
 8005bee:	f7fe fc16 	bl	800441e <memchr>
 8005bf2:	b138      	cbz	r0, 8005c04 <_svfiprintf_r+0x150>
 8005bf4:	2240      	movs	r2, #64	; 0x40
 8005bf6:	9b04      	ldr	r3, [sp, #16]
 8005bf8:	eba0 000a 	sub.w	r0, r0, sl
 8005bfc:	4082      	lsls	r2, r0
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	3401      	adds	r4, #1
 8005c02:	9304      	str	r3, [sp, #16]
 8005c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c08:	2206      	movs	r2, #6
 8005c0a:	4826      	ldr	r0, [pc, #152]	; (8005ca4 <_svfiprintf_r+0x1f0>)
 8005c0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c10:	f7fe fc05 	bl	800441e <memchr>
 8005c14:	2800      	cmp	r0, #0
 8005c16:	d038      	beq.n	8005c8a <_svfiprintf_r+0x1d6>
 8005c18:	4b23      	ldr	r3, [pc, #140]	; (8005ca8 <_svfiprintf_r+0x1f4>)
 8005c1a:	bb1b      	cbnz	r3, 8005c64 <_svfiprintf_r+0x1b0>
 8005c1c:	9b03      	ldr	r3, [sp, #12]
 8005c1e:	3307      	adds	r3, #7
 8005c20:	f023 0307 	bic.w	r3, r3, #7
 8005c24:	3308      	adds	r3, #8
 8005c26:	9303      	str	r3, [sp, #12]
 8005c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c2a:	4433      	add	r3, r6
 8005c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c2e:	e768      	b.n	8005b02 <_svfiprintf_r+0x4e>
 8005c30:	460c      	mov	r4, r1
 8005c32:	2001      	movs	r0, #1
 8005c34:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c38:	e7a6      	b.n	8005b88 <_svfiprintf_r+0xd4>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f04f 0c0a 	mov.w	ip, #10
 8005c40:	4619      	mov	r1, r3
 8005c42:	3401      	adds	r4, #1
 8005c44:	9305      	str	r3, [sp, #20]
 8005c46:	4620      	mov	r0, r4
 8005c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c4c:	3a30      	subs	r2, #48	; 0x30
 8005c4e:	2a09      	cmp	r2, #9
 8005c50:	d903      	bls.n	8005c5a <_svfiprintf_r+0x1a6>
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0c6      	beq.n	8005be4 <_svfiprintf_r+0x130>
 8005c56:	9105      	str	r1, [sp, #20]
 8005c58:	e7c4      	b.n	8005be4 <_svfiprintf_r+0x130>
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c62:	e7f0      	b.n	8005c46 <_svfiprintf_r+0x192>
 8005c64:	ab03      	add	r3, sp, #12
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	462a      	mov	r2, r5
 8005c6a:	4638      	mov	r0, r7
 8005c6c:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <_svfiprintf_r+0x1f8>)
 8005c6e:	a904      	add	r1, sp, #16
 8005c70:	f7fd fe6e 	bl	8003950 <_printf_float>
 8005c74:	1c42      	adds	r2, r0, #1
 8005c76:	4606      	mov	r6, r0
 8005c78:	d1d6      	bne.n	8005c28 <_svfiprintf_r+0x174>
 8005c7a:	89ab      	ldrh	r3, [r5, #12]
 8005c7c:	065b      	lsls	r3, r3, #25
 8005c7e:	f53f af2d 	bmi.w	8005adc <_svfiprintf_r+0x28>
 8005c82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c84:	b01d      	add	sp, #116	; 0x74
 8005c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c8a:	ab03      	add	r3, sp, #12
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	462a      	mov	r2, r5
 8005c90:	4638      	mov	r0, r7
 8005c92:	4b06      	ldr	r3, [pc, #24]	; (8005cac <_svfiprintf_r+0x1f8>)
 8005c94:	a904      	add	r1, sp, #16
 8005c96:	f7fe f8fb 	bl	8003e90 <_printf_i>
 8005c9a:	e7eb      	b.n	8005c74 <_svfiprintf_r+0x1c0>
 8005c9c:	0800697c 	.word	0x0800697c
 8005ca0:	08006982 	.word	0x08006982
 8005ca4:	08006986 	.word	0x08006986
 8005ca8:	08003951 	.word	0x08003951
 8005cac:	08005a01 	.word	0x08005a01

08005cb0 <__sflush_r>:
 8005cb0:	898a      	ldrh	r2, [r1, #12]
 8005cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb4:	4605      	mov	r5, r0
 8005cb6:	0710      	lsls	r0, r2, #28
 8005cb8:	460c      	mov	r4, r1
 8005cba:	d457      	bmi.n	8005d6c <__sflush_r+0xbc>
 8005cbc:	684b      	ldr	r3, [r1, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	dc04      	bgt.n	8005ccc <__sflush_r+0x1c>
 8005cc2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	dc01      	bgt.n	8005ccc <__sflush_r+0x1c>
 8005cc8:	2000      	movs	r0, #0
 8005cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ccc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cce:	2e00      	cmp	r6, #0
 8005cd0:	d0fa      	beq.n	8005cc8 <__sflush_r+0x18>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005cd8:	682f      	ldr	r7, [r5, #0]
 8005cda:	6a21      	ldr	r1, [r4, #32]
 8005cdc:	602b      	str	r3, [r5, #0]
 8005cde:	d032      	beq.n	8005d46 <__sflush_r+0x96>
 8005ce0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ce2:	89a3      	ldrh	r3, [r4, #12]
 8005ce4:	075a      	lsls	r2, r3, #29
 8005ce6:	d505      	bpl.n	8005cf4 <__sflush_r+0x44>
 8005ce8:	6863      	ldr	r3, [r4, #4]
 8005cea:	1ac0      	subs	r0, r0, r3
 8005cec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cee:	b10b      	cbz	r3, 8005cf4 <__sflush_r+0x44>
 8005cf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cf2:	1ac0      	subs	r0, r0, r3
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	6a21      	ldr	r1, [r4, #32]
 8005cfe:	47b0      	blx	r6
 8005d00:	1c43      	adds	r3, r0, #1
 8005d02:	89a3      	ldrh	r3, [r4, #12]
 8005d04:	d106      	bne.n	8005d14 <__sflush_r+0x64>
 8005d06:	6829      	ldr	r1, [r5, #0]
 8005d08:	291d      	cmp	r1, #29
 8005d0a:	d82b      	bhi.n	8005d64 <__sflush_r+0xb4>
 8005d0c:	4a28      	ldr	r2, [pc, #160]	; (8005db0 <__sflush_r+0x100>)
 8005d0e:	410a      	asrs	r2, r1
 8005d10:	07d6      	lsls	r6, r2, #31
 8005d12:	d427      	bmi.n	8005d64 <__sflush_r+0xb4>
 8005d14:	2200      	movs	r2, #0
 8005d16:	6062      	str	r2, [r4, #4]
 8005d18:	6922      	ldr	r2, [r4, #16]
 8005d1a:	04d9      	lsls	r1, r3, #19
 8005d1c:	6022      	str	r2, [r4, #0]
 8005d1e:	d504      	bpl.n	8005d2a <__sflush_r+0x7a>
 8005d20:	1c42      	adds	r2, r0, #1
 8005d22:	d101      	bne.n	8005d28 <__sflush_r+0x78>
 8005d24:	682b      	ldr	r3, [r5, #0]
 8005d26:	b903      	cbnz	r3, 8005d2a <__sflush_r+0x7a>
 8005d28:	6560      	str	r0, [r4, #84]	; 0x54
 8005d2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d2c:	602f      	str	r7, [r5, #0]
 8005d2e:	2900      	cmp	r1, #0
 8005d30:	d0ca      	beq.n	8005cc8 <__sflush_r+0x18>
 8005d32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d36:	4299      	cmp	r1, r3
 8005d38:	d002      	beq.n	8005d40 <__sflush_r+0x90>
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f7ff f9ec 	bl	8005118 <_free_r>
 8005d40:	2000      	movs	r0, #0
 8005d42:	6360      	str	r0, [r4, #52]	; 0x34
 8005d44:	e7c1      	b.n	8005cca <__sflush_r+0x1a>
 8005d46:	2301      	movs	r3, #1
 8005d48:	4628      	mov	r0, r5
 8005d4a:	47b0      	blx	r6
 8005d4c:	1c41      	adds	r1, r0, #1
 8005d4e:	d1c8      	bne.n	8005ce2 <__sflush_r+0x32>
 8005d50:	682b      	ldr	r3, [r5, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0c5      	beq.n	8005ce2 <__sflush_r+0x32>
 8005d56:	2b1d      	cmp	r3, #29
 8005d58:	d001      	beq.n	8005d5e <__sflush_r+0xae>
 8005d5a:	2b16      	cmp	r3, #22
 8005d5c:	d101      	bne.n	8005d62 <__sflush_r+0xb2>
 8005d5e:	602f      	str	r7, [r5, #0]
 8005d60:	e7b2      	b.n	8005cc8 <__sflush_r+0x18>
 8005d62:	89a3      	ldrh	r3, [r4, #12]
 8005d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d68:	81a3      	strh	r3, [r4, #12]
 8005d6a:	e7ae      	b.n	8005cca <__sflush_r+0x1a>
 8005d6c:	690f      	ldr	r7, [r1, #16]
 8005d6e:	2f00      	cmp	r7, #0
 8005d70:	d0aa      	beq.n	8005cc8 <__sflush_r+0x18>
 8005d72:	0793      	lsls	r3, r2, #30
 8005d74:	bf18      	it	ne
 8005d76:	2300      	movne	r3, #0
 8005d78:	680e      	ldr	r6, [r1, #0]
 8005d7a:	bf08      	it	eq
 8005d7c:	694b      	ldreq	r3, [r1, #20]
 8005d7e:	1bf6      	subs	r6, r6, r7
 8005d80:	600f      	str	r7, [r1, #0]
 8005d82:	608b      	str	r3, [r1, #8]
 8005d84:	2e00      	cmp	r6, #0
 8005d86:	dd9f      	ble.n	8005cc8 <__sflush_r+0x18>
 8005d88:	4633      	mov	r3, r6
 8005d8a:	463a      	mov	r2, r7
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	6a21      	ldr	r1, [r4, #32]
 8005d90:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005d94:	47e0      	blx	ip
 8005d96:	2800      	cmp	r0, #0
 8005d98:	dc06      	bgt.n	8005da8 <__sflush_r+0xf8>
 8005d9a:	89a3      	ldrh	r3, [r4, #12]
 8005d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005da4:	81a3      	strh	r3, [r4, #12]
 8005da6:	e790      	b.n	8005cca <__sflush_r+0x1a>
 8005da8:	4407      	add	r7, r0
 8005daa:	1a36      	subs	r6, r6, r0
 8005dac:	e7ea      	b.n	8005d84 <__sflush_r+0xd4>
 8005dae:	bf00      	nop
 8005db0:	dfbffffe 	.word	0xdfbffffe

08005db4 <_fflush_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	690b      	ldr	r3, [r1, #16]
 8005db8:	4605      	mov	r5, r0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	b913      	cbnz	r3, 8005dc4 <_fflush_r+0x10>
 8005dbe:	2500      	movs	r5, #0
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	bd38      	pop	{r3, r4, r5, pc}
 8005dc4:	b118      	cbz	r0, 8005dce <_fflush_r+0x1a>
 8005dc6:	6a03      	ldr	r3, [r0, #32]
 8005dc8:	b90b      	cbnz	r3, 8005dce <_fflush_r+0x1a>
 8005dca:	f7fe fa0f 	bl	80041ec <__sinit>
 8005dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0f3      	beq.n	8005dbe <_fflush_r+0xa>
 8005dd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005dd8:	07d0      	lsls	r0, r2, #31
 8005dda:	d404      	bmi.n	8005de6 <_fflush_r+0x32>
 8005ddc:	0599      	lsls	r1, r3, #22
 8005dde:	d402      	bmi.n	8005de6 <_fflush_r+0x32>
 8005de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005de2:	f7fe fb1a 	bl	800441a <__retarget_lock_acquire_recursive>
 8005de6:	4628      	mov	r0, r5
 8005de8:	4621      	mov	r1, r4
 8005dea:	f7ff ff61 	bl	8005cb0 <__sflush_r>
 8005dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005df0:	4605      	mov	r5, r0
 8005df2:	07da      	lsls	r2, r3, #31
 8005df4:	d4e4      	bmi.n	8005dc0 <_fflush_r+0xc>
 8005df6:	89a3      	ldrh	r3, [r4, #12]
 8005df8:	059b      	lsls	r3, r3, #22
 8005dfa:	d4e1      	bmi.n	8005dc0 <_fflush_r+0xc>
 8005dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dfe:	f7fe fb0d 	bl	800441c <__retarget_lock_release_recursive>
 8005e02:	e7dd      	b.n	8005dc0 <_fflush_r+0xc>

08005e04 <memmove>:
 8005e04:	4288      	cmp	r0, r1
 8005e06:	b510      	push	{r4, lr}
 8005e08:	eb01 0402 	add.w	r4, r1, r2
 8005e0c:	d902      	bls.n	8005e14 <memmove+0x10>
 8005e0e:	4284      	cmp	r4, r0
 8005e10:	4623      	mov	r3, r4
 8005e12:	d807      	bhi.n	8005e24 <memmove+0x20>
 8005e14:	1e43      	subs	r3, r0, #1
 8005e16:	42a1      	cmp	r1, r4
 8005e18:	d008      	beq.n	8005e2c <memmove+0x28>
 8005e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e22:	e7f8      	b.n	8005e16 <memmove+0x12>
 8005e24:	4601      	mov	r1, r0
 8005e26:	4402      	add	r2, r0
 8005e28:	428a      	cmp	r2, r1
 8005e2a:	d100      	bne.n	8005e2e <memmove+0x2a>
 8005e2c:	bd10      	pop	{r4, pc}
 8005e2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e36:	e7f7      	b.n	8005e28 <memmove+0x24>

08005e38 <_sbrk_r>:
 8005e38:	b538      	push	{r3, r4, r5, lr}
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	4d05      	ldr	r5, [pc, #20]	; (8005e54 <_sbrk_r+0x1c>)
 8005e3e:	4604      	mov	r4, r0
 8005e40:	4608      	mov	r0, r1
 8005e42:	602b      	str	r3, [r5, #0]
 8005e44:	f7fb fe20 	bl	8001a88 <_sbrk>
 8005e48:	1c43      	adds	r3, r0, #1
 8005e4a:	d102      	bne.n	8005e52 <_sbrk_r+0x1a>
 8005e4c:	682b      	ldr	r3, [r5, #0]
 8005e4e:	b103      	cbz	r3, 8005e52 <_sbrk_r+0x1a>
 8005e50:	6023      	str	r3, [r4, #0]
 8005e52:	bd38      	pop	{r3, r4, r5, pc}
 8005e54:	200003d8 	.word	0x200003d8

08005e58 <memcpy>:
 8005e58:	440a      	add	r2, r1
 8005e5a:	4291      	cmp	r1, r2
 8005e5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e60:	d100      	bne.n	8005e64 <memcpy+0xc>
 8005e62:	4770      	bx	lr
 8005e64:	b510      	push	{r4, lr}
 8005e66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e6a:	4291      	cmp	r1, r2
 8005e6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e70:	d1f9      	bne.n	8005e66 <memcpy+0xe>
 8005e72:	bd10      	pop	{r4, pc}

08005e74 <__assert_func>:
 8005e74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e76:	4614      	mov	r4, r2
 8005e78:	461a      	mov	r2, r3
 8005e7a:	4b09      	ldr	r3, [pc, #36]	; (8005ea0 <__assert_func+0x2c>)
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68d8      	ldr	r0, [r3, #12]
 8005e82:	b14c      	cbz	r4, 8005e98 <__assert_func+0x24>
 8005e84:	4b07      	ldr	r3, [pc, #28]	; (8005ea4 <__assert_func+0x30>)
 8005e86:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e8a:	9100      	str	r1, [sp, #0]
 8005e8c:	462b      	mov	r3, r5
 8005e8e:	4906      	ldr	r1, [pc, #24]	; (8005ea8 <__assert_func+0x34>)
 8005e90:	f000 f870 	bl	8005f74 <fiprintf>
 8005e94:	f000 f880 	bl	8005f98 <abort>
 8005e98:	4b04      	ldr	r3, [pc, #16]	; (8005eac <__assert_func+0x38>)
 8005e9a:	461c      	mov	r4, r3
 8005e9c:	e7f3      	b.n	8005e86 <__assert_func+0x12>
 8005e9e:	bf00      	nop
 8005ea0:	20000064 	.word	0x20000064
 8005ea4:	08006997 	.word	0x08006997
 8005ea8:	080069a4 	.word	0x080069a4
 8005eac:	080069d2 	.word	0x080069d2

08005eb0 <_calloc_r>:
 8005eb0:	b570      	push	{r4, r5, r6, lr}
 8005eb2:	fba1 5402 	umull	r5, r4, r1, r2
 8005eb6:	b934      	cbnz	r4, 8005ec6 <_calloc_r+0x16>
 8005eb8:	4629      	mov	r1, r5
 8005eba:	f7ff f99d 	bl	80051f8 <_malloc_r>
 8005ebe:	4606      	mov	r6, r0
 8005ec0:	b928      	cbnz	r0, 8005ece <_calloc_r+0x1e>
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	bd70      	pop	{r4, r5, r6, pc}
 8005ec6:	220c      	movs	r2, #12
 8005ec8:	2600      	movs	r6, #0
 8005eca:	6002      	str	r2, [r0, #0]
 8005ecc:	e7f9      	b.n	8005ec2 <_calloc_r+0x12>
 8005ece:	462a      	mov	r2, r5
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	f7fe fa24 	bl	800431e <memset>
 8005ed6:	e7f4      	b.n	8005ec2 <_calloc_r+0x12>

08005ed8 <__ascii_mbtowc>:
 8005ed8:	b082      	sub	sp, #8
 8005eda:	b901      	cbnz	r1, 8005ede <__ascii_mbtowc+0x6>
 8005edc:	a901      	add	r1, sp, #4
 8005ede:	b142      	cbz	r2, 8005ef2 <__ascii_mbtowc+0x1a>
 8005ee0:	b14b      	cbz	r3, 8005ef6 <__ascii_mbtowc+0x1e>
 8005ee2:	7813      	ldrb	r3, [r2, #0]
 8005ee4:	600b      	str	r3, [r1, #0]
 8005ee6:	7812      	ldrb	r2, [r2, #0]
 8005ee8:	1e10      	subs	r0, r2, #0
 8005eea:	bf18      	it	ne
 8005eec:	2001      	movne	r0, #1
 8005eee:	b002      	add	sp, #8
 8005ef0:	4770      	bx	lr
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	e7fb      	b.n	8005eee <__ascii_mbtowc+0x16>
 8005ef6:	f06f 0001 	mvn.w	r0, #1
 8005efa:	e7f8      	b.n	8005eee <__ascii_mbtowc+0x16>

08005efc <_realloc_r>:
 8005efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f00:	4680      	mov	r8, r0
 8005f02:	4614      	mov	r4, r2
 8005f04:	460e      	mov	r6, r1
 8005f06:	b921      	cbnz	r1, 8005f12 <_realloc_r+0x16>
 8005f08:	4611      	mov	r1, r2
 8005f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0e:	f7ff b973 	b.w	80051f8 <_malloc_r>
 8005f12:	b92a      	cbnz	r2, 8005f20 <_realloc_r+0x24>
 8005f14:	f7ff f900 	bl	8005118 <_free_r>
 8005f18:	4625      	mov	r5, r4
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f20:	f000 f841 	bl	8005fa6 <_malloc_usable_size_r>
 8005f24:	4284      	cmp	r4, r0
 8005f26:	4607      	mov	r7, r0
 8005f28:	d802      	bhi.n	8005f30 <_realloc_r+0x34>
 8005f2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f2e:	d812      	bhi.n	8005f56 <_realloc_r+0x5a>
 8005f30:	4621      	mov	r1, r4
 8005f32:	4640      	mov	r0, r8
 8005f34:	f7ff f960 	bl	80051f8 <_malloc_r>
 8005f38:	4605      	mov	r5, r0
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	d0ed      	beq.n	8005f1a <_realloc_r+0x1e>
 8005f3e:	42bc      	cmp	r4, r7
 8005f40:	4622      	mov	r2, r4
 8005f42:	4631      	mov	r1, r6
 8005f44:	bf28      	it	cs
 8005f46:	463a      	movcs	r2, r7
 8005f48:	f7ff ff86 	bl	8005e58 <memcpy>
 8005f4c:	4631      	mov	r1, r6
 8005f4e:	4640      	mov	r0, r8
 8005f50:	f7ff f8e2 	bl	8005118 <_free_r>
 8005f54:	e7e1      	b.n	8005f1a <_realloc_r+0x1e>
 8005f56:	4635      	mov	r5, r6
 8005f58:	e7df      	b.n	8005f1a <_realloc_r+0x1e>

08005f5a <__ascii_wctomb>:
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	4608      	mov	r0, r1
 8005f5e:	b141      	cbz	r1, 8005f72 <__ascii_wctomb+0x18>
 8005f60:	2aff      	cmp	r2, #255	; 0xff
 8005f62:	d904      	bls.n	8005f6e <__ascii_wctomb+0x14>
 8005f64:	228a      	movs	r2, #138	; 0x8a
 8005f66:	f04f 30ff 	mov.w	r0, #4294967295
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	4770      	bx	lr
 8005f6e:	2001      	movs	r0, #1
 8005f70:	700a      	strb	r2, [r1, #0]
 8005f72:	4770      	bx	lr

08005f74 <fiprintf>:
 8005f74:	b40e      	push	{r1, r2, r3}
 8005f76:	b503      	push	{r0, r1, lr}
 8005f78:	4601      	mov	r1, r0
 8005f7a:	ab03      	add	r3, sp, #12
 8005f7c:	4805      	ldr	r0, [pc, #20]	; (8005f94 <fiprintf+0x20>)
 8005f7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f82:	6800      	ldr	r0, [r0, #0]
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	f000 f83d 	bl	8006004 <_vfiprintf_r>
 8005f8a:	b002      	add	sp, #8
 8005f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f90:	b003      	add	sp, #12
 8005f92:	4770      	bx	lr
 8005f94:	20000064 	.word	0x20000064

08005f98 <abort>:
 8005f98:	2006      	movs	r0, #6
 8005f9a:	b508      	push	{r3, lr}
 8005f9c:	f000 fa0a 	bl	80063b4 <raise>
 8005fa0:	2001      	movs	r0, #1
 8005fa2:	f7fb fcfd 	bl	80019a0 <_exit>

08005fa6 <_malloc_usable_size_r>:
 8005fa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005faa:	1f18      	subs	r0, r3, #4
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	bfbc      	itt	lt
 8005fb0:	580b      	ldrlt	r3, [r1, r0]
 8005fb2:	18c0      	addlt	r0, r0, r3
 8005fb4:	4770      	bx	lr

08005fb6 <__sfputc_r>:
 8005fb6:	6893      	ldr	r3, [r2, #8]
 8005fb8:	b410      	push	{r4}
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	6093      	str	r3, [r2, #8]
 8005fc0:	da07      	bge.n	8005fd2 <__sfputc_r+0x1c>
 8005fc2:	6994      	ldr	r4, [r2, #24]
 8005fc4:	42a3      	cmp	r3, r4
 8005fc6:	db01      	blt.n	8005fcc <__sfputc_r+0x16>
 8005fc8:	290a      	cmp	r1, #10
 8005fca:	d102      	bne.n	8005fd2 <__sfputc_r+0x1c>
 8005fcc:	bc10      	pop	{r4}
 8005fce:	f000 b933 	b.w	8006238 <__swbuf_r>
 8005fd2:	6813      	ldr	r3, [r2, #0]
 8005fd4:	1c58      	adds	r0, r3, #1
 8005fd6:	6010      	str	r0, [r2, #0]
 8005fd8:	7019      	strb	r1, [r3, #0]
 8005fda:	4608      	mov	r0, r1
 8005fdc:	bc10      	pop	{r4}
 8005fde:	4770      	bx	lr

08005fe0 <__sfputs_r>:
 8005fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe2:	4606      	mov	r6, r0
 8005fe4:	460f      	mov	r7, r1
 8005fe6:	4614      	mov	r4, r2
 8005fe8:	18d5      	adds	r5, r2, r3
 8005fea:	42ac      	cmp	r4, r5
 8005fec:	d101      	bne.n	8005ff2 <__sfputs_r+0x12>
 8005fee:	2000      	movs	r0, #0
 8005ff0:	e007      	b.n	8006002 <__sfputs_r+0x22>
 8005ff2:	463a      	mov	r2, r7
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ffa:	f7ff ffdc 	bl	8005fb6 <__sfputc_r>
 8005ffe:	1c43      	adds	r3, r0, #1
 8006000:	d1f3      	bne.n	8005fea <__sfputs_r+0xa>
 8006002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006004 <_vfiprintf_r>:
 8006004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006008:	460d      	mov	r5, r1
 800600a:	4614      	mov	r4, r2
 800600c:	4698      	mov	r8, r3
 800600e:	4606      	mov	r6, r0
 8006010:	b09d      	sub	sp, #116	; 0x74
 8006012:	b118      	cbz	r0, 800601c <_vfiprintf_r+0x18>
 8006014:	6a03      	ldr	r3, [r0, #32]
 8006016:	b90b      	cbnz	r3, 800601c <_vfiprintf_r+0x18>
 8006018:	f7fe f8e8 	bl	80041ec <__sinit>
 800601c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800601e:	07d9      	lsls	r1, r3, #31
 8006020:	d405      	bmi.n	800602e <_vfiprintf_r+0x2a>
 8006022:	89ab      	ldrh	r3, [r5, #12]
 8006024:	059a      	lsls	r2, r3, #22
 8006026:	d402      	bmi.n	800602e <_vfiprintf_r+0x2a>
 8006028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800602a:	f7fe f9f6 	bl	800441a <__retarget_lock_acquire_recursive>
 800602e:	89ab      	ldrh	r3, [r5, #12]
 8006030:	071b      	lsls	r3, r3, #28
 8006032:	d501      	bpl.n	8006038 <_vfiprintf_r+0x34>
 8006034:	692b      	ldr	r3, [r5, #16]
 8006036:	b99b      	cbnz	r3, 8006060 <_vfiprintf_r+0x5c>
 8006038:	4629      	mov	r1, r5
 800603a:	4630      	mov	r0, r6
 800603c:	f000 f93a 	bl	80062b4 <__swsetup_r>
 8006040:	b170      	cbz	r0, 8006060 <_vfiprintf_r+0x5c>
 8006042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006044:	07dc      	lsls	r4, r3, #31
 8006046:	d504      	bpl.n	8006052 <_vfiprintf_r+0x4e>
 8006048:	f04f 30ff 	mov.w	r0, #4294967295
 800604c:	b01d      	add	sp, #116	; 0x74
 800604e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006052:	89ab      	ldrh	r3, [r5, #12]
 8006054:	0598      	lsls	r0, r3, #22
 8006056:	d4f7      	bmi.n	8006048 <_vfiprintf_r+0x44>
 8006058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800605a:	f7fe f9df 	bl	800441c <__retarget_lock_release_recursive>
 800605e:	e7f3      	b.n	8006048 <_vfiprintf_r+0x44>
 8006060:	2300      	movs	r3, #0
 8006062:	9309      	str	r3, [sp, #36]	; 0x24
 8006064:	2320      	movs	r3, #32
 8006066:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800606a:	2330      	movs	r3, #48	; 0x30
 800606c:	f04f 0901 	mov.w	r9, #1
 8006070:	f8cd 800c 	str.w	r8, [sp, #12]
 8006074:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006224 <_vfiprintf_r+0x220>
 8006078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800607c:	4623      	mov	r3, r4
 800607e:	469a      	mov	sl, r3
 8006080:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006084:	b10a      	cbz	r2, 800608a <_vfiprintf_r+0x86>
 8006086:	2a25      	cmp	r2, #37	; 0x25
 8006088:	d1f9      	bne.n	800607e <_vfiprintf_r+0x7a>
 800608a:	ebba 0b04 	subs.w	fp, sl, r4
 800608e:	d00b      	beq.n	80060a8 <_vfiprintf_r+0xa4>
 8006090:	465b      	mov	r3, fp
 8006092:	4622      	mov	r2, r4
 8006094:	4629      	mov	r1, r5
 8006096:	4630      	mov	r0, r6
 8006098:	f7ff ffa2 	bl	8005fe0 <__sfputs_r>
 800609c:	3001      	adds	r0, #1
 800609e:	f000 80a9 	beq.w	80061f4 <_vfiprintf_r+0x1f0>
 80060a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060a4:	445a      	add	r2, fp
 80060a6:	9209      	str	r2, [sp, #36]	; 0x24
 80060a8:	f89a 3000 	ldrb.w	r3, [sl]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 80a1 	beq.w	80061f4 <_vfiprintf_r+0x1f0>
 80060b2:	2300      	movs	r3, #0
 80060b4:	f04f 32ff 	mov.w	r2, #4294967295
 80060b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060bc:	f10a 0a01 	add.w	sl, sl, #1
 80060c0:	9304      	str	r3, [sp, #16]
 80060c2:	9307      	str	r3, [sp, #28]
 80060c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060c8:	931a      	str	r3, [sp, #104]	; 0x68
 80060ca:	4654      	mov	r4, sl
 80060cc:	2205      	movs	r2, #5
 80060ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060d2:	4854      	ldr	r0, [pc, #336]	; (8006224 <_vfiprintf_r+0x220>)
 80060d4:	f7fe f9a3 	bl	800441e <memchr>
 80060d8:	9a04      	ldr	r2, [sp, #16]
 80060da:	b9d8      	cbnz	r0, 8006114 <_vfiprintf_r+0x110>
 80060dc:	06d1      	lsls	r1, r2, #27
 80060de:	bf44      	itt	mi
 80060e0:	2320      	movmi	r3, #32
 80060e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060e6:	0713      	lsls	r3, r2, #28
 80060e8:	bf44      	itt	mi
 80060ea:	232b      	movmi	r3, #43	; 0x2b
 80060ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060f0:	f89a 3000 	ldrb.w	r3, [sl]
 80060f4:	2b2a      	cmp	r3, #42	; 0x2a
 80060f6:	d015      	beq.n	8006124 <_vfiprintf_r+0x120>
 80060f8:	4654      	mov	r4, sl
 80060fa:	2000      	movs	r0, #0
 80060fc:	f04f 0c0a 	mov.w	ip, #10
 8006100:	9a07      	ldr	r2, [sp, #28]
 8006102:	4621      	mov	r1, r4
 8006104:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006108:	3b30      	subs	r3, #48	; 0x30
 800610a:	2b09      	cmp	r3, #9
 800610c:	d94d      	bls.n	80061aa <_vfiprintf_r+0x1a6>
 800610e:	b1b0      	cbz	r0, 800613e <_vfiprintf_r+0x13a>
 8006110:	9207      	str	r2, [sp, #28]
 8006112:	e014      	b.n	800613e <_vfiprintf_r+0x13a>
 8006114:	eba0 0308 	sub.w	r3, r0, r8
 8006118:	fa09 f303 	lsl.w	r3, r9, r3
 800611c:	4313      	orrs	r3, r2
 800611e:	46a2      	mov	sl, r4
 8006120:	9304      	str	r3, [sp, #16]
 8006122:	e7d2      	b.n	80060ca <_vfiprintf_r+0xc6>
 8006124:	9b03      	ldr	r3, [sp, #12]
 8006126:	1d19      	adds	r1, r3, #4
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	9103      	str	r1, [sp, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	bfbb      	ittet	lt
 8006130:	425b      	neglt	r3, r3
 8006132:	f042 0202 	orrlt.w	r2, r2, #2
 8006136:	9307      	strge	r3, [sp, #28]
 8006138:	9307      	strlt	r3, [sp, #28]
 800613a:	bfb8      	it	lt
 800613c:	9204      	strlt	r2, [sp, #16]
 800613e:	7823      	ldrb	r3, [r4, #0]
 8006140:	2b2e      	cmp	r3, #46	; 0x2e
 8006142:	d10c      	bne.n	800615e <_vfiprintf_r+0x15a>
 8006144:	7863      	ldrb	r3, [r4, #1]
 8006146:	2b2a      	cmp	r3, #42	; 0x2a
 8006148:	d134      	bne.n	80061b4 <_vfiprintf_r+0x1b0>
 800614a:	9b03      	ldr	r3, [sp, #12]
 800614c:	3402      	adds	r4, #2
 800614e:	1d1a      	adds	r2, r3, #4
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	9203      	str	r2, [sp, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	bfb8      	it	lt
 8006158:	f04f 33ff 	movlt.w	r3, #4294967295
 800615c:	9305      	str	r3, [sp, #20]
 800615e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006228 <_vfiprintf_r+0x224>
 8006162:	2203      	movs	r2, #3
 8006164:	4650      	mov	r0, sl
 8006166:	7821      	ldrb	r1, [r4, #0]
 8006168:	f7fe f959 	bl	800441e <memchr>
 800616c:	b138      	cbz	r0, 800617e <_vfiprintf_r+0x17a>
 800616e:	2240      	movs	r2, #64	; 0x40
 8006170:	9b04      	ldr	r3, [sp, #16]
 8006172:	eba0 000a 	sub.w	r0, r0, sl
 8006176:	4082      	lsls	r2, r0
 8006178:	4313      	orrs	r3, r2
 800617a:	3401      	adds	r4, #1
 800617c:	9304      	str	r3, [sp, #16]
 800617e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006182:	2206      	movs	r2, #6
 8006184:	4829      	ldr	r0, [pc, #164]	; (800622c <_vfiprintf_r+0x228>)
 8006186:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800618a:	f7fe f948 	bl	800441e <memchr>
 800618e:	2800      	cmp	r0, #0
 8006190:	d03f      	beq.n	8006212 <_vfiprintf_r+0x20e>
 8006192:	4b27      	ldr	r3, [pc, #156]	; (8006230 <_vfiprintf_r+0x22c>)
 8006194:	bb1b      	cbnz	r3, 80061de <_vfiprintf_r+0x1da>
 8006196:	9b03      	ldr	r3, [sp, #12]
 8006198:	3307      	adds	r3, #7
 800619a:	f023 0307 	bic.w	r3, r3, #7
 800619e:	3308      	adds	r3, #8
 80061a0:	9303      	str	r3, [sp, #12]
 80061a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a4:	443b      	add	r3, r7
 80061a6:	9309      	str	r3, [sp, #36]	; 0x24
 80061a8:	e768      	b.n	800607c <_vfiprintf_r+0x78>
 80061aa:	460c      	mov	r4, r1
 80061ac:	2001      	movs	r0, #1
 80061ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80061b2:	e7a6      	b.n	8006102 <_vfiprintf_r+0xfe>
 80061b4:	2300      	movs	r3, #0
 80061b6:	f04f 0c0a 	mov.w	ip, #10
 80061ba:	4619      	mov	r1, r3
 80061bc:	3401      	adds	r4, #1
 80061be:	9305      	str	r3, [sp, #20]
 80061c0:	4620      	mov	r0, r4
 80061c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061c6:	3a30      	subs	r2, #48	; 0x30
 80061c8:	2a09      	cmp	r2, #9
 80061ca:	d903      	bls.n	80061d4 <_vfiprintf_r+0x1d0>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d0c6      	beq.n	800615e <_vfiprintf_r+0x15a>
 80061d0:	9105      	str	r1, [sp, #20]
 80061d2:	e7c4      	b.n	800615e <_vfiprintf_r+0x15a>
 80061d4:	4604      	mov	r4, r0
 80061d6:	2301      	movs	r3, #1
 80061d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80061dc:	e7f0      	b.n	80061c0 <_vfiprintf_r+0x1bc>
 80061de:	ab03      	add	r3, sp, #12
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	462a      	mov	r2, r5
 80061e4:	4630      	mov	r0, r6
 80061e6:	4b13      	ldr	r3, [pc, #76]	; (8006234 <_vfiprintf_r+0x230>)
 80061e8:	a904      	add	r1, sp, #16
 80061ea:	f7fd fbb1 	bl	8003950 <_printf_float>
 80061ee:	4607      	mov	r7, r0
 80061f0:	1c78      	adds	r0, r7, #1
 80061f2:	d1d6      	bne.n	80061a2 <_vfiprintf_r+0x19e>
 80061f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061f6:	07d9      	lsls	r1, r3, #31
 80061f8:	d405      	bmi.n	8006206 <_vfiprintf_r+0x202>
 80061fa:	89ab      	ldrh	r3, [r5, #12]
 80061fc:	059a      	lsls	r2, r3, #22
 80061fe:	d402      	bmi.n	8006206 <_vfiprintf_r+0x202>
 8006200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006202:	f7fe f90b 	bl	800441c <__retarget_lock_release_recursive>
 8006206:	89ab      	ldrh	r3, [r5, #12]
 8006208:	065b      	lsls	r3, r3, #25
 800620a:	f53f af1d 	bmi.w	8006048 <_vfiprintf_r+0x44>
 800620e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006210:	e71c      	b.n	800604c <_vfiprintf_r+0x48>
 8006212:	ab03      	add	r3, sp, #12
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	462a      	mov	r2, r5
 8006218:	4630      	mov	r0, r6
 800621a:	4b06      	ldr	r3, [pc, #24]	; (8006234 <_vfiprintf_r+0x230>)
 800621c:	a904      	add	r1, sp, #16
 800621e:	f7fd fe37 	bl	8003e90 <_printf_i>
 8006222:	e7e4      	b.n	80061ee <_vfiprintf_r+0x1ea>
 8006224:	0800697c 	.word	0x0800697c
 8006228:	08006982 	.word	0x08006982
 800622c:	08006986 	.word	0x08006986
 8006230:	08003951 	.word	0x08003951
 8006234:	08005fe1 	.word	0x08005fe1

08006238 <__swbuf_r>:
 8006238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623a:	460e      	mov	r6, r1
 800623c:	4614      	mov	r4, r2
 800623e:	4605      	mov	r5, r0
 8006240:	b118      	cbz	r0, 800624a <__swbuf_r+0x12>
 8006242:	6a03      	ldr	r3, [r0, #32]
 8006244:	b90b      	cbnz	r3, 800624a <__swbuf_r+0x12>
 8006246:	f7fd ffd1 	bl	80041ec <__sinit>
 800624a:	69a3      	ldr	r3, [r4, #24]
 800624c:	60a3      	str	r3, [r4, #8]
 800624e:	89a3      	ldrh	r3, [r4, #12]
 8006250:	071a      	lsls	r2, r3, #28
 8006252:	d525      	bpl.n	80062a0 <__swbuf_r+0x68>
 8006254:	6923      	ldr	r3, [r4, #16]
 8006256:	b31b      	cbz	r3, 80062a0 <__swbuf_r+0x68>
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	6922      	ldr	r2, [r4, #16]
 800625c:	b2f6      	uxtb	r6, r6
 800625e:	1a98      	subs	r0, r3, r2
 8006260:	6963      	ldr	r3, [r4, #20]
 8006262:	4637      	mov	r7, r6
 8006264:	4283      	cmp	r3, r0
 8006266:	dc04      	bgt.n	8006272 <__swbuf_r+0x3a>
 8006268:	4621      	mov	r1, r4
 800626a:	4628      	mov	r0, r5
 800626c:	f7ff fda2 	bl	8005db4 <_fflush_r>
 8006270:	b9e0      	cbnz	r0, 80062ac <__swbuf_r+0x74>
 8006272:	68a3      	ldr	r3, [r4, #8]
 8006274:	3b01      	subs	r3, #1
 8006276:	60a3      	str	r3, [r4, #8]
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	1c5a      	adds	r2, r3, #1
 800627c:	6022      	str	r2, [r4, #0]
 800627e:	701e      	strb	r6, [r3, #0]
 8006280:	6962      	ldr	r2, [r4, #20]
 8006282:	1c43      	adds	r3, r0, #1
 8006284:	429a      	cmp	r2, r3
 8006286:	d004      	beq.n	8006292 <__swbuf_r+0x5a>
 8006288:	89a3      	ldrh	r3, [r4, #12]
 800628a:	07db      	lsls	r3, r3, #31
 800628c:	d506      	bpl.n	800629c <__swbuf_r+0x64>
 800628e:	2e0a      	cmp	r6, #10
 8006290:	d104      	bne.n	800629c <__swbuf_r+0x64>
 8006292:	4621      	mov	r1, r4
 8006294:	4628      	mov	r0, r5
 8006296:	f7ff fd8d 	bl	8005db4 <_fflush_r>
 800629a:	b938      	cbnz	r0, 80062ac <__swbuf_r+0x74>
 800629c:	4638      	mov	r0, r7
 800629e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062a0:	4621      	mov	r1, r4
 80062a2:	4628      	mov	r0, r5
 80062a4:	f000 f806 	bl	80062b4 <__swsetup_r>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d0d5      	beq.n	8006258 <__swbuf_r+0x20>
 80062ac:	f04f 37ff 	mov.w	r7, #4294967295
 80062b0:	e7f4      	b.n	800629c <__swbuf_r+0x64>
	...

080062b4 <__swsetup_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	4b2a      	ldr	r3, [pc, #168]	; (8006360 <__swsetup_r+0xac>)
 80062b8:	4605      	mov	r5, r0
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	460c      	mov	r4, r1
 80062be:	b118      	cbz	r0, 80062c8 <__swsetup_r+0x14>
 80062c0:	6a03      	ldr	r3, [r0, #32]
 80062c2:	b90b      	cbnz	r3, 80062c8 <__swsetup_r+0x14>
 80062c4:	f7fd ff92 	bl	80041ec <__sinit>
 80062c8:	89a3      	ldrh	r3, [r4, #12]
 80062ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062ce:	0718      	lsls	r0, r3, #28
 80062d0:	d422      	bmi.n	8006318 <__swsetup_r+0x64>
 80062d2:	06d9      	lsls	r1, r3, #27
 80062d4:	d407      	bmi.n	80062e6 <__swsetup_r+0x32>
 80062d6:	2309      	movs	r3, #9
 80062d8:	602b      	str	r3, [r5, #0]
 80062da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062de:	f04f 30ff 	mov.w	r0, #4294967295
 80062e2:	81a3      	strh	r3, [r4, #12]
 80062e4:	e034      	b.n	8006350 <__swsetup_r+0x9c>
 80062e6:	0758      	lsls	r0, r3, #29
 80062e8:	d512      	bpl.n	8006310 <__swsetup_r+0x5c>
 80062ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062ec:	b141      	cbz	r1, 8006300 <__swsetup_r+0x4c>
 80062ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062f2:	4299      	cmp	r1, r3
 80062f4:	d002      	beq.n	80062fc <__swsetup_r+0x48>
 80062f6:	4628      	mov	r0, r5
 80062f8:	f7fe ff0e 	bl	8005118 <_free_r>
 80062fc:	2300      	movs	r3, #0
 80062fe:	6363      	str	r3, [r4, #52]	; 0x34
 8006300:	89a3      	ldrh	r3, [r4, #12]
 8006302:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006306:	81a3      	strh	r3, [r4, #12]
 8006308:	2300      	movs	r3, #0
 800630a:	6063      	str	r3, [r4, #4]
 800630c:	6923      	ldr	r3, [r4, #16]
 800630e:	6023      	str	r3, [r4, #0]
 8006310:	89a3      	ldrh	r3, [r4, #12]
 8006312:	f043 0308 	orr.w	r3, r3, #8
 8006316:	81a3      	strh	r3, [r4, #12]
 8006318:	6923      	ldr	r3, [r4, #16]
 800631a:	b94b      	cbnz	r3, 8006330 <__swsetup_r+0x7c>
 800631c:	89a3      	ldrh	r3, [r4, #12]
 800631e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006326:	d003      	beq.n	8006330 <__swsetup_r+0x7c>
 8006328:	4621      	mov	r1, r4
 800632a:	4628      	mov	r0, r5
 800632c:	f000 f883 	bl	8006436 <__smakebuf_r>
 8006330:	89a0      	ldrh	r0, [r4, #12]
 8006332:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006336:	f010 0301 	ands.w	r3, r0, #1
 800633a:	d00a      	beq.n	8006352 <__swsetup_r+0x9e>
 800633c:	2300      	movs	r3, #0
 800633e:	60a3      	str	r3, [r4, #8]
 8006340:	6963      	ldr	r3, [r4, #20]
 8006342:	425b      	negs	r3, r3
 8006344:	61a3      	str	r3, [r4, #24]
 8006346:	6923      	ldr	r3, [r4, #16]
 8006348:	b943      	cbnz	r3, 800635c <__swsetup_r+0xa8>
 800634a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800634e:	d1c4      	bne.n	80062da <__swsetup_r+0x26>
 8006350:	bd38      	pop	{r3, r4, r5, pc}
 8006352:	0781      	lsls	r1, r0, #30
 8006354:	bf58      	it	pl
 8006356:	6963      	ldrpl	r3, [r4, #20]
 8006358:	60a3      	str	r3, [r4, #8]
 800635a:	e7f4      	b.n	8006346 <__swsetup_r+0x92>
 800635c:	2000      	movs	r0, #0
 800635e:	e7f7      	b.n	8006350 <__swsetup_r+0x9c>
 8006360:	20000064 	.word	0x20000064

08006364 <_raise_r>:
 8006364:	291f      	cmp	r1, #31
 8006366:	b538      	push	{r3, r4, r5, lr}
 8006368:	4604      	mov	r4, r0
 800636a:	460d      	mov	r5, r1
 800636c:	d904      	bls.n	8006378 <_raise_r+0x14>
 800636e:	2316      	movs	r3, #22
 8006370:	6003      	str	r3, [r0, #0]
 8006372:	f04f 30ff 	mov.w	r0, #4294967295
 8006376:	bd38      	pop	{r3, r4, r5, pc}
 8006378:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800637a:	b112      	cbz	r2, 8006382 <_raise_r+0x1e>
 800637c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006380:	b94b      	cbnz	r3, 8006396 <_raise_r+0x32>
 8006382:	4620      	mov	r0, r4
 8006384:	f000 f830 	bl	80063e8 <_getpid_r>
 8006388:	462a      	mov	r2, r5
 800638a:	4601      	mov	r1, r0
 800638c:	4620      	mov	r0, r4
 800638e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006392:	f000 b817 	b.w	80063c4 <_kill_r>
 8006396:	2b01      	cmp	r3, #1
 8006398:	d00a      	beq.n	80063b0 <_raise_r+0x4c>
 800639a:	1c59      	adds	r1, r3, #1
 800639c:	d103      	bne.n	80063a6 <_raise_r+0x42>
 800639e:	2316      	movs	r3, #22
 80063a0:	6003      	str	r3, [r0, #0]
 80063a2:	2001      	movs	r0, #1
 80063a4:	e7e7      	b.n	8006376 <_raise_r+0x12>
 80063a6:	2400      	movs	r4, #0
 80063a8:	4628      	mov	r0, r5
 80063aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80063ae:	4798      	blx	r3
 80063b0:	2000      	movs	r0, #0
 80063b2:	e7e0      	b.n	8006376 <_raise_r+0x12>

080063b4 <raise>:
 80063b4:	4b02      	ldr	r3, [pc, #8]	; (80063c0 <raise+0xc>)
 80063b6:	4601      	mov	r1, r0
 80063b8:	6818      	ldr	r0, [r3, #0]
 80063ba:	f7ff bfd3 	b.w	8006364 <_raise_r>
 80063be:	bf00      	nop
 80063c0:	20000064 	.word	0x20000064

080063c4 <_kill_r>:
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	2300      	movs	r3, #0
 80063c8:	4d06      	ldr	r5, [pc, #24]	; (80063e4 <_kill_r+0x20>)
 80063ca:	4604      	mov	r4, r0
 80063cc:	4608      	mov	r0, r1
 80063ce:	4611      	mov	r1, r2
 80063d0:	602b      	str	r3, [r5, #0]
 80063d2:	f7fb fad5 	bl	8001980 <_kill>
 80063d6:	1c43      	adds	r3, r0, #1
 80063d8:	d102      	bne.n	80063e0 <_kill_r+0x1c>
 80063da:	682b      	ldr	r3, [r5, #0]
 80063dc:	b103      	cbz	r3, 80063e0 <_kill_r+0x1c>
 80063de:	6023      	str	r3, [r4, #0]
 80063e0:	bd38      	pop	{r3, r4, r5, pc}
 80063e2:	bf00      	nop
 80063e4:	200003d8 	.word	0x200003d8

080063e8 <_getpid_r>:
 80063e8:	f7fb bac3 	b.w	8001972 <_getpid>

080063ec <__swhatbuf_r>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	460c      	mov	r4, r1
 80063f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f4:	4615      	mov	r5, r2
 80063f6:	2900      	cmp	r1, #0
 80063f8:	461e      	mov	r6, r3
 80063fa:	b096      	sub	sp, #88	; 0x58
 80063fc:	da0c      	bge.n	8006418 <__swhatbuf_r+0x2c>
 80063fe:	89a3      	ldrh	r3, [r4, #12]
 8006400:	2100      	movs	r1, #0
 8006402:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006406:	bf0c      	ite	eq
 8006408:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800640c:	2340      	movne	r3, #64	; 0x40
 800640e:	2000      	movs	r0, #0
 8006410:	6031      	str	r1, [r6, #0]
 8006412:	602b      	str	r3, [r5, #0]
 8006414:	b016      	add	sp, #88	; 0x58
 8006416:	bd70      	pop	{r4, r5, r6, pc}
 8006418:	466a      	mov	r2, sp
 800641a:	f000 f849 	bl	80064b0 <_fstat_r>
 800641e:	2800      	cmp	r0, #0
 8006420:	dbed      	blt.n	80063fe <__swhatbuf_r+0x12>
 8006422:	9901      	ldr	r1, [sp, #4]
 8006424:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006428:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800642c:	4259      	negs	r1, r3
 800642e:	4159      	adcs	r1, r3
 8006430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006434:	e7eb      	b.n	800640e <__swhatbuf_r+0x22>

08006436 <__smakebuf_r>:
 8006436:	898b      	ldrh	r3, [r1, #12]
 8006438:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800643a:	079d      	lsls	r5, r3, #30
 800643c:	4606      	mov	r6, r0
 800643e:	460c      	mov	r4, r1
 8006440:	d507      	bpl.n	8006452 <__smakebuf_r+0x1c>
 8006442:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006446:	6023      	str	r3, [r4, #0]
 8006448:	6123      	str	r3, [r4, #16]
 800644a:	2301      	movs	r3, #1
 800644c:	6163      	str	r3, [r4, #20]
 800644e:	b002      	add	sp, #8
 8006450:	bd70      	pop	{r4, r5, r6, pc}
 8006452:	466a      	mov	r2, sp
 8006454:	ab01      	add	r3, sp, #4
 8006456:	f7ff ffc9 	bl	80063ec <__swhatbuf_r>
 800645a:	9900      	ldr	r1, [sp, #0]
 800645c:	4605      	mov	r5, r0
 800645e:	4630      	mov	r0, r6
 8006460:	f7fe feca 	bl	80051f8 <_malloc_r>
 8006464:	b948      	cbnz	r0, 800647a <__smakebuf_r+0x44>
 8006466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800646a:	059a      	lsls	r2, r3, #22
 800646c:	d4ef      	bmi.n	800644e <__smakebuf_r+0x18>
 800646e:	f023 0303 	bic.w	r3, r3, #3
 8006472:	f043 0302 	orr.w	r3, r3, #2
 8006476:	81a3      	strh	r3, [r4, #12]
 8006478:	e7e3      	b.n	8006442 <__smakebuf_r+0xc>
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	6020      	str	r0, [r4, #0]
 800647e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006482:	81a3      	strh	r3, [r4, #12]
 8006484:	9b00      	ldr	r3, [sp, #0]
 8006486:	6120      	str	r0, [r4, #16]
 8006488:	6163      	str	r3, [r4, #20]
 800648a:	9b01      	ldr	r3, [sp, #4]
 800648c:	b15b      	cbz	r3, 80064a6 <__smakebuf_r+0x70>
 800648e:	4630      	mov	r0, r6
 8006490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006494:	f000 f81e 	bl	80064d4 <_isatty_r>
 8006498:	b128      	cbz	r0, 80064a6 <__smakebuf_r+0x70>
 800649a:	89a3      	ldrh	r3, [r4, #12]
 800649c:	f023 0303 	bic.w	r3, r3, #3
 80064a0:	f043 0301 	orr.w	r3, r3, #1
 80064a4:	81a3      	strh	r3, [r4, #12]
 80064a6:	89a3      	ldrh	r3, [r4, #12]
 80064a8:	431d      	orrs	r5, r3
 80064aa:	81a5      	strh	r5, [r4, #12]
 80064ac:	e7cf      	b.n	800644e <__smakebuf_r+0x18>
	...

080064b0 <_fstat_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	2300      	movs	r3, #0
 80064b4:	4d06      	ldr	r5, [pc, #24]	; (80064d0 <_fstat_r+0x20>)
 80064b6:	4604      	mov	r4, r0
 80064b8:	4608      	mov	r0, r1
 80064ba:	4611      	mov	r1, r2
 80064bc:	602b      	str	r3, [r5, #0]
 80064be:	f7fb fabd 	bl	8001a3c <_fstat>
 80064c2:	1c43      	adds	r3, r0, #1
 80064c4:	d102      	bne.n	80064cc <_fstat_r+0x1c>
 80064c6:	682b      	ldr	r3, [r5, #0]
 80064c8:	b103      	cbz	r3, 80064cc <_fstat_r+0x1c>
 80064ca:	6023      	str	r3, [r4, #0]
 80064cc:	bd38      	pop	{r3, r4, r5, pc}
 80064ce:	bf00      	nop
 80064d0:	200003d8 	.word	0x200003d8

080064d4 <_isatty_r>:
 80064d4:	b538      	push	{r3, r4, r5, lr}
 80064d6:	2300      	movs	r3, #0
 80064d8:	4d05      	ldr	r5, [pc, #20]	; (80064f0 <_isatty_r+0x1c>)
 80064da:	4604      	mov	r4, r0
 80064dc:	4608      	mov	r0, r1
 80064de:	602b      	str	r3, [r5, #0]
 80064e0:	f7fb fabb 	bl	8001a5a <_isatty>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d102      	bne.n	80064ee <_isatty_r+0x1a>
 80064e8:	682b      	ldr	r3, [r5, #0]
 80064ea:	b103      	cbz	r3, 80064ee <_isatty_r+0x1a>
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	bd38      	pop	{r3, r4, r5, pc}
 80064f0:	200003d8 	.word	0x200003d8

080064f4 <_init>:
 80064f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f6:	bf00      	nop
 80064f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064fa:	bc08      	pop	{r3}
 80064fc:	469e      	mov	lr, r3
 80064fe:	4770      	bx	lr

08006500 <_fini>:
 8006500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006502:	bf00      	nop
 8006504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006506:	bc08      	pop	{r3}
 8006508:	469e      	mov	lr, r3
 800650a:	4770      	bx	lr
